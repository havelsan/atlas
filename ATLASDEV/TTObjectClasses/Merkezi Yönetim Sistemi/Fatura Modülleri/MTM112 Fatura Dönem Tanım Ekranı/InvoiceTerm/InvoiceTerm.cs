
using System;
using System.Collections;
using System.Linq;
using System.ComponentModel;
using System.Collections.Generic;
using TTUtils;
using TTInstanceManagement;
using TTDataDictionary;
using System.Text;

namespace TTObjectClasses
{
    public partial class InvoiceTerm : TTDefinitionSet
    {
        #region Methods

        protected override void PreInsert()
        {
            base.PreInsert();
            LastStateUser = Common.CurrentResource;
        }

        protected override void PreUpdate()
        {
            base.PreUpdate();
            LastStateUser = Common.CurrentResource;
        }

        public static InvoiceTerm Create(TTObjectContext context)
        {
            InvoiceTerm invoiceTerm = new InvoiceTerm(context);
            invoiceTerm.CurrentStateDefID = InvoiceTerm.States.Open;

            InvoiceTerm previousInvoiceTerm = InvoiceTerm.LastInvoiceTerm();
            if (previousInvoiceTerm == null)
            {
                invoiceTerm.Name = Common.RecTime().ToString("MMMM") + " " + Common.RecTime().Year;
                invoiceTerm.StartDate = new DateTime(Common.RecTime().Year, Common.RecTime().Month, 1);
                invoiceTerm.EndDate = new DateTime(Common.RecTime().Year, Common.RecTime().Month, DateTime.DaysInMonth(Common.RecTime().Year, Common.RecTime().Month), 23, 59, 59);
            }
            else
            {
                invoiceTerm.Name = previousInvoiceTerm.StartDate.Value.AddMonths(1).ToString("MMMM") + " " + previousInvoiceTerm.StartDate.Value.AddMonths(1).Year;
                DateTime newStartDateTime = previousInvoiceTerm.StartDate.Value.AddMonths(1);
                invoiceTerm.StartDate = newStartDateTime;
                invoiceTerm.EndDate = new DateTime(newStartDateTime.Year, newStartDateTime.Month, DateTime.DaysInMonth(newStartDateTime.Year, newStartDateTime.Month), 23, 59, 59);
            }

            invoiceTerm.AutoGenerateInvoiceCollections();
            return invoiceTerm;
        }

        public static InvoiceTerm LastInvoiceTerm(bool includeCancelled = false)
        {
            InvoiceTerm lastInvoiceTerm = null;
            TTObjectContext context = new TTObjectContext(true);

            List<Guid> states = new List<Guid>();
            states.Add(InvoiceTerm.States.Open);
            states.Add(InvoiceTerm.States.Closed);
            states.Add(InvoiceTerm.States.Locked);

            if (includeCancelled == true)
                states.Add(InvoiceTerm.States.Cancelled);

            IList<InvoiceTerm> invoiceTermList = InvoiceTerm.GetAllTerms(context, states.ToArray());

            if (invoiceTermList != null && invoiceTermList.Count > 0)
                lastInvoiceTerm = invoiceTermList[0];

            return lastInvoiceTerm;
        }

        public void Open()
        {
            if (CurrentStateDefID != InvoiceTerm.States.Open)
            {
                OpenAutoGeneratedInvoiceCollections();
                CurrentStateDefID = InvoiceTerm.States.Open;
            }
        }

        public void Close()
        {
            if (CurrentStateDefID != InvoiceTerm.States.Closed)
            {
                if (InvoiceCollections.Where(x => x.IsAutoGenerated == false && (x.CurrentStateDefID == InvoiceCollection.States.Open || x.CurrentStateDefID == InvoiceCollection.States.Locked)).Count() > 0)
                    throw new TTException("Dönem içerisinde Açık veya Kilitli durumda icmal olduğu için kapatılamaz. Önce icmalleri kapatınız.");

                // Dönem kapanırken icmaller de kapansın istenirse üstteki exception kapatılıp, aşağıdaki blok açılmalı
                //foreach (InvoiceCollection ic in InvoiceCollections.Where(x => x.IsAutoGenerated == false && (x.CurrentStateDefID == InvoiceCollection.States.Open || x.CurrentStateDefID == InvoiceCollection.States.Locked)))
                //    ic.CurrentStateDefID = InvoiceCollection.States.Closed;

                CloseAutoGeneratedInvoiceCollections();
                ObjectContext.Update();
                CurrentStateDefID = InvoiceTerm.States.Closed;
            }
        }

        public void Lock()
        {
            if (CurrentStateDefID != InvoiceTerm.States.Locked)
                CurrentStateDefID = InvoiceTerm.States.Locked;
        }

        public void Cancel()
        {
            if (CurrentStateDefID != InvoiceTerm.States.Cancelled)
            {
                // Sadece son dönem iptal edilebilsin kontrolü, ara dönem iptal edilemeyecek
                InvoiceTerm lastInvoiceTerm = InvoiceTerm.LastInvoiceTerm();
                if (ObjectID != lastInvoiceTerm.ObjectID)
                    throw new TTException(TTUtils.CultureService.GetText("M25542", "Dönem iptalleri sondan başa doğru yapılabilir."));

                if (InvoiceCollections.Where(x => x.IsAutoGenerated == false && x.CurrentStateDefID != InvoiceCollection.States.Cancelled).Count() > 0)
                    throw new TTException("Dönem içerisinde İptal durumdan farklı icmal olduğu için kapatılamaz. Önce icmalleri iptal ediniz.");

                CancelAutoGeneratedInvoiceCollections();
                ObjectContext.Update();
                CurrentStateDefID = InvoiceTerm.States.Cancelled;
            }
        }

        public void OpenAutoGeneratedInvoiceCollections()
        {
            foreach (InvoiceCollection ic in InvoiceCollections.Where(x => x.IsAutoGenerated == true))
            {
                ic.CurrentStateDefID = InvoiceCollection.States.Open;
            }
        }

        public void CloseAutoGeneratedInvoiceCollections()
        {
            var totals = SubEpisodeProtocol.GetInvoiceTotalPriceByTerm(ObjectID);
            foreach (InvoiceCollection ic in InvoiceCollections.Where(x => x.IsAutoGenerated == true))
            {
                ic.CurrentStateDefID = InvoiceCollection.States.Closed;
                foreach (var item in totals)
                {
                    if (item.ObjectID == ic.ObjectID)
                    {
                        ic.TotalPrice = Convert.ToDecimal(item.Invoiceprice);
                    }
                }
            }
        }

        public void CancelAutoGeneratedInvoiceCollections()
        {
            foreach (InvoiceCollection ic in InvoiceCollections.Where(x => x.IsAutoGenerated == true))
            {
                if (ic.InvoiceCollectionDetails.Where(x => x.CurrentStateDefID != InvoiceCollectionDetail.States.Cancelled).Count() > 0)
                    throw new TTException("Dönem içerisindeki otomatik açılan icmaller içerisinde fatura olduğu için kapatılamaz. Önce faturaları iptal ediniz.");

                ic.CurrentStateDefID = InvoiceCollection.States.Cancelled;
            }
        }

        public void AutoGenerateInvoiceCollections()
        {
            IList MITypeList = MedulaInvoiceTypeDefinition.GetMedulaInvoiceTypes(ObjectContext, "");
            foreach (MedulaInvoiceTypeDefinition MIType in MITypeList)
            {
                InvoiceCollection invoiceCollection = new InvoiceCollection(ObjectContext);
                invoiceCollection.InvoiceTerm = this;
                invoiceCollection.Name = Name + "-" + MIType.Name;
                invoiceCollection.Date = StartDate;
                invoiceCollection.CurrentStateDefID = InvoiceCollection.States.Open;
                invoiceCollection.IsAutoGenerated = true;
                invoiceCollection.Type = InvoiceCollectionTypeEnum.SeperateInvoice;
                invoiceCollection.IsGeneral = true;
                invoiceCollection.Payer = MIType.Payer;
                invoiceCollection.TedaviTuru = MIType.TedaviTuru;
            }
        }

        #region Saymanlık Medula Tutar Onaylama

        public class SEPInformationModel
        {
            public Guid? MedulaTakipBilgisiObjectId
            {
                get;
                set;
            }

            public Guid? SEPObjectId
            {
                get;
                set;
            }
            public string Durum
            {
                get;
                set;
            }
            public string KabulNo
            {
                get;
                set;
            }
            public string BasvuruNo
            {
                get;
                set;
            }
            public string TakipNo
            {
                get;
                set;
            }
            public string GrupTuru
            {
                get;
                set;
            }
            public string GrupAdi
            {
                get;
                set;
            }

            public decimal MedulaTutar
            {
                get;
                set;
            }

            public decimal HBYSSEPTutar
            {
                get;
                set;
            }

            public decimal HBYSAccTrxTutar
            {
                get;
                set;
            }

            public TakipUyumsuzlukTipi UyumsuzlukTipi
            {
                get;
                set;
            }
        }

        // Dönemin mevcut MedulaTakipBilgisi kayıtları silinir
        public void DeleteMedulaTakipBilgileri()
        {
            BindingList<MedulaTakipBilgisi> medulaTakipleri = MedulaTakipBilgileri.Select("");
            foreach (MedulaTakipBilgisi takip in medulaTakipleri)
                ((ITTObject)takip).Delete();
        }

        public MedulaTakipBilgisi CreateMedulaTakipBilgisi(string takipNo, string grupTuru, string grupAdi, double toplamTutar, MedulaTakipBilgisiTypeEnum type)
        {
            MedulaTakipBilgisi medulaTakipBilgisi = new MedulaTakipBilgisi(ObjectContext)
            {
                TakipNo = takipNo,
                GrupTuru = grupTuru,
                GrupAdi = grupAdi,
                ToplamTutar = toplamTutar,
                Type = type,
                InvoiceTerm = this
            };
            return medulaTakipBilgisi;
        }

        public MedulaYardimciIslemler.takipBilgisiGirisDVO GetTakipBilgisiGirisDVO(int evrakRefNo, string grupTuru, int grupKodu)
        {
            MedulaYardimciIslemler.takipBilgisiGirisDVO takipBilgisiGirisDVO = new MedulaYardimciIslemler.takipBilgisiGirisDVO();
            takipBilgisiGirisDVO.evrakRefNo = evrakRefNo;
            takipBilgisiGirisDVO.saglikTesisKodu = SystemParameter.GetSaglikTesisKodu();
            takipBilgisiGirisDVO.grupTuru = grupTuru;
            takipBilgisiGirisDVO.grupKodu = grupKodu;
            takipBilgisiGirisDVO.ktsHbysKodu = SystemParameter.GetKtsHbysKodu();
            return takipBilgisiGirisDVO;
        }

        // Herbir Grup kodu ve Grup Türüne göre tek tek okuyan metod
        /*
        public List<SubEpisodeProtocol.MedulaResult> ReadSEPInfoFromMedulaByGroupCodeAndType(int? gssDocumentNo)
        {
            List<SubEpisodeProtocol.MedulaResult> medulaResultList = new List<SubEpisodeProtocol.MedulaResult>();

            if (gssDocumentNo.HasValue)
            {
                List<string> grupTuruList = new List<string>() { "A", "Y", "G", "D" };
                int saglikTesisKodu = SystemParameter.GetSaglikTesisKodu(); // 11069941
                string ktsHbysKodu = SystemParameter.GetKtsHbysKodu();
                bool takipBilgisiCevapBasarili = false;

                MedulaYardimciIslemler.evrakTakipGrupKoduSorguGirisDVO evrakTakipGrupKoduSorguGiris = new MedulaYardimciIslemler.evrakTakipGrupKoduSorguGirisDVO();
                evrakTakipGrupKoduSorguGiris.saglikTesisKodu = saglikTesisKodu;

                MedulaYardimciIslemler.evrakTakipGrupKoduSorguCevapDVO evrakTakipGrupKoduSorguCevap = MedulaYardimciIslemler.WebMethods.evrakTakipGrupKodlariSorguSync(Sites.SiteLocalHost, evrakTakipGrupKoduSorguGiris);

                if (!evrakTakipGrupKoduSorguCevap.sonucKodu.Equals("0000"))
                    throw new TTException("Evrak takip grup kodları Medula'dan sorgulanırken hata alındı. " + evrakTakipGrupKoduSorguCevap.sonucKodu + " " + evrakTakipGrupKoduSorguCevap.sonucMesaji);

                // Evrak No kontrolü için bir çağrı yapılır, Evrak No hatalı ise mevcut MedulaTakipBilgileri altta silinmesin
                if (evrakTakipGrupKoduSorguCevap.grupKodlari.Count() > 0)
                {
                    MedulaYardimciIslemler.takipBilgisiGirisDVO takipBilgisiGirisDVO = GetTakipBilgisiGirisDVO(gssDocumentNo.Value, "A", evrakTakipGrupKoduSorguCevap.grupKodlari[0].kodu);
                    MedulaYardimciIslemler.takipBilgisiCevapDVO takipBilgisiCevap = MedulaYardimciIslemler.WebMethods.takipBilgileriListesiSync(Sites.SiteLocalHost, takipBilgisiGirisDVO);

                    if (takipBilgisiCevap.sonucKodu.Equals("0853") || takipBilgisiCevap.sonucKodu.Equals("0854")) // Evrak No bulunamadı hata kodu
                    {
                        medulaResultList.Add(new SubEpisodeProtocol.MedulaResult(takipBilgisiCevap.sonucKodu, takipBilgisiCevap.sonucMesaji));
                        return medulaResultList;
                    }
                }

                // Mevcut MedulaTakipBilgisi kayıtları silinir
                DeleteMedulaTakipBilgileri();

                foreach (MedulaYardimciIslemler.evrakTakipGrupKoduDVO grupKodu in evrakTakipGrupKoduSorguCevap.grupKodlari)
                {
                    foreach (string grupTuru in grupTuruList)
                    {
                        MedulaYardimciIslemler.takipBilgisiGirisDVO takipBilgisiGirisDVO = GetTakipBilgisiGirisDVO(gssDocumentNo.Value, grupTuru, grupKodu.kodu);
                        MedulaYardimciIslemler.takipBilgisiCevapDVO takipBilgisiCevap = MedulaYardimciIslemler.WebMethods.takipBilgileriListesiSync(Sites.SiteLocalHost, takipBilgisiGirisDVO);

                        if (takipBilgisiCevap.sonucKodu.Equals("0000"))
                        {
                            foreach (MedulaYardimciIslemler.takipBilgisiListDVO takipBilgisi in takipBilgisiCevap.takipBilgisiListDVO)
                            {
                                CreateMedulaTakipBilgisi(takipBilgisi.takipNo, takipBilgisi.grupTuru, takipBilgisi.grupAdi, takipBilgisi.toplamTutar);
                                takipBilgisiCevapBasarili = true;
                            }
                        }
                        else if (!takipBilgisiCevap.sonucKodu.Equals("1462")) // 1462 : Aradığınız evrak için kayıt bulunamamıştır.
                            medulaResultList.Add(new SubEpisodeProtocol.MedulaResult(takipBilgisiCevap.sonucKodu, takipBilgisiCevap.sonucMesaji));
                    }
                }

                // Dönemin bilgileri güncellenir
                if (takipBilgisiCevapBasarili)
                {
                    GSSDocumentNo = gssDocumentNo;
                    Approved = null;
                    ApproveUser = null;
                    ApproveDate = null;
                }
            }

            return medulaResultList;
        }
        */

        // Tek seferde okuyan metod
        public List<SubEpisodeProtocol.MedulaResult> ReadSEPInfoFromMedula(int? gssDocumentNo, int? tempProtDocumentNo)
        {
            List<SubEpisodeProtocol.MedulaResult> medulaResultList = new List<SubEpisodeProtocol.MedulaResult>();
            MedulaYardimciIslemler.takipBilgisiGirisDVO takipBilgisiGirisDVO;
            MedulaYardimciIslemler.takipBilgisiCevapDVO gssTakipBilgisiCevap = new MedulaYardimciIslemler.takipBilgisiCevapDVO();
            MedulaYardimciIslemler.takipBilgisiCevapDVO tempProtTakipBilgisiCevap = new MedulaYardimciIslemler.takipBilgisiCevapDVO();

            if (gssDocumentNo.HasValue)
            {
                takipBilgisiGirisDVO = GetTakipBilgisiGirisDVO(gssDocumentNo.Value, string.Empty, 0);
                gssTakipBilgisiCevap = MedulaYardimciIslemler.WebMethods.takipBilgileriListesiSync(Sites.SiteLocalHost, takipBilgisiGirisDVO);
            }

            if (tempProtDocumentNo.HasValue)
            {
                takipBilgisiGirisDVO = GetTakipBilgisiGirisDVO(tempProtDocumentNo.Value, string.Empty, 0);
                tempProtTakipBilgisiCevap = MedulaYardimciIslemler.WebMethods.takipBilgileriListesiSync(Sites.SiteLocalHost, takipBilgisiGirisDVO);
            }

            // Mevcut MedulaTakipBilgisi kayıtları silinir
            if (gssTakipBilgisiCevap.sonucKodu == "0000" || tempProtTakipBilgisiCevap.sonucKodu == "0000")
            {
                DeleteMedulaTakipBilgileri();
                GSSDocumentNo = null;
                TempProtDocumentNo = null;
                Approved = null;
                ApproveUser = null;
                ApproveDate = null;
            }

            // GSS Evrak No için MedulaTakipBilgisi kayıtları oluşturulur
            if (gssDocumentNo.HasValue)
            {
                if (gssTakipBilgisiCevap.sonucKodu == "0000")
                {
                    if (gssTakipBilgisiCevap.takipBilgisiListDVO != null)
                        foreach (MedulaYardimciIslemler.takipBilgisiListDVO takipBilgisi in gssTakipBilgisiCevap.takipBilgisiListDVO)
                            CreateMedulaTakipBilgisi(takipBilgisi.takipNo, takipBilgisi.grupTuru, takipBilgisi.grupAdi, takipBilgisi.toplamTutar, MedulaTakipBilgisiTypeEnum.GSS);

                    GSSDocumentNo = gssDocumentNo; // GSSDocumentNo set edilir
                }
                else
                    medulaResultList.Add(new SubEpisodeProtocol.MedulaResult(gssTakipBilgisiCevap.sonucKodu, gssTakipBilgisiCevap.sonucMesaji));
            }

            // Geçici Koruma Evrak No için MedulaTakipBilgisi kayıtları oluşturulur
            if (tempProtDocumentNo.HasValue)
            {
                if (tempProtTakipBilgisiCevap.sonucKodu == "0000")
                {
                    if (tempProtTakipBilgisiCevap.takipBilgisiListDVO != null)
                        foreach (MedulaYardimciIslemler.takipBilgisiListDVO takipBilgisi in tempProtTakipBilgisiCevap.takipBilgisiListDVO)
                            this.CreateMedulaTakipBilgisi(takipBilgisi.takipNo, takipBilgisi.grupTuru, takipBilgisi.grupAdi, takipBilgisi.toplamTutar, MedulaTakipBilgisiTypeEnum.GeciciKoruma);

                    TempProtDocumentNo = tempProtDocumentNo; // TempProtDocumentNo set edilir
                }
                else
                    medulaResultList.Add(new SubEpisodeProtocol.MedulaResult(tempProtTakipBilgisiCevap.sonucKodu, tempProtTakipBilgisiCevap.sonucMesaji));
            }

            return medulaResultList;
        }

        public decimal GetTotalMedulaPriceBySEP()
        {
            BindingList<SubEpisodeProtocol.GetTotalMedulaPriceByTerm_Class> totalPrice = SubEpisodeProtocol.GetTotalMedulaPriceByTerm(ObjectContext, ObjectID);
            if (totalPrice != null && totalPrice.Count > 0)
                return Convert.ToDecimal(totalPrice[0].Medulainvoiceprice);

            return 0;
        }

        public decimal GetTotalMedulaPriceByAccTrx()
        {
            BindingList<AccountTransaction.GetTotalMedulaPriceByTerm_Class> totalPrice = AccountTransaction.GetTotalMedulaPriceByTerm(ObjectContext, ObjectID);
            if (totalPrice != null && totalPrice.Count > 0)
                return Convert.ToDecimal(totalPrice[0].Medulainvoiceprice);

            return 0;
        }

        public decimal GetTotalPriceOfMedulaTakipBilgileri()
        {
            BindingList<MedulaTakipBilgisi.GetTotalPriceByTerm_Class> totalPrice = MedulaTakipBilgisi.GetTotalPriceByTerm(ObjectContext, ObjectID);
            if (totalPrice != null && totalPrice.Count > 0)
                return Convert.ToDecimal(totalPrice[0].Totalprice);

            return 0;
        }

        // Takibin Medula ile Atlas arasındaki uyumsuzluk tipi
        public enum TakipUyumsuzlukTipi : int
        {
            Faturalama = 0,
            BKKPrimBorclu = 1,
            GeciciKoruma = 2
        }

        public List<SEPInformationModel> GetIncompatibleSEPs()
        {
            // Medula Takip Bilgisi
            List<MedulaTakipBilgisi> medulaTakipBilgisiList = MedulaTakipBilgileri.Select("").ToList();

            if (medulaTakipBilgisiList.Count == 0)
                throw new TTException("Meduladan okunmuş takip bilgisi bulunamadı. Önce 'Meduladan Takipleri Getir' butonu ile takipleri okuyunuz.");

            List<string> medulaTakipNoList = medulaTakipBilgisiList.Select(x => x.TakipNo).ToList();

            // Dönem SEP Listesi
            List<SubEpisodeProtocol.GetMedulaSEPsByTerm_Class> atlasSEPList = SubEpisodeProtocol.GetMedulaSEPsByTerm(ObjectContext, ObjectID).ToList();
            if (atlasSEPList.Count == 0)
                throw new TTException("Sistemde bu döneme ait takip bulunamadı. Kontrol ediniz.");

            List<string> atlasTakipNoList = atlasSEPList.Select(x => x.MedulaTakipNo).ToList();

            // Dönem SEP bazında AccTrx.MedulaPrice toplamı listesi
            List<AccountTransaction.GetSEPTotalMedulaPriceByTerm_Class> atlasSEPListFromAccTrx = AccountTransaction.GetSEPTotalMedulaPriceByTerm(ObjectContext, ObjectID).ToList();

            List<SEPInformationModel> incompatibleSEPList = new List<SEPInformationModel>();

            #region Medula'da faturalanmış durumda, ATLAS'ta faturalanmış durumda değil
            List<string> meduladaVarAtlastaYok = medulaTakipNoList.Except(atlasTakipNoList).ToList();
            foreach (string takipNo in meduladaVarAtlastaYok)
            {
                MedulaTakipBilgisi medulaTakipBilgisi = medulaTakipBilgisiList.First(x => x.TakipNo == takipNo);
                SubEpisodeProtocol sep = ObjectContext.QueryObjects<SubEpisodeProtocol>(" MEDULATAKIPNO = '" + takipNo + "'").FirstOrDefault();

                SEPInformationModel sepInfo = new SEPInformationModel();
                sepInfo.UyumsuzlukTipi = TakipUyumsuzlukTipi.Faturalama;
                sepInfo.MedulaTakipBilgisiObjectId = medulaTakipBilgisi.ObjectID;
                sepInfo.TakipNo = takipNo;
                sepInfo.GrupTuru = medulaTakipBilgisi.GrupTuru;
                sepInfo.GrupAdi = medulaTakipBilgisi.GrupAdi;
                sepInfo.MedulaTutar = Convert.ToDecimal(medulaTakipBilgisi.ToplamTutar);

                if (sep != null)
                {
                    sepInfo.SEPObjectId = sep.ObjectID;
                    sepInfo.KabulNo = sep.SubEpisode.ProtocolNo;
                    sepInfo.BasvuruNo = sep.MedulaBasvuruNo;
                    sepInfo.HBYSSEPTutar = sep.MedulaFaturaTutari.HasValue ? sep.MedulaFaturaTutari.Value : (Currency)0;

                    List<AccountTransaction> SEPAccTrxList = sep.AccountTransactions.Select("CURRENTSTATEDEFID = '" + AccountTransaction.States.MedulaEntrySuccessful + "' AND MEDULAPRICE IS NOT NULL").ToList();
                    sepInfo.HBYSAccTrxTutar = SEPAccTrxList.Select(x => (decimal)x.MedulaPrice.Value).Sum();

                    if (sep.CurrentStateDefID == SubEpisodeProtocol.States.Cancelled)
                        sepInfo.Durum = "Medula'da Faturalanmış, ATLAS'ta İptal durumunda";
                    else if (sep.InvoiceStatus != MedulaSubEpisodeStatusEnum.Invoiced && sep.InvoiceStatus != MedulaSubEpisodeStatusEnum.InvoiceInconsistent)
                        sepInfo.Durum = "Medula'da Faturalanmış, ATLAS'ta Faturalanmamış";
                    else if (sep.InvoiceCollectionDetail == null)
                        sepInfo.Durum = "Medula'da Faturalanmış, ATLAS'ta İcmal Detayı Yok";
                    else if (sep.InvoiceCollectionDetail.InvoiceCollection.IsAutoGenerated != true)
                        sepInfo.Durum = "Medula'da Faturalanmış, ATLAS'ta İcmali Hatalı";
                    else if (sep.InvoiceCollectionDetail.InvoiceCollection.InvoiceTerm != null)
                        sepInfo.Durum = "Medula'da Faturalanmış, ATLAS'ta Dönemi Hatalı";
                    else
                        sepInfo.Durum = "Medula'da Faturalanmış, ATLAS'ta Faturalanmamış";
                }
                else
                {
                    sepInfo.SEPObjectId = null;
                    sepInfo.Durum = "Takip No Atlas'ta yok";
                    sepInfo.HBYSSEPTutar = 0;
                    sepInfo.HBYSAccTrxTutar = 0;
                }

                incompatibleSEPList.Add(sepInfo);
            }
            #endregion

            #region ATLAS'ta faturalanmış durumda, Medula'da faturalanmış durumda değil
            List<string> atlastaVarMeduladaYok = atlasTakipNoList.Except(medulaTakipNoList).ToList();
            foreach (string takipNo in atlastaVarMeduladaYok)
            {
                SubEpisodeProtocol.GetMedulaSEPsByTerm_Class atlasSEP = atlasSEPList.FirstOrDefault(x => x.MedulaTakipNo == takipNo);
                AccountTransaction.GetSEPTotalMedulaPriceByTerm_Class atlasSEPFromAccTrx = atlasSEPListFromAccTrx.FirstOrDefault(x => x.MedulaTakipNo == takipNo);

                SEPInformationModel sepInfo = new SEPInformationModel();
                sepInfo.UyumsuzlukTipi = TakipUyumsuzlukTipi.Faturalama;
                sepInfo.MedulaTakipBilgisiObjectId = null;
                sepInfo.Durum = "ATLAS'ta Faturalanmış, Medula'da Faturalanmamış";
                sepInfo.TakipNo = takipNo;
                sepInfo.GrupTuru = null;
                sepInfo.GrupAdi = null;
                sepInfo.MedulaTutar = 0;

                if (atlasSEP != null)
                {
                    sepInfo.SEPObjectId = atlasSEP.ObjectID;
                    sepInfo.KabulNo = atlasSEP.ProtocolNo;
                    sepInfo.BasvuruNo = atlasSEP.MedulaBasvuruNo;
                    sepInfo.HBYSSEPTutar = Convert.ToDecimal(atlasSEP.Medulaprice);
                }

                if (atlasSEPFromAccTrx != null)
                    sepInfo.HBYSAccTrxTutar = Convert.ToDecimal(atlasSEPFromAccTrx.Medulaprice);

                incompatibleSEPList.Add(sepInfo);
            }
            #endregion

            #region Fiyat farkı olanlar
            var priceDiffQuery = from medula in medulaTakipBilgisiList
                                 join sep in atlasSEPList on medula.TakipNo equals sep.MedulaTakipNo
                                 join act in atlasSEPListFromAccTrx on medula.TakipNo equals act.MedulaTakipNo into joinedT
                                 from act in joinedT.DefaultIfEmpty() // left join
                                 where Convert.ToDecimal(medula.ToplamTutar) != Convert.ToDecimal(sep.Medulaprice) ||
                                       Convert.ToDecimal(medula.ToplamTutar) != Convert.ToDecimal(act != null ? act.Medulaprice : 0)
                                 select new
                                 {
                                     medulaTakipBilgisiObjectID = medula.ObjectID,
                                     takipNo = medula.TakipNo,
                                     grupTuru = medula.GrupTuru,
                                     grupAdi = medula.GrupAdi,
                                     medulaTutar = Convert.ToDecimal(medula.ToplamTutar),
                                     sepObjectID = sep.ObjectID,
                                     kabulNo = sep.ProtocolNo,
                                     basvuruNo = sep.MedulaBasvuruNo,
                                     hbysSEPTutar = Convert.ToDecimal(sep.Medulaprice),
                                     hbysAccTrxTutar = Convert.ToDecimal(act != null ? act.Medulaprice : 0)
                                 };

            foreach (var item in priceDiffQuery)
            {
                if (incompatibleSEPList.Any(x => x.TakipNo.Equals(item.takipNo)) == false) // Listede varsa tekrar eklenmesin
                {
                    SEPInformationModel sepInfo = new SEPInformationModel();
                    sepInfo.UyumsuzlukTipi = TakipUyumsuzlukTipi.Faturalama;
                    sepInfo.MedulaTakipBilgisiObjectId = item.medulaTakipBilgisiObjectID;
                    sepInfo.Durum = "Faturalanmış Tutar Uyumsuz";
                    sepInfo.KabulNo = item.kabulNo;
                    sepInfo.BasvuruNo = item.basvuruNo;
                    sepInfo.TakipNo = item.takipNo;
                    sepInfo.GrupTuru = item.grupTuru;
                    sepInfo.GrupAdi = item.grupAdi;
                    sepInfo.MedulaTutar = item.medulaTutar;
                    sepInfo.SEPObjectId = item.sepObjectID;
                    sepInfo.HBYSSEPTutar = item.hbysSEPTutar;
                    sepInfo.HBYSAccTrxTutar = item.hbysAccTrxTutar;
                    incompatibleSEPList.Add(sepInfo);
                }
            }
            #endregion

            #region BKK Prim Borçlu
            // BKK Prim Borçlu Medula Takip Bilgisi
            List<MedulaTakipBilgisi> medulaBKKPrimBorcluTakipBilgisiList = medulaTakipBilgisiList.Where(x => x.Type == MedulaTakipBilgisiTypeEnum.GSS && x.GrupAdi == "BKK'na göre borçlular").ToList();
            List<string> medulaBKKPrimBorcluTakipNoList = medulaBKKPrimBorcluTakipBilgisiList.Select(x => x.TakipNo).ToList();

            // BKK Prim Borçlu SEP Listesi
            List<SubEpisodeProtocol.GetMedulaSEPsByTerm_Class> atlasBKKPrimBorcluSEPList = atlasSEPList.Where(x => x.MIFType != MIFTypeEnum.Suriyeli && x.Istisnaihalkodu == "9").ToList();
            List<string> atlasBKKPrimBorcluTakipNoList = atlasBKKPrimBorcluSEPList.Select(x => x.MedulaTakipNo).ToList();

            // Medula'da BKK Prim Borçlu olup ATLAS'ta BKK Prim Borçlu olmayanlar
            List<string> meduladaBKKPrimBorcluAtlastaDegil = medulaBKKPrimBorcluTakipNoList.Except(atlasBKKPrimBorcluTakipNoList).ToList();
            foreach (string takipNo in meduladaBKKPrimBorcluAtlastaDegil)
            {
                MedulaTakipBilgisi medulaTakipBilgisi = medulaTakipBilgisiList.FirstOrDefault(x => x.TakipNo == takipNo);
                SubEpisodeProtocol.GetMedulaSEPsByTerm_Class atlasSEP = atlasSEPList.FirstOrDefault(x => x.MedulaTakipNo == takipNo);
                AccountTransaction.GetSEPTotalMedulaPriceByTerm_Class atlasSEPFromAccTrx = atlasSEPListFromAccTrx.FirstOrDefault(x => x.MedulaTakipNo == takipNo);

                AddItemToIncompatibleSEPList(ref incompatibleSEPList, TakipUyumsuzlukTipi.BKKPrimBorclu, takipNo, "Medula'da BKK Prim Borçlu ATLAS'ta değil.", medulaTakipBilgisi, atlasSEP, atlasSEPFromAccTrx);
            }

            // ATLAS'ta BKK Prim Borçlu olup Medula'da BKK Prim Borçlu olmayanlar
            List<string> atlastaBKKPrimBorcluMeduladaDegil = atlasBKKPrimBorcluTakipNoList.Except(medulaBKKPrimBorcluTakipNoList).ToList();
            foreach (string takipNo in atlastaBKKPrimBorcluMeduladaDegil)
            {
                MedulaTakipBilgisi medulaTakipBilgisi = medulaTakipBilgisiList.FirstOrDefault(x => x.TakipNo == takipNo);
                SubEpisodeProtocol.GetMedulaSEPsByTerm_Class atlasSEP = atlasSEPList.FirstOrDefault(x => x.MedulaTakipNo == takipNo);
                AccountTransaction.GetSEPTotalMedulaPriceByTerm_Class atlasSEPFromAccTrx = atlasSEPListFromAccTrx.FirstOrDefault(x => x.MedulaTakipNo == takipNo);

                AddItemToIncompatibleSEPList(ref incompatibleSEPList, TakipUyumsuzlukTipi.BKKPrimBorclu, takipNo, "ATLAS'ta BKK Prim Borçlu Medula'da değil.", medulaTakipBilgisi, atlasSEP, atlasSEPFromAccTrx);
            }
            #endregion

            #region Geçici Koruma
            // Geçici Koruma Medula Takip Bilgisi
            List<MedulaTakipBilgisi> medulaGeciciKorumaTakipBilgisiList = medulaTakipBilgisiList.Where(x => x.Type == MedulaTakipBilgisiTypeEnum.GeciciKoruma).ToList();
            List<string> medulaGeciciKorumaTakipNoList = medulaGeciciKorumaTakipBilgisiList.Select(x => x.TakipNo).ToList();

            // Geçici Koruma SEP Listesi 
            // Provizyon Tipi Trafik Kazası(T) ise kurumu Geçici Koruma da olsa Medula'da GSS Evrak No altında göründüğü için burada da trafik kazası hariçler çekilir.
            // Yoksa "ATLAS'ta Geçici Koruma Medula'da değil." olarak uyumsuz takipler listesine geliyor ve Uyumsuz Takipleri Düzenleme ile de düzenlenemeyip kalıyor.
            List<SubEpisodeProtocol.GetMedulaSEPsByTerm_Class> atlasGeciciKorumaSEPList = atlasSEPList.Where(x => x.MIFType == MIFTypeEnum.Suriyeli && x.provizyonTipiKodu != "T").ToList();
            List<string> atlasGeciciKorumaTakipNoList = atlasGeciciKorumaSEPList.Select(x => x.MedulaTakipNo).ToList();

            // Medula'da Geçici Koruma olup ATLAS'ta Geçici Koruma olmayanlar
            List<string> meduladaGeciciKorumaAtlastaDegil = medulaGeciciKorumaTakipNoList.Except(atlasGeciciKorumaTakipNoList).ToList();
            foreach (string takipNo in meduladaGeciciKorumaAtlastaDegil)
            {
                MedulaTakipBilgisi medulaTakipBilgisi = medulaTakipBilgisiList.FirstOrDefault(x => x.TakipNo == takipNo);
                SubEpisodeProtocol.GetMedulaSEPsByTerm_Class atlasSEP = atlasSEPList.FirstOrDefault(x => x.MedulaTakipNo == takipNo);
                AccountTransaction.GetSEPTotalMedulaPriceByTerm_Class atlasSEPFromAccTrx = atlasSEPListFromAccTrx.FirstOrDefault(x => x.MedulaTakipNo == takipNo);

                AddItemToIncompatibleSEPList(ref incompatibleSEPList, TakipUyumsuzlukTipi.GeciciKoruma, takipNo, "Medula'da Geçici Koruma ATLAS'ta değil.", medulaTakipBilgisi, atlasSEP, atlasSEPFromAccTrx);
            }

            // ATLAS'ta Geçici Koruma olup Medula'da Geçici Koruma olmayanlar
            List<string> atlastaGeciciKorumaMeduladaDegil = atlasGeciciKorumaTakipNoList.Except(medulaGeciciKorumaTakipNoList).ToList();
            foreach (string takipNo in atlastaGeciciKorumaMeduladaDegil)
            {
                MedulaTakipBilgisi medulaTakipBilgisi = medulaTakipBilgisiList.FirstOrDefault(x => x.TakipNo == takipNo);
                SubEpisodeProtocol.GetMedulaSEPsByTerm_Class atlasSEP = atlasSEPList.FirstOrDefault(x => x.MedulaTakipNo == takipNo);
                AccountTransaction.GetSEPTotalMedulaPriceByTerm_Class atlasSEPFromAccTrx = atlasSEPListFromAccTrx.FirstOrDefault(x => x.MedulaTakipNo == takipNo);

                AddItemToIncompatibleSEPList(ref incompatibleSEPList, TakipUyumsuzlukTipi.GeciciKoruma, takipNo, "ATLAS'ta Geçici Koruma Medula'da değil.", medulaTakipBilgisi, atlasSEP, atlasSEPFromAccTrx);
            }

            #endregion

            return incompatibleSEPList.OrderBy(x => x.UyumsuzlukTipi).ThenBy(x => x.BasvuruNo).ToList();
        }

        private void AddItemToIncompatibleSEPList(ref List<SEPInformationModel> incompatibleSEPList,
                                                  TakipUyumsuzlukTipi uyumsuzlukTipi,
                                                  string takipNo,
                                                  string durum,
                                                  MedulaTakipBilgisi medulaTakipBilgisi,
                                                  SubEpisodeProtocol.GetMedulaSEPsByTerm_Class atlasSEP,
                                                  AccountTransaction.GetSEPTotalMedulaPriceByTerm_Class atlasSEPFromAccTrx)
        {
            if (incompatibleSEPList != null)
            {
                SEPInformationModel sepInfo = new SEPInformationModel();
                sepInfo.UyumsuzlukTipi = uyumsuzlukTipi;
                sepInfo.TakipNo = takipNo;
                sepInfo.Durum = durum;

                if (medulaTakipBilgisi != null)
                {
                    sepInfo.MedulaTakipBilgisiObjectId = medulaTakipBilgisi.ObjectID;
                    sepInfo.GrupTuru = medulaTakipBilgisi.GrupTuru;
                    sepInfo.GrupAdi = medulaTakipBilgisi.GrupAdi;
                    sepInfo.MedulaTutar = Convert.ToDecimal(medulaTakipBilgisi.ToplamTutar);
                }

                if (atlasSEP != null)
                {
                    sepInfo.SEPObjectId = atlasSEP.ObjectID;
                    sepInfo.KabulNo = atlasSEP.ProtocolNo;
                    sepInfo.BasvuruNo = atlasSEP.MedulaBasvuruNo;
                    sepInfo.HBYSSEPTutar = Convert.ToDecimal(atlasSEP.Medulaprice);
                }

                if (atlasSEPFromAccTrx != null)
                    sepInfo.HBYSAccTrxTutar = Convert.ToDecimal(atlasSEPFromAccTrx.Medulaprice);

                incompatibleSEPList.Add(sepInfo);
            }
        }

        #endregion Saymanlık Medula Tutar Onaylama

        #region Muhasebe İşlem Fişi

        public class MIFPayer
        {
            public Guid Payer
            {
                get;
                set;
            }
            public string Code
            {
                get;
                set;
            }
            public string Name
            {
                get;
                set;
            }

            public List<MIFPayerDetail> Details;

            public MIFPayer()
            {
                Details = new List<MIFPayerDetail>();
            }

            public MIFPayerDetail AddDetail(string accountCode, string accountName, decimal? debt, decimal? credit)
            {
                MIFPayerDetail detail = new MIFPayerDetail()
                {
                    AccountCode = accountCode,
                    AccountName = accountName,
                    Debt = debt,
                    Credit = credit
                };

                Details.Add(detail);
                return detail;
            }
        }

        public class MIFPayerDetail
        {
            public string AccountCode
            {
                get;
                set;
            }
            public string AccountName
            {
                get;
                set;
            }
            public decimal? Debt
            {
                get;
                set;
            }
            public decimal? Credit
            {
                get;
                set;
            }
        }

        public class MIFHelper
        {
            public List<RevenueSubAccountCodeDefinition> accountDefList;
            public List<string> provizyonTipiList;
            public List<string> tedaviTipiList;
            public List<string> istisnaiHalList;
            public List<string> devredilenKurumList;

            public string SGKAyaktanHesapKodu;
            public string SGKYatanHesapKodu;
            public string SGKTrafikKazasiHesapKodu;

            public string BKKPrimBorcHesapKodu;
            public string BKKPrimAlacakHesapKodu;

            public string IlacHesapKodu;
            public string MalzemeHesapKodu;

            public MIFHelper(TTObjectContext context)
            {
                // Muhasebe Hesap kodları listesi
                accountDefList = context.QueryObjects<RevenueSubAccountCodeDefinition>().ToList();

                //  600 lü hesapların Diğer (04) e girecek koşulları için listeler.
                //V: Adli Vaka , T: Trafik kazası , I: İş kazası , M: Meslek hastalığı
                provizyonTipiList = new List<string>() { "V", "T", "I", "M" };

                // 4: "Kemik iliği" , 5: "Kök hücre nakli" , 6: "Ekstrakorporeal fotoferez tedavisi" , 7: "Hiperbarik oksijen tedavisi"
                // 9: "Ağız Protez tedavisi" , 11: " Tüp Bebek 1" , 12: " Tüp Bebek 2" , 15: “Plazmaferez Tedavisi” , 21: ”Alkol, Madde Bağımlılığı Tedavisi” 
                tedaviTipiList = new List<string>() { "4", "5", "6", "7", "9", "11", "12", "15", "21" };

                // 5: Analık hali
                istisnaiHalList = new List<string>() { "5" };

                // 99: Yurtdışı Sigortalılar
                devredilenKurumList = new List<string>() { "99" };

                // Sabit hesap kodları
                SGKAyaktanHesapKodu = SystemParameter.GetParameterValue("MIFSGKAYAKTANHESAPKODU", "XXXXXX");
                SGKYatanHesapKodu = SystemParameter.GetParameterValue("MIFSGKYATANHESAPKODU", "XXXXXX");
                SGKTrafikKazasiHesapKodu = SystemParameter.GetParameterValue("MIFSGKTRAFIKKAZASIHESAPKODU", "XXXXXX");

                BKKPrimBorcHesapKodu = SystemParameter.GetParameterValue("MIFBKKPRIMBORCHESAPKODU", "XXXXXX");
                BKKPrimAlacakHesapKodu = SystemParameter.GetParameterValue("MIFBKKPRIMALACAKHESAPKODU", "XXXXXX");

                IlacHesapKodu = SystemParameter.GetParameterValue("MIFILACHESAPKODU", "XXXXXX");
                MalzemeHesapKodu = SystemParameter.GetParameterValue("MIFMALZEMEHESAPKODU", "XXXXXX");
            }

            public string GetCreditCode(MIFTypeEnum mifType, string baseType, object accountCode, string tedaviTuru, string provizyonTipi,
                                           string tedaviTipi, string istisnaiHal, string devredilenKurum, long? uniqueRefNo)
            {
                if (baseType == "HİZMET") // Hizmet
                {
                    if (accountCode == null)
                        return "600.???";

                    string creditCode = accountCode.ToString();

                    // 600 lü hesap kodunun son kırınımı belirlenir

                    // "600.01.06 : Ameliyat ve Anestezi Gelirleri" , "600.01.07 : Yatak ve Refakat Ücreti Gelirleri"
                    // Bu iki hesap kodunun Diğer ve Ayaktan kırınımı yok, sadece Yatan ve Günübirlik olabiliyor
                    // Ayrıca Yatan ve Günübirlik kırınımları da diğerlerinden farklı
                    if (creditCode == "600.01.06" || creditCode == "600.01.07")
                    {
                        if (tedaviTuru == "Y")    // Yatan
                            creditCode += ".01";
                        else                      // Günübirlik
                            creditCode += ".02";
                    }
                    else
                    {
                        if (provizyonTipiList.Contains(provizyonTipi) || tedaviTipiList.Contains(tedaviTipi) ||
                        istisnaiHalList.Contains(istisnaiHal) || devredilenKurumList.Contains(devredilenKurum) ||
                        (mifType != MIFTypeEnum.Suriyeli && uniqueRefNo.HasValue && uniqueRefNo.Value.ToString().StartsWith("99")))
                        {
                            if (creditCode == "600.01.01") // Diğer
                                creditCode += ".04.09";
                            else
                                creditCode += ".04";
                        }
                        else if (tedaviTuru == "A") // Ayaktan
                            creditCode += ".01";
                        else if (tedaviTuru == "Y") // Yatan
                            creditCode += ".02";
                        else                        // Günübirlik
                            creditCode += ".03";
                    }

                    return creditCode;
                }
                else if (baseType == "İLAÇ")
                    return IlacHesapKodu; // İlaç
                else
                    return MalzemeHesapKodu; // Malzeme
            }
        }

        public List<MIFPayer> PrepareMIF(MIFTypeEnum mifType)
        {
            List<MIFPayer> result = new List<MIFPayer>();

            switch (mifType)
            {
                case MIFTypeEnum.SGK:
                    result = PrepareSGKMIF();
                    break;
                case MIFTypeEnum.BKKPrimBorclu:
                    result = PrepareBKKPrimBorcluMIF();
                    break;
                case MIFTypeEnum.Suriyeli:
                    result = PrepareSGKSuriyeMIF();
                    break;
                case MIFTypeEnum.OfficialAndSGKManual:
                    result = PrepareOfficialAndSGKManualMIF();
                    break;
                default:
                    throw new TTException("Bilinmeyen Muhasebe İşlem Fişi türü.");
            }

            result = result.OrderBy(x => x.Name).ToList(); // Kurum adına göre sıralanır

            foreach (MIFPayer mifPayer in result) // Hesap koduna göre sıralanır
                mifPayer.Details = mifPayer.Details.OrderBy(x => x.AccountCode).ToList();

            return result;
        }

        public List<MIFPayer> PrepareSGKMIF()
        {
            if (Approved != true)
                throw new TTException("Muhasebe İşlem Fişi hazırlamak için önce Medula Tutar Onaylama işlemi yapılmalıdır.");

            string sgkPayerObjectID = SystemParameter.GetParameterValue("SGKPAYERDEFINITION", "ef3e2dc7-2ae8-4603-b199-ec4600267856");
            PayerDefinition payer = ObjectContext.GetObject<PayerDefinition>(new Guid(sgkPayerObjectID), false);

            if (payer == null)
                throw new Exception(CultureService.GetText("M26866", "SGK hastalar kurumu bulunamadı.Sistem parametrelerini kontrol ediniz.(Bknz: SGKPAYERDEFINITION)"));

            List<MIFPayer> result = new List<MIFPayer>();

            MIFPayer mifPayer = new MIFPayer();
            mifPayer.Payer = payer.ObjectID;
            mifPayer.Code = payer.Code.HasValue ? payer.Code.ToString() : null;
            mifPayer.Name = payer.Name;
            result.Add(mifPayer);

            MIFHelper mifHelper = new MIFHelper(ObjectContext);

            StringBuilder sb = new StringBuilder();
            sb.Append(" AND ((");
            sb.Append(" IFNULL(SUBEPISODEPROTOCOL.PAYER.MIFTYPE,0) <> " + (int)MIFTypeEnum.Suriyeli); // Suriyeli hastalar bu MIF e gelmemeli
            sb.Append(" AND IFNULL(SUBEPISODEPROTOCOL.MEDULAISTISNAIHAL.KODU,'X') <> '9'"); // BKK Prim borçlular gelmemeli  
            sb.Append(" ) OR (");
            sb.Append(" IFNULL(SUBEPISODEPROTOCOL.PAYER.MIFTYPE,0) = " + (int)MIFTypeEnum.Suriyeli); // Suriyeli hastaların provizyon tipi 
            sb.Append(" AND SUBEPISODEPROTOCOL.MEDULAPROVIZYONTIPI.PROVIZYONTIPIKODU = 'T'");        // Trafik Kazası olanlar bu MİF e gelmeli
            sb.Append(" ))");

            BindingList<AccountTransaction.PrepareSGKMIFQuery_Class> sepMifList = AccountTransaction.PrepareSGKMIFQuery(ObjectID, sb.ToString());
            foreach (AccountTransaction.PrepareSGKMIFQuery_Class sepMif in sepMifList)
            {
                string debtCode;
                // 120 li hesap kodu belirlenir  
                if (sepMif.provizyonTipiKodu == "T")
                    debtCode = mifHelper.SGKTrafikKazasiHesapKodu; // Trafik kazası
                else if (sepMif.tedaviTuruKodu == "A")
                    debtCode = mifHelper.SGKAyaktanHesapKodu; // Ayaktan
                else
                    debtCode = mifHelper.SGKYatanHesapKodu; // Yatan

                // 600 lü hesap kodu belirlenir
                string creditCode = mifHelper.GetCreditCode(MIFTypeEnum.SGK, sepMif.Basetype.ToString(), sepMif.Accountcode, sepMif.tedaviTuruKodu, sepMif.provizyonTipiKodu, sepMif.tedaviTipiKodu, sepMif.Istisnaihalkodu, sepMif.devredilenKurumKodu, sepMif.UniqueRefNo);

                // Borç hesabı bulunup listeye eklenir
                MIFPayerDetail debtDetail = mifPayer.Details.FirstOrDefault(x => x.AccountCode == debtCode);
                if (debtDetail == null)
                    mifPayer.AddDetail(debtCode, GetAccountName(mifHelper.accountDefList, debtCode), (decimal)sepMif.Medulaprice, null);
                else
                    debtDetail.Debt += (decimal)sepMif.Medulaprice;

                // Alacak hesabı bulunup listeye eklenir
                MIFPayerDetail creditDetail = mifPayer.Details.FirstOrDefault(x => x.AccountCode == creditCode);
                if (creditDetail == null)
                    mifPayer.AddDetail(creditCode, GetAccountName(mifHelper.accountDefList, creditCode), null, (decimal)sepMif.Medulaprice);
                else
                    creditDetail.Credit += (decimal)sepMif.Medulaprice;
            }

            return result;
        }

        public List<MIFPayer> PrepareBKKPrimBorcluMIF()
        {
            if (Approved != true)
                throw new TTException("Muhasebe İşlem Fişi hazırlamak için önce Medula Tutar Onaylama işlemi yapılmalıdır.");

            string sgkPayerObjectID = SystemParameter.GetParameterValue("SGKPAYERDEFINITION", "ef3e2dc7-2ae8-4603-b199-ec4600267856");
            PayerDefinition payer = ObjectContext.GetObject<PayerDefinition>(new Guid(sgkPayerObjectID), false);

            if (payer == null)
                throw new Exception(CultureService.GetText("M26866", "SGK hastalar kurumu bulunamadı.Sistem parametrelerini kontrol ediniz.(Bknz: SGKPAYERDEFINITION)"));

            List<MIFPayer> result = new List<MIFPayer>();

            MIFPayer mifPayer = new MIFPayer();
            mifPayer.Payer = payer.ObjectID;
            mifPayer.Code = payer.Code.HasValue ? payer.Code.ToString() : null;
            mifPayer.Name = payer.Name;
            result.Add(mifPayer);

            MIFHelper mifHelper = new MIFHelper(ObjectContext);
            string debtCode = mifHelper.BKKPrimBorcHesapKodu; // Borç hesap kodu (sabit ve bir satır olacak)
            string creditCode = mifHelper.BKKPrimAlacakHesapKodu; // Alacak hesap kodu (sabit ve bir satır olacak)

            StringBuilder sb = new StringBuilder();
            sb.Append(" AND IFNULL(SUBEPISODEPROTOCOL.PAYER.MIFTYPE,0) <> " + (int)MIFTypeEnum.Suriyeli); // Suriyeli hastalar bu MIF e gelmemeli
            sb.Append(" AND IFNULL(SUBEPISODEPROTOCOL.MEDULAISTISNAIHAL.KODU,'X') = '9'");  // BKK Prim borçlu gelmeli

            BindingList<AccountTransaction.PrepareSGKMIFQuery_Class> sepMifList = AccountTransaction.PrepareSGKMIFQuery(ObjectID, sb.ToString());
            foreach (AccountTransaction.PrepareSGKMIFQuery_Class sepMif in sepMifList)
            {
                // Borç hesabı bulunup listeye eklenir
                MIFPayerDetail debtDetail = mifPayer.Details.FirstOrDefault(x => x.AccountCode == debtCode);
                if (debtDetail == null)
                    mifPayer.AddDetail(debtCode, GetAccountName(mifHelper.accountDefList, debtCode), (decimal)sepMif.Medulaprice, null);
                else
                    debtDetail.Debt += (decimal)sepMif.Medulaprice;

                // Alacak hesabı bulunup listeye eklenir
                MIFPayerDetail creditDetail = mifPayer.Details.FirstOrDefault(x => x.AccountCode == creditCode);
                if (creditDetail == null)
                    mifPayer.AddDetail(creditCode, GetAccountName(mifHelper.accountDefList, creditCode), null, (decimal)sepMif.Medulaprice);
                else
                    creditDetail.Credit += (decimal)sepMif.Medulaprice;
            }

            return result;
        }

        public List<MIFPayer> PrepareSGKSuriyeMIF()
        {
            if (Approved != true)
                throw new TTException("Muhasebe İşlem Fişi hazırlamak için önce Medula Tutar Onaylama işlemi yapılmalıdır.");

            List<PayerDefinition> payerList = ObjectContext.QueryObjects<PayerDefinition>("MIFTYPE = " + (int)MIFTypeEnum.Suriyeli).ToList();
            PayerDefinition payer = payerList.FirstOrDefault();

            if (payer == null)
                throw new Exception("MİF Türü 'SGK (Suriye)' olan hiç kurum bulunamadı.");

            List<MIFPayer> result = new List<MIFPayer>();

            MIFPayer mifPayer = new MIFPayer();
            mifPayer.Payer = payer.ObjectID;
            mifPayer.Code = payer.Code.HasValue ? payer.Code.ToString() : null;
            mifPayer.Name = payer.Name;
            result.Add(mifPayer);

            MIFHelper mifHelper = new MIFHelper(ObjectContext);
            string debtCode = !string.IsNullOrWhiteSpace(payer?.RevenueSubAccountCode?.AccountCode) ? payer?.RevenueSubAccountCode?.AccountCode : "120.???";

            StringBuilder sb = new StringBuilder();
            sb.Append(" AND IFNULL(SUBEPISODEPROTOCOL.PAYER.MIFTYPE,0) = " + (int)MIFTypeEnum.Suriyeli); // Suriyeli hastalar bu MIF e gelmeli
            sb.Append(" AND SUBEPISODEPROTOCOL.MEDULAPROVIZYONTIPI.PROVIZYONTIPIKODU <> 'T'"); // Trafik kazaları bu MİF e gelmemeli, SGK MİF ine gelmeli

            BindingList <AccountTransaction.PrepareSGKMIFQuery_Class> sepMifList = AccountTransaction.PrepareSGKMIFQuery(ObjectID, sb.ToString());
            foreach (AccountTransaction.PrepareSGKMIFQuery_Class sepMif in sepMifList)
            {
                // 600 lü hesap kodu belirlenir
                string creditCode = mifHelper.GetCreditCode(MIFTypeEnum.Suriyeli, sepMif.Basetype.ToString(), sepMif.Accountcode, sepMif.tedaviTuruKodu, sepMif.provizyonTipiKodu, sepMif.tedaviTipiKodu, sepMif.Istisnaihalkodu, sepMif.devredilenKurumKodu, sepMif.UniqueRefNo);

                // Borç hesabı bulunup listeye eklenir
                MIFPayerDetail debtDetail = mifPayer.Details.FirstOrDefault(x => x.AccountCode == debtCode);
                if (debtDetail == null)
                    mifPayer.AddDetail(debtCode, GetAccountName(mifHelper.accountDefList, debtCode), (decimal)sepMif.Medulaprice, null);
                else
                    debtDetail.Debt += (decimal)sepMif.Medulaprice;

                // Alacak hesabı bulunup listeye eklenir
                MIFPayerDetail creditDetail = mifPayer.Details.FirstOrDefault(x => x.AccountCode == creditCode);
                if (creditDetail == null)
                    mifPayer.AddDetail(creditCode, GetAccountName(mifHelper.accountDefList, creditCode), null, (decimal)sepMif.Medulaprice);
                else
                    creditDetail.Credit += (decimal)sepMif.Medulaprice;
            }

            return result;
        }

        public List<MIFPayer> PrepareOfficialAndSGKManualMIF()
        {
            List<MIFPayer> result = new List<MIFPayer>();
            MIFHelper mifHelper = new MIFHelper(ObjectContext);

            StringBuilder sb = new StringBuilder();
            sb.Append(" AND SUBEPISODEPROTOCOL.PAYER.MIFTYPE = " + (int)MIFTypeEnum.OfficialAndSGKManual);

            BindingList<AccountTransaction.PrepareOfficialMIFQuery_Class> sepMifList = AccountTransaction.PrepareOfficialMIFQuery(ObjectID, sb.ToString());
            foreach (AccountTransaction.PrepareOfficialMIFQuery_Class sepMif in sepMifList)
            {
                MIFPayer mifPayer = result.FirstOrDefault(x => x.Payer == sepMif.Payerobjectid);
                if (mifPayer == null)
                {
                    mifPayer = new MIFPayer();
                    mifPayer.Payer = sepMif.Payerobjectid.Value;
                    mifPayer.Code = sepMif.Payercode.HasValue ? sepMif.Payercode.ToString() : null;
                    mifPayer.Name = sepMif.Payername;
                    result.Add(mifPayer);
                }

                // 120 li hesap kodu
                string debtCode = !string.IsNullOrWhiteSpace(sepMif.Payeraccountcode) ? sepMif.Payeraccountcode : "120.???";

                // 600 lü hesap kodu belirlenir
                string creditCode = mifHelper.GetCreditCode(MIFTypeEnum.OfficialAndSGKManual, sepMif.Basetype.ToString(), sepMif.Accountcode, sepMif.tedaviTuruKodu, sepMif.provizyonTipiKodu, sepMif.tedaviTipiKodu, sepMif.Istisnaihalkodu, sepMif.devredilenKurumKodu, sepMif.UniqueRefNo);

                // Borç hesabı bulunup listeye eklenir
                MIFPayerDetail debtDetail = mifPayer.Details.FirstOrDefault(x => x.AccountCode == debtCode);
                if (debtDetail == null)
                    mifPayer.AddDetail(debtCode, GetAccountName(mifHelper.accountDefList, debtCode), (decimal)sepMif.Totalprice, null);
                else
                    debtDetail.Debt += (decimal)sepMif.Totalprice;

                // Alacak hesabı bulunup listeye eklenir
                MIFPayerDetail creditDetail = mifPayer.Details.FirstOrDefault(x => x.AccountCode == creditCode);
                if (creditDetail == null)
                    mifPayer.AddDetail(creditCode, GetAccountName(mifHelper.accountDefList, creditCode), null, (decimal)sepMif.Totalprice);
                else
                    creditDetail.Credit += (decimal)sepMif.Totalprice;
            }

            return result;
        }

        public static string GetAccountName(List<RevenueSubAccountCodeDefinition> accountList, string accountCode)
        {
            RevenueSubAccountCodeDefinition accountDef = accountList.FirstOrDefault(x => x.AccountCode == accountCode);
            if (accountDef != null)
                return accountDef.Description;

            return null;
        }

        #endregion Muhasebe İşlem Fişi

        #endregion Methods

    }
}