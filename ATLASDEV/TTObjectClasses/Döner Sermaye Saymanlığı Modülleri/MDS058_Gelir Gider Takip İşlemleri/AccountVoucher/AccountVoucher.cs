
using System;
using System.Xml;
using System.Data;
using System.Text;
using System.Drawing;
using System.Reflection;
using System.Collections;
using System.Linq;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Collections.ObjectModel;
using System.Runtime.InteropServices;

using TTUtils;
using TTObjectClasses;
using TTDataDictionary;
using TTCoreDefinitions;
using TTConnectionManager;
using TTInstanceManagement;
using TTDefinitionManagement;
using TTStorageManager.Security;

using TTStorageManager;
using System.Runtime.Versioning;
namespace TTObjectClasses
{

    public partial class AccountVoucher : TTObject
    {
        public class AccountVoucherPeriodPricesInfo
        {
            public int year;
            public int month;
            public double totalDept;
            public double totalNonDept;
            public double totalDifference;
        }

        public static List<AccountVoucher.AccountVoucherPeriodPricesInfo> GetAccountVoucherPeriodPrices(int year, int month)
        {
            Dictionary<string, AccountVoucher.AccountVoucherPeriodPricesInfo> codePricesInfoDict = new Dictionary<string, AccountVoucher.AccountVoucherPeriodPricesInfo>();

            IList<GetAccountVoucherTotal_Class> codePeriodPricesList = AccountVoucher.GetAccountVoucherTotal(year, month).ToList<GetAccountVoucherTotal_Class>();
            foreach (GetAccountVoucherTotal_Class detail in codePeriodPricesList)
            {
                AccountVoucher.AccountVoucherPeriodPricesInfo codePriceInfo = new AccountVoucher.AccountVoucherPeriodPricesInfo();
                string keyValue = detail.Year.ToString() + detail.Month.ToString();
                if (codePricesInfoDict.TryGetValue(keyValue, out codePriceInfo) == false)
                {
                    if (codePriceInfo == null)
                        codePriceInfo = new AccountVoucher.AccountVoucherPeriodPricesInfo();

                    codePriceInfo.year = (int)detail.Year;
                    codePriceInfo.month = (int)detail.Month;
                    codePriceInfo.totalDept = Convert.ToDouble(detail.Deptprice);
                    codePriceInfo.totalNonDept = Convert.ToDouble(detail.Nondeptprice);
                    codePriceInfo.totalDifference = Convert.ToDouble(detail.Nondeptprice) - Convert.ToDouble(detail.Deptprice);
                    codePricesInfoDict.Add(keyValue, codePriceInfo);
                }
                else
                {

                    codePriceInfo.totalDept = codePriceInfo.totalDept + Convert.ToDouble(detail.Deptprice);
                    codePriceInfo.totalNonDept = codePriceInfo.totalNonDept + Convert.ToDouble(detail.Nondeptprice);
                    codePriceInfo.totalDifference = codePriceInfo.totalNonDept - codePriceInfo.totalDept;
                }
            }

            List<AccountVoucher.AccountVoucherPeriodPricesInfo> codePriceInfoList = new List<AccountVoucher.AccountVoucherPeriodPricesInfo>();
            foreach (KeyValuePair<string, AccountVoucher.AccountVoucherPeriodPricesInfo> codeInfo in codePricesInfoDict)
            {
                AccountVoucher.AccountVoucherPeriodPricesInfo tmpInfo = new AccountVoucher.AccountVoucherPeriodPricesInfo();
                tmpInfo.year = codeInfo.Value.year;
                tmpInfo.month = codeInfo.Value.month;
                tmpInfo.totalDept = codeInfo.Value.totalDept;
                tmpInfo.totalNonDept = codeInfo.Value.totalNonDept;
                tmpInfo.totalDifference = codeInfo.Value.totalDifference;
                codePriceInfoList.Add(tmpInfo);
            }

            return codePriceInfoList;
        }

        public void AddDetail(Currency? price, AccountDocument accountDocument, ReceiptDocumentDetail receiptDocumentDetail = null)
        {
            new AccountVoucherDetail(ObjectContext)
            {
                AccountVoucher = this,
                Price = price,
                AccountDocument = accountDocument,
                ReceiptDocumentDetail = receiptDocumentDetail
            };

            TotalPrice += price;
        }

        public static AccountVoucher GetOrCreateForCashOffice(TTObjectContext context, AccountPeriodDefinition periodDef, AccountVoucherCodeDefinition codeDef)
        {
            AccountVoucher accountVoucher = context.QueryObjects<AccountVoucher>("ISAUTOGENERATED = 1 AND ISDEPT = 0 AND VOUCHERTYPE = 3 AND CURRENTSTATEDEFID = '" + States.Completed + "' AND ACCOUNTPERIOD = '" + periodDef.ObjectID + "' AND ACCOUNTVOUCHERCODEDEFINITION = '" + codeDef.ObjectID + "'").FirstOrDefault();
            if (accountVoucher == null)
                accountVoucher = CreateForCashOffice(context, periodDef, codeDef);

            return accountVoucher;
        }

        public static AccountVoucher CreateForCashOffice(TTObjectContext context, AccountPeriodDefinition periodDef, AccountVoucherCodeDefinition codeDef)
        {
            AccountVoucher accountVoucher = new AccountVoucher(context)
            {
                IsAutoGenerated = true,
                IsDept = false,
                TotalPrice = 0,
                VoucherType = VoucherTypeEnum.CashOfficeCollection,
                AccountPeriod = periodDef,
                AccountVoucherCodeDefinition = codeDef,
                CurrentStateDefID = States.Completed
            };

            return accountVoucher;
        }

        protected override void PreInsert()
        {
            if (VoucherType == VoucherTypeEnum.CashOfficeCollection && IsAutoGenerated != true)
                throw new TTException("Vezne Tahsilatı türünde Gelir/Gider İşlemi manuel olarak oluşturulamaz.");
        }

        protected override void PreUpdate()
        {
            if (IsAutoGenerated == true) // Vezne tahsilatı için otomatik oluşturulan AccountVoucher ın toplam tutar haricindeki propertyleri değiştirilemesin.
            {
                TTObjectContext roContext = new TTObjectContext(true);
                AccountVoucher originalVoucher = roContext.GetObject<AccountVoucher>(ObjectID);

                if (originalVoucher != null)
                {
                    if (IsDept != originalVoucher.IsDept ||
                        VoucherType != originalVoucher.VoucherType ||
                        AccountPeriod.ObjectID != originalVoucher.AccountPeriod.ObjectID ||
                        AccountVoucherCodeDefinition.ObjectID != originalVoucher.AccountVoucherCodeDefinition.ObjectID ||
                        Supplier != null)
                    {
                        throw new TTException("Otomatik oluşturulan Gelir/Gider İşleminin özellikleri değiştirilemez.");
                    }
                }
            }
        }

        protected void PostTransition(TTObjectStateTransitionDef transDef)
        {
            if (transDef.ObjectDef.CodeName != typeof(AccountVoucher).Name)
                return;

            var fromState = transDef.FromStateDefID;
            var toState = transDef.ToStateDefID;

            if (fromState == States.Completed && toState == States.Cancelled)
                PostTransition_Completed2Cancelled();
        }

        protected void PostTransition_Completed2Cancelled()
        {
            // From State : Completed   To State : Cancelled
            #region PostTransition_Completed2Cancelled

            if (IsAutoGenerated == true)
                throw new TTException("Otomatik oluşturulan Gelir/Gider İşlemi iptal edilemez.");

            #endregion PostTransition_Completed2Cancelled
        }
    }
}