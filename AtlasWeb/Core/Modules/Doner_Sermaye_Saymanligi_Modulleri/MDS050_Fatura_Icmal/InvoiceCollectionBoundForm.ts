//$8A4F362F
import { Component, OnInit, NgZone } from '@angular/core';
import { InvoiceCollectionBoundFormViewModel } from "./InvoiceCollectionBoundFormViewModel";
import { NeHttpService } from "Fw/Services/NeHttpService";
import { MessageService } from "Fw/Services/MessageService";
import { ServiceLocator } from 'Fw/Services/ServiceLocator';
import { Guid } from "NebulaClient/Mscorlib/Guid";
import { ShowBox } from 'NebulaClient/Visual/ShowBox';

import * as TTVisual from "NebulaClient/Visual/TTVisualControlInterfaces";
import { InvoiceCollection, Service } from 'NebulaClient/Model/AtlasClientModel';

import { InvoiceCollectionDetail } from 'NebulaClient/Model/AtlasClientModel';
import { InvoiceTerm } from 'NebulaClient/Model/AtlasClientModel';
import { PayerDefinition } from 'NebulaClient/Model/AtlasClientModel';
import { ProvizyonTipi } from 'NebulaClient/Model/AtlasClientModel';
import { ResUser } from 'NebulaClient/Model/AtlasClientModel';
import { TakipTipi } from 'NebulaClient/Model/AtlasClientModel';
import { TedaviTipi } from 'NebulaClient/Model/AtlasClientModel';
import { TedaviTuru } from 'NebulaClient/Model/AtlasClientModel';
import { DateTimePickerFormat } from "NebulaClient/Utils/Enums/DateTimePickerFormat";
import { TTObjectStateTransitionDef } from "NebulaClient/StorageManager/DefinitionManagement/TTObjectStateTransitionDef";
import { GetMedulaDefinitionService } from 'app/Invoice/GetMedulaDefinitionService';

import { InputForm } from 'NebulaClient/Visual/InputForm';
import { ComboListItem } from 'NebulaClient/Visual/ComboListItem';
import { InvoiceCollectionDetailBatchProcessModel, InvoiceCollectionDetailBatchProcessResultModel } from "./InvoiceCollectionBoundFormViewModel";
import { PriceDetailParameterModel, PriceDetailResultModel } from "app/Invoice/InvoiceCollectionSearchFormViewModel";
import { ITTListDefComboBox } from 'NebulaClient/Visual/ControlInterfaces/ITTListDefComboBox';
import { DxDataGridComponent } from 'devextreme-angular';
import { ShowBoxTypeEnum } from "NebulaClient/Utils/Enums/ShowBoxTypeEnum";
import { IModal, ModalInfo } from 'Fw/Models/ModalInfo';
import { FormSaveInfo } from "NebulaClient/Mscorlib/FormSaveInfo";
import DataSource from "devextreme/data/data_source";
import CustomStore from 'devextreme/data/custom_store';
import { async } from 'rxjs/internal/scheduler/async';

@Component({
    selector: 'InvoiceCollectionBoundForm',
    templateUrl: './InvoiceCollectionBoundForm.html',
    providers: [MessageService]
})
export class InvoiceCollectionBoundForm extends TTVisual.TTForm implements OnInit, IModal {

    chkIsGeneral: TTVisual.ITTCheckBox;
    CreateDate: TTVisual.ITTDateTimePicker;
    //Date: TTVisual.ITTDateTimePicker;GetMedulaDefinitionService
    DeliveredDate: TTVisual.ITTDateTimePicker;
    InvoiceCollectionDate: TTVisual.ITTDateTimePicker;
    Description: TTVisual.ITTTextBox;
    EPISODENO: TTVisual.ITTTextBoxColumn;
    INVOICEDATE: TTVisual.ITTTextBoxColumn;
    INVOICENO: TTVisual.ITTTextBoxColumn;
    InvoiceTerm: TTVisual.ITTListDefComboBox;
    IsAutoGenerated: TTVisual.ITTCheckBox;
    labelCapacity: TTVisual.ITTLabel;
    labelDate: TTVisual.ITTLabel;
    labelDeliveredDate: TTVisual.ITTLabel;
    labelInvoiceCollectionDate: TTVisual.ITTLabel;
    labelDescription: TTVisual.ITTLabel;
    labelInvoiceTerm: TTVisual.ITTLabel;
    labelLastStateDate: TTVisual.ITTLabel;
    labelName: TTVisual.ITTLabel;
    labelNameResource: TTVisual.ITTLabel;
    labelNo: TTVisual.ITTLabel;
    labelNote: TTVisual.ITTLabel;
    labelPayer: TTVisual.ITTLabel;
    labelProvizyonTipi: TTVisual.ITTLabel;
    labelSendingDate: TTVisual.ITTLabel;
    labelSendingNo: TTVisual.ITTLabel;
    labelTakipTipi: TTVisual.ITTLabel;
    labelTedaviTipi: TTVisual.ITTLabel;
    labelTedaviTuru: TTVisual.ITTLabel;
    LastStateDate: TTVisual.ITTDateTimePicker;
    lblBatchInvoice: TTVisual.ITTLabel;
    Name: TTVisual.ITTTextBox;
    NameResource: TTVisual.ITTTextBox;
    LastStateUserName: TTVisual.ITTTextBox;
    No: TTVisual.ITTTextBox;
    Note: TTVisual.ITTTextBox;
    OPENINGDATE: TTVisual.ITTDateTimePickerColumn;
    PATIENTFULLNAME: TTVisual.ITTTextBoxColumn;
    PRICE: TTVisual.ITTTextBoxColumn;
    ProvizyonTipi: TTVisual.ITTObjectListBox;
    SendingDate: TTVisual.ITTDateTimePicker;
    SendingNo: TTVisual.ITTTextBox;
    TakipTipi: TTVisual.ITTObjectListBox;
    TedaviTipi: TTVisual.ITTObjectListBox;
    TedaviTuru: TTVisual.ITTObjectListBox;
    InvoiceCollectionType: TTVisual.ITTEnumComboBox;
    ttgrid1: TTVisual.ITTGrid;
    payerObjectListBox: TTVisual.ITTObjectListBox;
    txtCapacity: TTVisual.ITTTextBox;
    UNIQUEREFNO: TTVisual.ITTTextBoxColumn;

    StateCommandsVisible: boolean = true;
    DisableDate: boolean = true;
    SelectedDetails: Array<InvoiceCollectionDetail>;
    ICDetailGridDataSource: DataSource

    public TermDayReadOnly = true;
    public LastPaymentDateReadOnly = true;

    //public ttgrid1Columns = [];
    public invoiceCollectionBoundFormViewModel: InvoiceCollectionBoundFormViewModel = new InvoiceCollectionBoundFormViewModel();
    public get _InvoiceCollection(): InvoiceCollection {
        return this._TTObject as InvoiceCollection;
    }
    private InvoiceCollectionBoundForm_DocumentUrl: string = '/api/InvoiceCollectionService/InvoiceCollectionBoundForm';
    constructor(protected httpService: NeHttpService,
        protected messageService: MessageService,
        private medulaService: GetMedulaDefinitionService,
        protected ngZone: NgZone) {
        super("INVOICECOLLECTION", "InvoiceCollectionBoundForm");
        this._DocumentServiceUrl = this.InvoiceCollectionBoundForm_DocumentUrl;
        this.initViewModel();
        this.initFormControls();
    }
    protected async ClientSidePreScript(): Promise<void> {
        if (this.invoiceCollectionBoundFormViewModel._InvoiceCollection.IsAutoGenerated === true) {
            this.chkIsGeneral.ReadOnly = true;
            this.InvoiceTerm.Enabled = false;
            this.SendingDate.ReadOnly = true;
            this.DeliveredDate.ReadOnly = true;
            this.InvoiceCollectionDate.ReadOnly = true;
            this.SendingNo.ReadOnly = true;
            this.Name.ReadOnly = true;
            this.txtCapacity.ReadOnly = true;
            this.payerObjectListBox.Enabled = false;
            this.InvoiceCollectionType.ReadOnly = true;
            this.TedaviTuru.Enabled = false;
            this.DisableDate = true;
            this.StateCommandsVisible = false;
        }
        else {
            switch (this.invoiceCollectionBoundFormViewModel._InvoiceCollection.CurrentStateDefID.valueOf()) {
                case InvoiceCollection.InvoiceCollectionStates.Open.id:
                    if (this.invoiceCollectionBoundFormViewModel._InvoiceCollection.IsNew)
                        this.StateCommandsVisible = false;
                    this.SendingDate.ReadOnly = true;
                    this.SendingNo.ReadOnly = true;
                    this.DeliveredDate.ReadOnly = true;
                    break;
                case InvoiceCollection.InvoiceCollectionStates.Locked.id:
                    this.SendingDate.ReadOnly = true;
                    this.SendingNo.ReadOnly = true;
                    this.DeliveredDate.ReadOnly = true;
                    this.InvoiceCollectionDate.ReadOnly = true;
                    break;
                case InvoiceCollection.InvoiceCollectionStates.Cancelled.id:
                    this.chkIsGeneral.ReadOnly = true;
                    this.InvoiceTerm.Enabled = false;
                    this.SendingDate.ReadOnly = true;
                    this.SendingNo.ReadOnly = true;
                    this.DeliveredDate.ReadOnly = true;
                    this.InvoiceCollectionDate.ReadOnly = true;
                    this.Name.ReadOnly = true;
                    this.txtCapacity.ReadOnly = true;
                    this.payerObjectListBox.Enabled = false;
                    this.InvoiceCollectionType.ReadOnly = true;
                    this.TedaviTuru.Enabled = false;
                    break;
                case InvoiceCollection.InvoiceCollectionStates.Delivered.id:
                    this.chkIsGeneral.ReadOnly = true;
                    this.InvoiceTerm.Enabled = false;
                    this.SendingDate.ReadOnly = true;
                    this.SendingNo.ReadOnly = true;
                    this.Name.ReadOnly = true;
                    this.txtCapacity.ReadOnly = true;
                    this.payerObjectListBox.Enabled = false;
                    this.InvoiceCollectionType.ReadOnly = true;
                    this.TedaviTuru.Enabled = false;
                    this.InvoiceCollectionDate.ReadOnly = true;
                    break;
                case InvoiceCollection.InvoiceCollectionStates.PartialPaid.id:
                case InvoiceCollection.InvoiceCollectionStates.Paid.id:
                    this.chkIsGeneral.ReadOnly = true;
                    this.InvoiceTerm.Enabled = false;
                    this.SendingDate.ReadOnly = true;
                    this.SendingNo.ReadOnly = true;
                    this.Name.ReadOnly = true;
                    this.txtCapacity.ReadOnly = true;
                    this.payerObjectListBox.Enabled = false;
                    this.InvoiceCollectionType.ReadOnly = true;
                    this.TedaviTuru.Enabled = false;
                    this.DeliveredDate.ReadOnly = true;
                    this.InvoiceCollectionDate.ReadOnly = true;
                    break;
                case InvoiceCollection.InvoiceCollectionStates.Closed.id:
                    this.chkIsGeneral.ReadOnly = true;
                    this.InvoiceTerm.Enabled = false;
                    this.Name.ReadOnly = true;
                    this.txtCapacity.ReadOnly = true;
                    this.payerObjectListBox.Enabled = false;
                    this.InvoiceCollectionType.ReadOnly = true;
                    this.TedaviTuru.Enabled = false;
                    this.DisableDate = true;
                    this.InvoiceCollectionDate.ReadOnly = true;
                    break;
                case InvoiceCollection.InvoiceCollectionStates.Send.id:
                    this.chkIsGeneral.ReadOnly = true;
                    this.InvoiceTerm.Enabled = false;
                    this.Name.ReadOnly = true;
                    this.txtCapacity.ReadOnly = true;
                    this.payerObjectListBox.Enabled = false;
                    this.InvoiceCollectionType.ReadOnly = true;
                    this.TedaviTuru.Enabled = false;
                    this.InvoiceCollectionDate.ReadOnly = true;
                    break;
            }
        }

        // Drop State Buttons
        switch (this.invoiceCollectionBoundFormViewModel._InvoiceCollection.CurrentStateDefID.toString()) {
            case 'd08f8477-2371-4c78-9faf-5c9da793cf07': // Delivered
                this.DropStateButton(InvoiceCollection.InvoiceCollectionStates.PartialPaid);
                this.DropStateButton(InvoiceCollection.InvoiceCollectionStates.Paid);
                break;
            case '6840c027-815c-46e9-9910-2f44a003afb1': // PartialPaid
                this.DropStateButton(InvoiceCollection.InvoiceCollectionStates.Paid);
                this.DropStateButton(InvoiceCollection.InvoiceCollectionStates.Delivered);
                break;
            case 'df4d8d1b-16ec-40c5-b0d4-e637e1df6e68': // Paid
                this.DropStateButton(InvoiceCollection.InvoiceCollectionStates.PartialPaid);
                this.DropStateButton(InvoiceCollection.InvoiceCollectionStates.Delivered);
                break;
        }
    }
    // ***** Method declarations start *****

    public async stateChange(e: FormSaveInfo) {
        if (e.transDef.ToStateDefID.valueOf() === InvoiceCollection.InvoiceCollectionStates.Cancelled.id) {
            let result: string = await ShowBox.Show(ShowBoxTypeEnum.Message, '&Tamam,&Vazgeç', 'OK,CANCEL', i18n("M23735", "Uyarı"), '', i18n("M16133", "İcmal ile birlikte Faturalar iptal edilecek ve icmal dışına taşınacak. İcmali iptal etmek istediğinize emin misiniz?"));
            if (result === "OK")
                await super.setState(e.transDef, e);
        }
        else if (e.transDef.ToStateDefID.valueOf() === InvoiceCollection.InvoiceCollectionStates.Closed.id && (e.transDef.FromStateDefID.valueOf() === InvoiceCollection.InvoiceCollectionStates.Open.id || e.transDef.FromStateDefID.valueOf() === InvoiceCollection.InvoiceCollectionStates.Locked.id)) {
            let unInvoicedExist: boolean = false;
            // for (let item of this.invoiceCollectionBoundFormViewModel.GridModel) {
            //     if (String.isNullOrEmpty(item.Invoiceno))
            //         unInvoicedExist = true;
            // }
            unInvoicedExist = await this.httpService.post<boolean>('api/InvoiceCollectionService/UnInvoicedExistControl?invoiceCollectionID=' + this._InvoiceCollection.ObjectID, null);
            let message: string;
            if (unInvoicedExist)
                message = i18n("M16132", "İcmal içerisinde faturalandırılmamış detaylar mevcut. İcmali Kapatmak istediğinize emin misiniz?");
            else
                message = i18n("M16134", "İcmal Kapatılacak! Devam etmek istiyor musunuz?");
            let result: string = await ShowBox.Show(ShowBoxTypeEnum.Message, '&Tamam,&Vazgeç', 'OK,CANCEL', i18n("M23735", "Uyarı"), '', message);
            if (result === "OK")
                await super.setState(e.transDef, e);
        }
        else
            await super.setState(e.transDef, e);
    }

    public async onSaveChanges(e: TTObjectStateTransitionDef) {
        super.save();
    }

    // *****Method declarations end *****

    sepObjectIDs: Array<Guid> = new Array<Guid>();
    setInputParam(value: Object) {
        this.sepObjectIDs = <Array<Guid>>value;
    }

    setModalInfo(value: ModalInfo) {
        let a = value;
    }

    public initViewModel(): void {
        this._TTObject = new InvoiceCollection();
        this.invoiceCollectionBoundFormViewModel = new InvoiceCollectionBoundFormViewModel();
        this._ViewModel = this.invoiceCollectionBoundFormViewModel;
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection = this._TTObject as InvoiceCollection;
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection.InvoiceCollectionDetails = new Array<InvoiceCollectionDetail>();
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection.InvoiceTerm = new InvoiceTerm();
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection.ProvizyonTipi = new ProvizyonTipi();
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection.TedaviTuru = new TedaviTuru();
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection.TedaviTipi = new TedaviTipi();
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection.Payer = new PayerDefinition();
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection.TakipTipi = new TakipTipi();
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection.CreateUser = new ResUser();
        this.invoiceCollectionBoundFormViewModel._InvoiceCollection.LastStateUser = new ResUser();
    }

    protected loadViewModel() {
        let that = this;

        that.invoiceCollectionBoundFormViewModel = this._ViewModel as InvoiceCollectionBoundFormViewModel;
        that._TTObject = this.invoiceCollectionBoundFormViewModel._InvoiceCollection;
        if (this.invoiceCollectionBoundFormViewModel == null)
            this.invoiceCollectionBoundFormViewModel = new InvoiceCollectionBoundFormViewModel();
        if (this.invoiceCollectionBoundFormViewModel._InvoiceCollection == null)
            this.invoiceCollectionBoundFormViewModel._InvoiceCollection = new InvoiceCollection();
        that.invoiceCollectionBoundFormViewModel._InvoiceCollection.InvoiceCollectionDetails = that.invoiceCollectionBoundFormViewModel.ttgrid1GridList;
        that.invoiceCollectionBoundFormViewModel.SEPObjectIDs = that.sepObjectIDs;
        // for (let detailItem of that.invoiceCollectionBoundFormViewModel.ttgrid1GridList) {
        //     let episodeObjectID = detailItem["Episode"];
        //     if (episodeObjectID != null && (typeof episodeObjectID === 'string')) {
        //         let episode = that.invoiceCollectionBoundFormViewModel.Episodes.find(o => o.ObjectID.toString() === episodeObjectID.toString());
        //         detailItem.Episode = episode;
        //         if (episode != null) {
        //             let patientObjectID = episode["Patient"];
        //             if (patientObjectID != null && (typeof patientObjectID === 'string')) {
        //                 let patient = that.invoiceCollectionBoundFormViewModel.Patients.find(o => o.ObjectID.toString() === patientObjectID.toString());
        //                 episode.Patient = patient;
        //             }
        //         }
        //     }
        //     let payerInvoiceDocumentObjectID = detailItem["PayerInvoiceDocument"];
        //     if (payerInvoiceDocumentObjectID != null && (typeof payerInvoiceDocumentObjectID === 'string')) {
        //         let payerInvoiceDocument = that.invoiceCollectionBoundFormViewModel.PayerInvoiceDocuments.find(o => o.ObjectID.toString() === payerInvoiceDocumentObjectID.toString());
        //         detailItem.PayerInvoiceDocument = payerInvoiceDocument;
        //     }
        // }
        let invoiceTermObjectID = that.invoiceCollectionBoundFormViewModel._InvoiceCollection["InvoiceTerm"];
        if (invoiceTermObjectID != null && (typeof invoiceTermObjectID === 'string')) {
            let invoiceTerm = that.invoiceCollectionBoundFormViewModel.InvoiceTerms.find(o => o.ObjectID.toString() === invoiceTermObjectID.toString());
            if (invoiceTerm) {
                that.invoiceCollectionBoundFormViewModel._InvoiceCollection.InvoiceTerm = invoiceTerm;
            }
        }
        let provizyonTipiObjectID = that.invoiceCollectionBoundFormViewModel._InvoiceCollection["ProvizyonTipi"];
        if (provizyonTipiObjectID != null && (typeof provizyonTipiObjectID === 'string')) {
            let provizyonTipi = that.invoiceCollectionBoundFormViewModel.ProvizyonTipis.find(o => o.ObjectID.toString() === provizyonTipiObjectID.toString());
            if (provizyonTipi) {
                that.invoiceCollectionBoundFormViewModel._InvoiceCollection.ProvizyonTipi = provizyonTipi;
            }
        }
        let tedaviTuruObjectID = that.invoiceCollectionBoundFormViewModel._InvoiceCollection["TedaviTuru"];
        if (tedaviTuruObjectID != null && (typeof tedaviTuruObjectID === 'string')) {
            let tedaviTuru = that.invoiceCollectionBoundFormViewModel.TedaviTurus.find(o => o.ObjectID.toString() === tedaviTuruObjectID.toString());
            if (tedaviTuru) {
                that.invoiceCollectionBoundFormViewModel._InvoiceCollection.TedaviTuru = tedaviTuru;
            }
        }
        let tedaviTipiObjectID = that.invoiceCollectionBoundFormViewModel._InvoiceCollection["TedaviTipi"];
        if (tedaviTipiObjectID != null && (typeof tedaviTipiObjectID === 'string')) {
            let tedaviTipi = that.invoiceCollectionBoundFormViewModel.TedaviTipis.find(o => o.ObjectID.toString() === tedaviTipiObjectID.toString());
            if (tedaviTipi) {
                that.invoiceCollectionBoundFormViewModel._InvoiceCollection.TedaviTipi = tedaviTipi;
            }
        }
        let payerObjectID = that.invoiceCollectionBoundFormViewModel._InvoiceCollection["Payer"];
        if (payerObjectID != null && (typeof payerObjectID === 'string')) {
            let payer = that.invoiceCollectionBoundFormViewModel.PayerDefinitions.find(o => o.ObjectID.toString() === payerObjectID.toString());
            if (payer) {
                that.invoiceCollectionBoundFormViewModel._InvoiceCollection.Payer = payer;
            }
        }
        let takipTipiObjectID = that.invoiceCollectionBoundFormViewModel._InvoiceCollection["TakipTipi"];
        if (takipTipiObjectID != null && (typeof takipTipiObjectID === 'string')) {
            let takipTipi = that.invoiceCollectionBoundFormViewModel.TakipTipis.find(o => o.ObjectID.toString() === takipTipiObjectID.toString());
            if (takipTipi) {
                that.invoiceCollectionBoundFormViewModel._InvoiceCollection.TakipTipi = takipTipi;
            }
        }
        let createUserObjectID = that.invoiceCollectionBoundFormViewModel._InvoiceCollection["CreateUser"];
        if (createUserObjectID != null && (typeof createUserObjectID === 'string')) {
            let createUser = that.invoiceCollectionBoundFormViewModel.ResUsers.find(o => o.ObjectID.toString() === createUserObjectID.toString());
            if (createUser) {
                that.invoiceCollectionBoundFormViewModel._InvoiceCollection.CreateUser = createUser;
            }
        }
        let lastStateUserObjectID = that.invoiceCollectionBoundFormViewModel._InvoiceCollection["LastStateUser"];
        if (lastStateUserObjectID != null && (typeof lastStateUserObjectID === 'string')) {
            let lastStateUser = that.invoiceCollectionBoundFormViewModel.ResUsers.find(o => o.ObjectID.toString() === lastStateUserObjectID.toString());
            if (lastStateUser) {
                that.invoiceCollectionBoundFormViewModel._InvoiceCollection.LastStateUser = lastStateUser;
            }
        }
    }


    async ngOnInit() {

        await this.load();
        this.ICDetailGridDataSource = new DataSource(
            {
                store: new CustomStore({
                    load: async (loadOptions: any) => {
                        loadOptions.Params = {
                            invoiceCollectionID: this._InvoiceCollection.ObjectID
                        };
                        let res = await this.httpService.post<any>('/api/InvoiceCollectionService/CreateDetailGridModel', loadOptions);
                        return res;
                    }
                }),
                pageSize: 50,
                paginate: true
            }
        );
    }

    public onchkIsGeneralChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.IsGeneral != event) {
                this._InvoiceCollection.IsGeneral = event;
            }
        }
    }

    public onDateChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.Date != event) {
                this._InvoiceCollection.Date = event;
            }
        }
    }

    // public onLastPaymentDateChanged(event: any) {
    //     if (event.value != null) {
    //         let termDayDiff = Math.Round((event.value.getTime() - this.invoiceCollectionBoundFormViewModel._InvoiceCollection.DeliveredDate.getTime()) / (3600 * 1000 * 24), 0);
    //         if (termDayDiff > 0) {
    //             this.invoiceCollectionBoundFormViewModel.LastPaymentDate = event.value;
    //             this.invoiceCollectionBoundFormViewModel.TermDay = termDayDiff;
    //         }
    //         else
    //             ServiceLocator.MessageService.showError("Son Ödeme Tarihi, kuruma teslim tarihinden sonra olmalıdır.");
    //     }
    //     else {
    //         this.invoiceCollectionBoundFormViewModel.TermDay = null;
    //         this.invoiceCollectionBoundFormViewModel.LastPaymentDate = null;
    //     }
    // }

    public onTermDayChanged(event: any) {
        if (event.value != null) {
            if (event.value > 0) {
                if (this.invoiceCollectionBoundFormViewModel.LastPaymentDate == null)
                    this.invoiceCollectionBoundFormViewModel.LastPaymentDate = this.invoiceCollectionBoundFormViewModel._InvoiceCollection.DeliveredDate.AddDays(event.value);
                this.invoiceCollectionBoundFormViewModel.TermDay = event.value;
            }
            else
                ServiceLocator.MessageService.showError("Vade gün sayısı sıfırdan büyük olmalıdır.");
        }
        else {
            this.invoiceCollectionBoundFormViewModel.TermDay = null;
            this.invoiceCollectionBoundFormViewModel.LastPaymentDate = null;
        }
    }


    public onDeliveredDateChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.DeliveredDate != event) {
                this._InvoiceCollection.DeliveredDate = event;
            }
            if (this.DeliveredDate.ReadOnly == false) {
                this.TermDayReadOnly = false;
            }

            if (this.invoiceCollectionBoundFormViewModel.TermDay != null && this.invoiceCollectionBoundFormViewModel.TermDay > 0)
                this.invoiceCollectionBoundFormViewModel.LastPaymentDate = this.invoiceCollectionBoundFormViewModel._InvoiceCollection.DeliveredDate.AddDays(this.invoiceCollectionBoundFormViewModel.TermDay);
        }
        else {
            this._InvoiceCollection.DeliveredDate = null;
            this.invoiceCollectionBoundFormViewModel.TermDay = null;
            this.invoiceCollectionBoundFormViewModel.LastPaymentDate = null;
            this.TermDayReadOnly = true;
        }
    }
    public onInvoiceCollectionDateChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.Date != event) {
                this._InvoiceCollection.Date = event;
            }
        }
        else
            this._InvoiceCollection.Date = null;
    }

    public onDescriptionChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.Description != event) {
                this._InvoiceCollection.Description = event;
            }
        }
    }

    public onInvoiceTermChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.InvoiceTerm != event) {
                this._InvoiceCollection.InvoiceTerm = event;
            }
        }
    }

    public onIsAutoGeneratedChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.IsAutoGenerated != event) {
                this._InvoiceCollection.IsAutoGenerated = event;
            }
        }
    }

    public onLastStateDateChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.LastStateDate != event) {
                this._InvoiceCollection.LastStateDate = event;
            }
        }
    }

    public onNameChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.Name != event) {
                this._InvoiceCollection.Name = event;
            }
        }
    }

    public onLastStateUserChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null &&
                this._InvoiceCollection.LastStateUser != null && this._InvoiceCollection.LastStateUser.Name != event) {
                this._InvoiceCollection.LastStateUser.Name = event;
            }
        }
    }

    public onCreateUserNameResourceChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null &&
                this._InvoiceCollection.CreateUser != null && this._InvoiceCollection.CreateUser.Name != event) {
                this._InvoiceCollection.CreateUser.Name = event;
            }
        }
    }



    public onNoChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.No != event) {
                this._InvoiceCollection.No = event;
            }
        }
    }

    public onNoteChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.Note != event) {
                this._InvoiceCollection.Note = event;
            }
        }
    }

    public onProvizyonTipiChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.ProvizyonTipi != event) {
                this._InvoiceCollection.ProvizyonTipi = event;
            }
        }
    }

    public onSendingDateChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.SendingDate != event) {
                this._InvoiceCollection.SendingDate = event;
            }
        }
        else
            this._InvoiceCollection.SendingDate = null;
    }

    public onSendingNoChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.SendingNo != event) {
                this._InvoiceCollection.SendingNo = event;
            }
        }
    }

    public onTakipTipiChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.TakipTipi != event) {
                this._InvoiceCollection.TakipTipi = event;
            }
        }
    }

    public onTedaviTipiChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.TedaviTipi != event) {
                this._InvoiceCollection.TedaviTipi = event;
            }
        }
    }

    public onTedaviTuruChanged(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.TedaviTuru != event) {
                this._InvoiceCollection.TedaviTuru = event;
            }
        }
        else
            this._InvoiceCollection.TedaviTuru = event;
    }

    public onttenumcombobox1Changed(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.Type != event) {
                this._InvoiceCollection.Type = event;
            }
        }
    }

    public onttobjectlistbox1Changed(event): void {
        if (event != null) {
            if (this._InvoiceCollection != null && this._InvoiceCollection.Payer != event) {
                this._InvoiceCollection.Payer = event;
            }
        }
        else
            this._InvoiceCollection.Payer = null;
    }

    // public ontttextbox1Changed(event): void {
    //     if (event != null) {
    //         if (this._InvoiceCollection != null && this._InvoiceCollection.Capacity != event) {
    //             this._InvoiceCollection.Capacity = event;
    //         }
    //     }
    // }

    onCapacityKeyPress(event: KeyboardEvent) {
        if (event.charCode === 44 || event.charCode === 46)
            event.preventDefault();
        if (isNaN(parseInt(event.key)))
            event.preventDefault();
    }

    protected async AfterContextSavedScript(transDef: TTObjectStateTransitionDef): Promise<void> {
        super.AfterContextSavedScript(transDef);
    }

    getPricesForInvoiceCollections() {

        let priceModel: PriceDetailParameterModel = new PriceDetailParameterModel();

        if (this.SelectedDetails == null || this.SelectedDetails.length == 0) {
            ServiceLocator.MessageService.showError(i18n("M16128", "İcmal Detayı seçilmedi!"));
            return false;
        }

        this.SelectedDetails.forEach(icd => {
            priceModel.SelectedObjectIDs.push(icd.ObjectID);
        });

        let url = '/api/InvoiceCollectionService/GetPricesForInvoiceCollectionDetails';
        let that = this;
        this.httpService.post<Array<PriceDetailResultModel>>(url, priceModel).then(response => {
            response.forEach(element => {

                that.ICDetailGridDataSource.items().find(x => x.ObjectID == element.ObjectID).DrugTotal = element.DrugTotal;
                that.ICDetailGridDataSource.items().find(x => x.ObjectID == element.ObjectID).MaterialTotal = element.MaterialTotal;
                that.ICDetailGridDataSource.items().find(x => x.ObjectID == element.ObjectID).ProcedureTotal = element.ProcedureTotal;

            });
        });
    }

    async invoiceCollectionDetailOperations(invCollDetailID: Guid, operationId: number) {

        let url: string = "/api/InvoiceCollectionService/InvoiceCollectionDetailOperations";//?invCollDetailID=" + invCollDetailID + "&operationId=" + operationId;
        let batchProcessItem: InvoiceCollectionDetailBatchProcessModel = new InvoiceCollectionDetailBatchProcessModel();
        if (this.SelectedDetails != null && this.SelectedDetails.length > 0) {
            this.SelectedDetails.forEach(invCollectionDetail => {
                batchProcessItem.ObjectIDs.push(invCollectionDetail.ObjectID);
            });
            batchProcessItem.OperationID = operationId;
            batchProcessItem.InvoiceCollectionId = this._InvoiceCollection.ObjectID;
        }
        else {
            ServiceLocator.MessageService.showError(i18n("M18366", "Lütfen Detay seçiniz!"));
            return false;
        }

        let eligibleInvCollections: Array<ComboListItem> = new Array<ComboListItem>();
        let selectedCollection: ComboListItem;

        if (operationId == 3) {

            let getEligibleTermsUrl: string = '/api/InvoiceCollectionService/GetEligibleInvoiceCollectionsForChange?InvoiceCollectionID=' + this._InvoiceCollection.ObjectID;

            let x = await this.httpService.get<Array<ComboListItem>>(getEligibleTermsUrl);

            for (let item of x) {
                eligibleInvCollections.push(new ComboListItem(item.DataValue, item.DisplayText));
            }

            if (eligibleInvCollections.length > 0)
                selectedCollection = await InputForm.GetValueListItem('Taşınacak İcmal', eligibleInvCollections);
            else
                ServiceLocator.MessageService.showError("Taşıma yapılabilecek uygun İcmal bulunamadı!");

            if (selectedCollection.DataValue !== undefined && selectedCollection.DataValue != null)
                //Detayın taşındığı icmal
                batchProcessItem.NewInvoiceCollection = selectedCollection.DataValue;
            else {
                return false;
            }
        }

        this.httpService.post<InvoiceCollectionDetailBatchProcessResultModel>(url, batchProcessItem).then(result => {
            if (String.isNullOrEmpty(result._OperationStatus.CustomMessage) && result._OperationStatus.Status)
                ServiceLocator.MessageService.showSuccess(i18n("M16830", "İşlem başarılı olarak tamamlandı."));
            else if (!String.isNullOrEmpty(result._OperationStatus.CustomMessage) && result._OperationStatus.Status)
                ServiceLocator.MessageService.showInfo(result._OperationStatus.CustomMessage);
            else
                ServiceLocator.MessageService.showError(result._OperationStatus.ErrorMessage);

            //InvoiceCollectionDetailGrid operation completed
            //this.ActionExecuted.emit(true);
            if (result.GridModel != null)
                this.ICDetailGridDataSource.reload();
            //this.invoiceCollectionBoundFormViewModel.GridModel = result.GridModel;
            if (result.CancelledInvoices != null)
                this.invoiceCollectionBoundFormViewModel.CancelledInvoices = result.CancelledInvoices;
            //this.ActionExecuted.unsubscribe();
        });
    }
    // onInvDetailSelectionChanged(event: any) {
    //     var component = event.component,
    //         prevClickTime = component.lastClickTime;
    //     component.lastClickTime = new Date();
    //     if (prevClickTime && (component.lastClickTime - prevClickTime < 200)) {
    //         //Double click code
    //         let detailOpenParameters: any = {};
    //         detailOpenParameters.ObjectID = event.selectedRowsData[0].Maxsepobjectid;
    //         detailOpenParameters.Type = this.invoiceCollectionBoundFormViewModel.PayerType;
    //         this.medulaService.tabMessage.next({ Params: detailOpenParameters, Title: event.selectedRowsData[0].EpisodeNo + " " + event.selectedRowsData[0].PatientFullName });
    //     }
    // }
    onInvDetailRowClicked(event: any) {
        let component = event.component;
        let prevClickTime = component.lastClickTime;
        component.lastClickTime = new Date();
        if (prevClickTime && (component.lastClickTime - prevClickTime < 250)) {
            //Double click code
            let detailOpenParameters: any = {};
            detailOpenParameters.ObjectID = event.data.Maxsepobjectid;
            detailOpenParameters.Type = this.invoiceCollectionBoundFormViewModel.PayerType;
            this.medulaService.tabMessage.next({ Params: detailOpenParameters, Title: event.data.Episodeid + " " + event.data.Patientfullname });
        }
    }
    onContextMenuPreparingInvDetail(e: any) {
        let that = this;
        if (e.row !== undefined && e.row !== null) {
            if (e.row.rowType === "data") {
                let openStateId: string = InvoiceCollection.InvoiceCollectionStates.Open.id;
                e.items = [
                    {
                        text: 'Fatura Kayıt',
                        disabled: this.invoiceCollectionBoundFormViewModel._InvoiceCollection.CurrentStateDefID.valueOf() !== openStateId || this.invoiceCollectionBoundFormViewModel._InvoiceCollection.IsAutoGenerated,
                        onItemClick: function () {
                            //CreatePayerInvoice
                            that.invoiceCollectionDetailOperations(e.row.data.ObjectID, 0);
                        },
                    },
                    {
                        text: 'Fatura İptal',
                        disabled: this.invoiceCollectionBoundFormViewModel._InvoiceCollection.CurrentStateDefID.valueOf() !== openStateId || this.invoiceCollectionBoundFormViewModel._InvoiceCollection.IsAutoGenerated,
                        onItemClick: function () {
                            that.invoiceCollectionDetailOperations(e.row.data.ObjectID, 1);
                        },
                    },
                    {
                        text: i18n("M16147", "İcmalden Çıkar"),
                        disabled: this.invoiceCollectionBoundFormViewModel._InvoiceCollection.CurrentStateDefID.valueOf() !== openStateId || this.invoiceCollectionBoundFormViewModel._InvoiceCollection.IsAutoGenerated,
                        onItemClick: function () {
                            that.invoiceCollectionDetailOperations(e.row.data.ObjectID, 2);
                        },
                    },
                    {
                        text: i18n("M16155", "İcmale Taşı"),
                        disabled: this.invoiceCollectionBoundFormViewModel._InvoiceCollection.CurrentStateDefID.valueOf() !== openStateId || this.invoiceCollectionBoundFormViewModel._InvoiceCollection.IsAutoGenerated,
                        onItemClick: function () {
                            that.invoiceCollectionDetailOperations(e.row.data.ObjectID, 3);
                        },
                    },
                    {
                        text: i18n("M23614", "Tutarları Hesapla"),
                        disabled: false,
                        onItemClick: function () {
                            that.getPricesForInvoiceCollections();
                        },
                    }
                ];
            }
        }
    }

    protected redirectProperties(): void {
        redirectProperty(this.CreateDate, "Value", this.__ttObject, "CreateDate");
        //redirectProperty(this.Date, "Value", this.__ttObject, "Date");
        redirectProperty(this.Name, "Text", this.__ttObject, "Name");
        redirectProperty(this.InvoiceCollectionType, "Value", this.__ttObject, "Type");
        redirectProperty(this.chkIsGeneral, "Value", this.__ttObject, "IsGeneral");
        redirectProperty(this.txtCapacity, "Text", this.__ttObject, "Capacity");
        redirectProperty(this.SendingDate, "Value", this.__ttObject, "SendingDate");
        redirectProperty(this.SendingNo, "Text", this.__ttObject, "SendingNo");
        redirectProperty(this.DeliveredDate, "Value", this.__ttObject, "DeliveredDate");
        redirectProperty(this.InvoiceCollectionDate, "Value", this.__ttObject, "InvoiceCollectionDate");
        redirectProperty(this.Note, "Text", this.__ttObject, "Note");
        redirectProperty(this.Description, "Text", this.__ttObject, "Description");
        redirectProperty(this.LastStateDate, "Value", this.__ttObject, "LastStateDate");
        redirectProperty(this.NameResource, "Text", this.__ttObject, "CreateUser.Name");
        redirectProperty(this.LastStateUserName, "Text", this.__ttObject, "LastStateUser.Name");
        redirectProperty(this.IsAutoGenerated, "Value", this.__ttObject, "IsAutoGenerated");
        redirectProperty(this.No, "Text", this.__ttObject, "No");
    }

    public initFormControls(): void {
        this.InvoiceCollectionType = new TTVisual.TTEnumComboBox();
        this.InvoiceCollectionType.DataTypeName = "InvoiceCollectionTypeEnum";
        this.InvoiceCollectionType.Name = "InvoiceCollectionType";
        this.InvoiceCollectionType.TabIndex = 48;

        this.chkIsGeneral = new TTVisual.TTCheckBox();
        this.chkIsGeneral.Value = false;
        this.chkIsGeneral.Text = i18n("M14692", "Genel İcmal");
        this.chkIsGeneral.Name = "chkIsGeneral";
        this.chkIsGeneral.TabIndex = 47;

        this.lblBatchInvoice = new TTVisual.TTLabel();
        this.lblBatchInvoice.Text = i18n("M16144", "İcmal Tipi");
        this.lblBatchInvoice.Name = "lblBatchInvoice";
        this.lblBatchInvoice.TabIndex = 46;

        this.ttgrid1 = new TTVisual.TTGrid();
        this.ttgrid1.Name = "ttgrid1";
        this.ttgrid1.TabIndex = 44;
        this.ttgrid1.ReadOnly = true;
        this.ttgrid1.AllowUserToAddRows = false;
        this.ttgrid1.AllowUserToDeleteRows = false;

        this.OPENINGDATE = new TTVisual.TTDateTimePickerColumn();
        this.OPENINGDATE.DataMember = "OpeningDate";
        this.OPENINGDATE.DisplayIndex = 0;
        this.OPENINGDATE.HeaderText = i18n("M24018", "Vaka Açılış Tarihi");
        this.OPENINGDATE.Name = "OPENINGDATE";
        this.OPENINGDATE.ReadOnly = true;
        this.OPENINGDATE.Width = 110;

        this.PATIENTFULLNAME = new TTVisual.TTTextBoxColumn();
        this.PATIENTFULLNAME.DataMember = "Patient";
        this.PATIENTFULLNAME.DisplayIndex = 1;
        this.PATIENTFULLNAME.HeaderText = i18n("M10517", "Adı Soyadı");
        this.PATIENTFULLNAME.Name = "PATIENTFULLNAME";
        this.PATIENTFULLNAME.ReadOnly = true;
        this.PATIENTFULLNAME.Width = 100;

        this.EPISODENO = new TTVisual.TTTextBoxColumn();
        this.EPISODENO.DataMember = "HospitalProtocolNo";
        this.EPISODENO.DisplayIndex = 2;
        this.EPISODENO.HeaderText = "H.Protokol No";
        this.EPISODENO.Name = "EPISODENO";
        this.EPISODENO.ReadOnly = true;
        this.EPISODENO.Width = 100;

        this.UNIQUEREFNO = new TTVisual.TTTextBoxColumn();
        this.UNIQUEREFNO.DataMember = "UniqueRefNo";
        this.UNIQUEREFNO.DisplayIndex = 3;
        this.UNIQUEREFNO.HeaderText = i18n("M22944", "TC No");
        this.UNIQUEREFNO.Name = "UNIQUEREFNO";
        this.UNIQUEREFNO.ReadOnly = true;
        this.UNIQUEREFNO.Width = 100;

        this.PRICE = new TTVisual.TTTextBoxColumn();
        this.PRICE.DataMember = "GeneralTotalPrice";
        this.PRICE.DisplayIndex = 4;
        this.PRICE.HeaderText = i18n("M23606", "Tutar");
        this.PRICE.Name = "PRICE";
        this.PRICE.ReadOnly = true;
        this.PRICE.Width = 100;

        this.INVOICEDATE = new TTVisual.TTTextBoxColumn();
        this.INVOICEDATE.DataMember = "DocumentDate";
        this.INVOICEDATE.DisplayIndex = 5;
        this.INVOICEDATE.HeaderText = i18n("M14205", "Fatura Tarihi");
        this.INVOICEDATE.Name = "INVOICEDATE";
        this.INVOICEDATE.ReadOnly = true;
        this.INVOICEDATE.Width = 100;

        this.INVOICENO = new TTVisual.TTTextBoxColumn();
        this.INVOICENO.DataMember = "DocumentNo";
        this.INVOICENO.DisplayIndex = 6;
        this.INVOICENO.HeaderText = i18n("M14179", "Fatura No");
        this.INVOICENO.Name = "INVOICENO";
        this.INVOICENO.ReadOnly = true;
        this.INVOICENO.Width = 100;

        this.labelDeliveredDate = new TTVisual.TTLabel();
        this.labelDeliveredDate.Text = i18n("M18103", "Kuruma Teslim Tarihi");
        this.labelDeliveredDate.Name = "labelDeliveredDate";
        this.labelDeliveredDate.TabIndex = 43;

        this.DeliveredDate = new TTVisual.TTDateTimePicker();
        this.DeliveredDate.Format = DateTimePickerFormat.Short;
        this.DeliveredDate.Name = "DeliveredDate";
        this.DeliveredDate.TabIndex = 42;
        this.DeliveredDate.ReadOnly = false;

        this.labelInvoiceCollectionDate = new TTVisual.TTLabel();
        this.labelInvoiceCollectionDate.Text = "İcmal Tarihi";
        this.labelInvoiceCollectionDate.Name = "labelInvoiceCollectionDate";
        this.labelInvoiceCollectionDate.TabIndex = 43;

        this.InvoiceCollectionDate = new TTVisual.TTDateTimePicker();
        this.InvoiceCollectionDate.Format = DateTimePickerFormat.Short;
        this.InvoiceCollectionDate.Name = "InvoiceCollectionDate";
        this.InvoiceCollectionDate.TabIndex = 42;

        this.labelSendingDate = new TTVisual.TTLabel();
        this.labelSendingDate.Text = i18n("M20453", "Postaya Gönderim Tarihi");
        this.labelSendingDate.Name = "labelSendingDate";
        this.labelSendingDate.TabIndex = 41;

        this.SendingDate = new TTVisual.TTDateTimePicker();
        this.SendingDate.Format = DateTimePickerFormat.Short;
        this.SendingDate.Name = "SendingDate";
        this.SendingDate.TabIndex = 40;

        this.labelInvoiceTerm = new TTVisual.TTLabel();
        this.labelInvoiceTerm.Text = i18n("M13303", "Dönem");
        this.labelInvoiceTerm.Name = "labelInvoiceTerm";
        this.labelInvoiceTerm.TabIndex = 38;

        this.InvoiceTerm = <ITTListDefComboBox>{};
        this.InvoiceTerm.ListDefName = "InvoiceTermList";
        this.InvoiceTerm.Name = "InvoiceTerm";
        this.InvoiceTerm.TabIndex = 37;

        this.labelProvizyonTipi = new TTVisual.TTLabel();
        this.labelProvizyonTipi.Text = i18n("M20587", "Provizyon Tipi");
        this.labelProvizyonTipi.Name = "labelProvizyonTipi";
        this.labelProvizyonTipi.TabIndex = 36;
        this.labelProvizyonTipi.Visible = false;

        this.ProvizyonTipi = new TTVisual.TTObjectListBox();
        this.ProvizyonTipi.ListDefName = "ProvizyonTipiListDefinition";
        this.ProvizyonTipi.Name = "ProvizyonTipi";
        this.ProvizyonTipi.TabIndex = 35;
        this.ProvizyonTipi.Visible = false;

        this.labelTedaviTuru = new TTVisual.TTLabel();
        this.labelTedaviTuru.Text = i18n("M23037", "Tedavi Türü");
        this.labelTedaviTuru.Name = "labelTedaviTuru";
        this.labelTedaviTuru.TabIndex = 34;

        this.TedaviTuru = new TTVisual.TTObjectListBox();
        this.TedaviTuru.ListDefName = "TedaviTuruListDefinition";
        this.TedaviTuru.Name = "TedaviTuru";
        this.TedaviTuru.TabIndex = 33;

        this.labelTedaviTipi = new TTVisual.TTLabel();
        this.labelTedaviTipi.Text = i18n("M23033", "Tedavi Tipi");
        this.labelTedaviTipi.Name = "labelTedaviTipi";
        this.labelTedaviTipi.TabIndex = 32;
        this.labelTedaviTipi.Visible = false;

        this.TedaviTipi = new TTVisual.TTObjectListBox();
        this.TedaviTipi.ListDefName = "TedaviTipiListDefinition";
        this.TedaviTipi.Name = "TedaviTipi";
        this.TedaviTipi.TabIndex = 31;
        this.TedaviTipi.Visible = false;

        this.labelPayer = new TTVisual.TTLabel();
        this.labelPayer.Text = i18n("M18035", "Kurum Bilgisi");
        this.labelPayer.Name = "labelPayer";
        this.labelPayer.TabIndex = 30;

        this.payerObjectListBox = new TTVisual.TTObjectListBox();
        this.payerObjectListBox.ListDefName = "PayerListDefinition";
        this.payerObjectListBox.Name = "payerObjectListBox";
        this.payerObjectListBox.TabIndex = 29;

        this.labelTakipTipi = new TTVisual.TTLabel();
        this.labelTakipTipi.Text = i18n("M22673", "Takip Tipi");
        this.labelTakipTipi.Name = "labelTakipTipi";
        this.labelTakipTipi.TabIndex = 21;
        this.labelTakipTipi.Visible = false;

        this.TakipTipi = new TTVisual.TTObjectListBox();
        this.TakipTipi.ListDefName = "TakipTipiListDefinition";
        this.TakipTipi.Name = "TakipTipi";
        this.TakipTipi.TabIndex = 20;
        this.TakipTipi.Visible = false;

        this.labelNameResource = new TTVisual.TTLabel();
        this.labelNameResource.Text = i18n("M22049", "Son İşlem Yapan Kullanıcı");
        this.labelNameResource.Name = "labelNameResource";
        this.labelNameResource.TabIndex = 19;

        this.NameResource = new TTVisual.TTTextBox();
        this.NameResource.BackColor = "#F0F0F0";
        this.NameResource.ReadOnly = true;
        this.NameResource.Name = "NameResource";
        this.NameResource.TabIndex = 18;


        this.LastStateUserName = new TTVisual.TTTextBox();
        this.LastStateUserName.BackColor = "#F0F0F0";
        this.LastStateUserName.ReadOnly = true;
        this.LastStateUserName.Name = "LastStateUserName";

        this.SendingNo = new TTVisual.TTTextBox();
        this.SendingNo.Name = "SendingNo";
        this.SendingNo.TabIndex = 16;

        this.Note = new TTVisual.TTTextBox();
        this.Note.Multiline = true;
        this.Note.Name = "Note";
        this.Note.TabIndex = 14;

        this.No = new TTVisual.TTTextBox();
        this.No.BackColor = "#F0F0F0";
        this.No.ReadOnly = true;
        this.No.Name = "No";
        this.No.TabIndex = 12;

        this.Name = new TTVisual.TTTextBox();
        this.Name.Name = "Name";
        this.Name.TabIndex = 10;

        this.Description = new TTVisual.TTTextBox();
        this.Description.Multiline = true;
        this.Description.Name = "Description";
        this.Description.TabIndex = 5;

        this.txtCapacity = new TTVisual.TTTextBox();
        this.txtCapacity.Name = "txtCapacity";
        this.txtCapacity.TabIndex = 1;

        this.labelSendingNo = new TTVisual.TTLabel();
        this.labelSendingNo.Text = i18n("M20450", "Posta Gönderim No");
        this.labelSendingNo.Name = "labelSendingNo";
        this.labelSendingNo.TabIndex = 17;

        this.labelNote = new TTVisual.TTLabel();
        this.labelNote.Text = i18n("M19476", "Not");
        this.labelNote.Name = "labelNote";
        this.labelNote.TabIndex = 15;

        this.labelNo = new TTVisual.TTLabel();
        this.labelNo.Text = i18n("M16137", "İcmal Numarası");
        this.labelNo.Name = "labelNo";
        this.labelNo.TabIndex = 13;

        this.labelName = new TTVisual.TTLabel();
        this.labelName.Text = i18n("M16122", "İcmal Adı");
        this.labelName.Name = "labelName";
        this.labelName.TabIndex = 11;

        this.labelLastStateDate = new TTVisual.TTLabel();
        this.labelLastStateDate.Text = i18n("M22048", "Son İşlem Tarihi");
        this.labelLastStateDate.Name = "labelLastStateDate";
        this.labelLastStateDate.TabIndex = 9;

        this.LastStateDate = new TTVisual.TTDateTimePicker();
        this.LastStateDate.BackColor = "#F0F0F0";
        this.LastStateDate.Format = DateTimePickerFormat.Short;
        this.LastStateDate.Enabled = false;
        this.LastStateDate.ReadOnly = true;
        this.LastStateDate.Name = "LastStateDate";
        this.LastStateDate.TabIndex = 8;

        this.IsAutoGenerated = new TTVisual.TTCheckBox();
        this.IsAutoGenerated.Value = false;
        this.IsAutoGenerated.Text = i18n("M19810", "Otomatik");
        this.IsAutoGenerated.Enabled = false;
        this.IsAutoGenerated.Name = "IsAutoGenerated";
        this.IsAutoGenerated.TabIndex = 7;
        this.IsAutoGenerated.ReadOnly = true;

        this.labelDescription = new TTVisual.TTLabel();
        this.labelDescription.Text = i18n("M10469", "Açıklama");
        this.labelDescription.Name = "labelDescription";
        this.labelDescription.TabIndex = 6;

        this.labelDate = new TTVisual.TTLabel();
        this.labelDate.Text = i18n("M16143", "İcmal Tarihi");
        this.labelDate.Name = "labelDate";
        this.labelDate.TabIndex = 4;

        // this.Date = new TTVisual.TTDateTimePicker();
        // this.Date.Format = DateTimePickerFormat.Short;
        // this.Date.Name = "Date";
        // this.Date.TabIndex = 3;
        //this.Date.ReadOnly = true;

        this.CreateDate = new TTVisual.TTDateTimePicker();
        this.CreateDate.Format = DateTimePickerFormat.Short;
        this.CreateDate.Name = "CreateDate";
        this.CreateDate.TabIndex = 3;
        this.CreateDate.ReadOnly = true;

        this.labelCapacity = new TTVisual.TTLabel();
        this.labelCapacity.Text = i18n("M17251", "Kapasite");
        this.labelCapacity.Name = "labelCapacity";
        this.labelCapacity.TabIndex = 2;

        //this.ttgrid1Columns = [this.OPENINGDATE, this.PATIENTFULLNAME, this.EPISODENO, this.UNIQUEREFNO, this.PRICE, this.INVOICEDATE, this.INVOICENO];
        this.Controls = [this.InvoiceCollectionType, this.chkIsGeneral, this.lblBatchInvoice, this.ttgrid1, this.OPENINGDATE, this.PATIENTFULLNAME, this.EPISODENO, this.UNIQUEREFNO, this.PRICE, this.INVOICEDATE, this.INVOICENO, this.labelDeliveredDate, this.DeliveredDate, this.labelSendingDate, this.SendingDate, this.labelInvoiceTerm, this.InvoiceTerm, this.labelProvizyonTipi, this.ProvizyonTipi, this.labelTedaviTuru, this.TedaviTuru, this.labelTedaviTipi, this.TedaviTipi, this.labelPayer, this.payerObjectListBox, this.labelTakipTipi, this.TakipTipi, this.labelNameResource, this.NameResource, this.LastStateUserName, this.SendingNo, this.Note, this.No, this.Name, this.Description, this.txtCapacity, this.labelSendingNo, this.labelNote, this.labelNo, this.labelName, this.labelLastStateDate, this.LastStateDate, this.IsAutoGenerated, this.labelDescription, this.labelDate, this.CreateDate, this.labelCapacity];
    }

    public ttgrid1Columns = [
        {
            caption: i18n("M22936", "TC Kimlik No"),
            dataField: "UniqueRefNo",
        },
        {
            caption: i18n("M10517", "Adı Soyadı"),
            dataField: "Patientfullname",
        },
        {
            caption: i18n("M17021", "Kabul No"),
            dataField: "Episodeid",
        },
        {
            caption: i18n("M17034", "Kabul Tarihi"),
            dataField: "OpeningDate",
            format: "dd/MM/yyyy",
            dataType: "date",
        },
        {
            caption: i18n("M22659", "Takip No"),
            dataField: "Medulatakipno",
        },
        {
            caption: "Durum",
            dataField: "Status",
        },
        {
            caption: i18n("M14179", "Fatura No"),
            dataField: "Invoiceno",
        },
        {
            caption: i18n("M14205", "Fatura Tarihi"),
            dataField: "InvoiceDate",
            format: "dd/MM/yyyy",
            dataType: "date",
        },
        {
            caption: "Fatura T.",
            dataField: "Invoiceprice",
        },
        {
            caption: "Tahsilat T.",
            dataField: "Paymentprice",
        },
        {
            caption: i18n("M17511", "Kesinti T."),
            dataField: "Deduction",
        },
        {
            caption: "Hizmet T.",
            dataField: "ProcedureTotal",
        },
        {
            caption: "Malzeme T.",
            dataField: "MaterialTotal",
        },
        {
            caption: i18n("M16363", "İlaç T."),
            dataField: "DrugTotal",
        }
    ];

    public grdCancelColumns = [
        {
            caption: i18n("M22936", "TC Kimlik No"),
            dataField: "UniqueRefNo",
            width: 100
        },
        {
            caption: i18n("M10517", "Adı Soyadı"),
            dataField: "Patientfullname",
            width: 120
        },
        {
            caption: i18n("M17021", "Kabul No"),
            dataField: "Episodeid",
            width: 70
        },
        {
            caption: i18n("M17034", "Kabul Tarihi"),
            dataField: "OpeningDate",
            format: "dd/MM/yyyy",
            dataType: "date",
            width: 90
        },
        {
            caption: i18n("M22659", "Takip No"),
            dataField: "Medulatakipno",
            width: 70
        },
        {
            caption: "Durum",
            dataField: "Status",
            width: 80
        },
        {
            caption: i18n("M14179", "Fatura No"),
            dataField: "Invoiceno",
            width: 80
        },
        {
            caption: i18n("M14205", "Fatura Tarihi"),
            dataField: "InvoiceDate",
            format: "dd/MM/yyyy",
            dataType: "date",
            width: 100
        },
        {
            caption: "Fatura T.",
            dataField: "Price",
            width: 70
        },
        {
            caption: i18n("M16886", "İşlem Tarihi"),
            dataField: "Date",
            format: "dd/MM/yyyy",
            dataType: "date",
            width: 90
        },
        {
            caption: i18n("M16534", "İptal Eden"),
            dataField: "User",
            width: 100
        },
        {
            caption: i18n("M10469", "Açıklama"),
            dataField: "Description",
            width: 100
        }
    ];

}
