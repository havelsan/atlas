using Infrastructure.Filters;
using Core.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using TTDataDictionary;
using TTDefinitionManagement;
using TTInstanceManagement;
using TTObjectClasses;
using static TTObjectClasses.SubEpisodeProtocol;
using TTUtils;
using TTStorageManager.Security;
using Microsoft.AspNetCore.Mvc;
using Core.Security;
using Newtonsoft.Json;
using System.Globalization;

namespace Core.Controllers.Invoice
{
    [HvlResult]
    [Route("api/[controller]/[action]/{id?}")]
    public class InvoiceApiController : Controller
    {
        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Donem_Islemleri)]
        public InvoiceTermFormViewModel InvoiceTermForm()
        {
            var viewModel = new InvoiceTermFormViewModel();
            using (var objectContext = new TTObjectContext(true))
            {
                //viewModel.InvoiceTermList = objectContext.QueryObjects<InvoiceTerm>().ToArray();
                try
                {
                    var invoiceTermList = objectContext.QueryObjects<InvoiceTerm>().ToArray();
                    var query =
                        from i in invoiceTermList
                        select new InvoiceTermDto { ObjectID = i.ObjectID, Name = i.Name, StateDisplayText = i.CurrentStateDef.DisplayText, StartDate = (i.StartDate.HasValue ? i.StartDate.Value : DateTime.MaxValue), EndDate = (i.EndDate.HasValue ? i.EndDate.Value : DateTime.MaxValue) };
                    viewModel.InvoiceTermList = query.OrderByDescending(x => x.StartDate).ToArray();
                    objectContext.FullPartialllyLoadedObjects();
                }
                catch
                {
                    throw new TTException(TTUtils.CultureService.GetText("M25545", "Dönemler listelenirken bilinmeyen bir hata oluştu."));
                }
            }

            return viewModel;
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Donem_Islemleri)]
        public InvoiceTermFormDetailViewModel InvoiceTermFormDetail(Guid? id)
        {
            var viewModel = new InvoiceTermFormDetailViewModel();
            using (var objectContext = new TTObjectContext(false))
            {
                if (id.HasValue)
                {
                    var invoiceTerm = objectContext.GetObject<InvoiceTerm>(id.Value);
                    //TODO: AAE bu toplamlar daha sonra set edilecek. Şimdilik dumy veriler ile dolduruluyor.
                    viewModel.SonIslemiYapan = invoiceTerm.LastStateUser.Name;
                    viewModel.LastUpdateDate = invoiceTerm.LastUpdate.Value;
                    IList<InvoiceCollection.GetInvoiceCollectionByInjection_Class> invoiceCollections = InvoiceCollection.GetInvoiceCollectionByInjection(" WHERE INVOICETERM ='" + invoiceTerm.ObjectID + "'");
                    var query =
                        from ic in invoiceCollections
                        where ic.CurrentStateDefID != InvoiceCollection.States.Cancelled
                        select new InvoiceCollectionDto
                        {
                            Capacity = ic.Capacity,
                            Date = ic.Date, //InvoiceCollectionDetails = ic.InvoiceCollectionDetails,
                            InvoiceTerm = invoiceTerm,
                            IsAutoGenerated = ic.IsAutoGenerated, //LastStateDate = ic.LastStateDate,
                                                                  //LastStateUser = ic.LastStateUser.Name,
                            Name = ic.Name,
                            No = ic.No.Value,
                            Payer = objectContext.GetObject<PayerDefinition>(ic.Payer.Value), //HizmetTutari = 1,
                                                                                              //IlacTutari = 2,
                                                                                              //arfTutari = 3,
                            FaturaSayisi = ic.Invoicecount != null ? Convert.ToInt32(ic.Invoicecount) : 0,
                            StateDisplayText = ic.Statedisplaytext != null ? ic.Statedisplaytext.ToString() : string.Empty,
                            InvoicePrice = ic.Invoiceprice != null ? Convert.ToDecimal(ic.Invoiceprice) : 0,
                            ObjectID = ic.ObjectID,
                            Deduction = ic.Deduction != null ? Convert.ToDecimal(ic.Deduction) : 0,
                            PaymentPrice = ic.Paymentprice != null ? Convert.ToDecimal(ic.Paymentprice) : 0
                        };
                    //viewModel.HizmetTutari = query.Sum(a => a.HizmetTutari);
                    //viewModel.IlacTutari = query.Sum(a => a.IlacTutari);
                    //viewModel.SarfTutari = query.Sum(a => a.SarfTutari);
                    viewModel.InvoicePrice = query.Sum(a => a.InvoicePrice);
                    viewModel.FaturaSayisi = query.Sum(a => a.FaturaSayisi);
                    //viewModel.ProcedureTotal = query.Sum(a => a.ProcedureTotal);
                    //viewModel.MaterialTotal = query.Sum(a => a.MaterialTotal);
                    //viewModel.DrugTotal = query.Sum(a => a.DrugTotal);
                    viewModel.InvoiceCollectionList = query.ToArray();
                    objectContext.FullPartialllyLoadedObjects();
                }
            }

            return viewModel;
        }

        //[HttpGet]
        //public InvoiceCollectionDetailModelDto InvoiceCollectionSearchFormDetail(Guid? id)
        //{
        //    var viewModel = new InvoiceCollectionDetailModelDto();
        //    using (var objectContext = new TTObjectContext(false))
        //    {
        //        if (id.HasValue)
        //        {
        //            var invoiceCollection = objectContext.GetObject<InvoiceCollection>(id.Value);
        //            //TODO: AAE bu toplamlar daha sonra set edilecek. Şimdilik dumy veriler ile dolduruluyor.
        //            var query =
        //                from icd in invoiceCollection.InvoiceCollectionDetails.Select("") select new InvoiceCollectionDetailListDto { CreateDate = icd.CreateDate, PatientName = icd.SubEpisodeProtocols.Select("").FirstOrDefault().SubEpisode.Episode.Patient.FullName };
        //            viewModel.HizmetToplami = "1";
        //            viewModel.IlacToplami = "2";
        //            viewModel.SarfToplami = "3";
        //            viewModel.InvoiceCollectionDetailList = query.ToArray();
        //            objectContext.FullPartialllyLoadedObjects();
        //        }
        //    }

        //    return viewModel;
        //}

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Donem_Olusturma_ve_Guncelleme)]
        public bool InvoiceTermActions([FromQuery] Guid? id, [FromQuery] int action)
        {
            //SONDATA<bool> result = new JSONDATA<bool>();
            using (var objectContext = new TTObjectContext(false))
            {
                if (id.HasValue && id != Guid.Empty)
                {
                    var invoiceTerm = objectContext.GetObject<InvoiceTerm>(id.Value);
                    switch (action)
                    {
                        //Açma işlemi
                        case 0:
                            invoiceTerm.Open();
                            break;
                        //İptal işlemi
                        case 1:
                            invoiceTerm.Cancel();
                            break;
                        //Kilitleme işlemi
                        case 2:
                            invoiceTerm.Lock();
                            break;
                        //Kapatma işlemi
                        case 3:
                            invoiceTerm.Close();
                            break;
                        default:
                            break;
                    }
                }
                else
                {
                    if (action == -1)
                        InvoiceTerm.Create(objectContext);
                }

                objectContext.FullPartialllyLoadedObjects();
                objectContext.Save();
            }

            return true;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Icmal_Islemleri)]
        public InvoiceCollectionSearchResultModel[] InvoiceCollectionSearch(InvoiceCollectionSearchModel icsm)
        {
            InvoiceCollectionSearchResultModel[] result;

            using (var objectContext = new TTObjectContext(true))
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(" WHERE 1 = 1 ");

                if (icsm.Term.HasValue) // Dönem
                    sb.AppendLine(" AND INVOICETERM = '" + icsm.Term.Value.ToString() + "'");

                if (icsm.Payer.HasValue) // Kurum
                    sb.AppendLine(" AND PAYER = '" + icsm.Payer.Value.ToString() + "'");

                if (icsm.TedaviTuru.HasValue) // Tedavi Türü
                    sb.AppendLine(" AND TEDAVITURU = '" + icsm.TedaviTuru.Value.ToString() + "'");

                if (!string.IsNullOrWhiteSpace(icsm.State)) // Durum
                    sb.AppendLine(" AND CURRENTSTATE = STATES." + Enum.GetName(typeof(InvoiceCollectionStateEnum), Convert.ToUInt16(icsm.State)));

                if (icsm.ICFirstDate.HasValue) // İcmal Tarihi (Başlangıç)
                {
                    string icFirstDate = Convert.ToDateTime(icsm.ICFirstDate.Value.ToShortDateString() + " 00:00:00").ToString("yyyy-MM-dd HH:mm:ss");
                    sb.AppendLine(" AND DATE >= TODATE('" + icFirstDate + "')");
                }

                if (icsm.ICLastDate.HasValue) // İcmal Tarihi (Bitiş)
                {
                    string icLastDate = Convert.ToDateTime(icsm.ICLastDate.Value.ToShortDateString() + " 23:59:59").ToString("yyyy-MM-dd HH:mm:ss");
                    sb.AppendLine(" AND DATE <= TODATE('" + icLastDate + "')");
                }

                if (icsm.ICPostFirstDate.HasValue) // İcmal Gönderim Tarihi (Başlangıç)
                {
                    string icPostFirstDate = Convert.ToDateTime(icsm.ICPostFirstDate.Value.ToShortDateString() + " 00:00:00").ToString("yyyy-MM-dd HH:mm:ss");
                    sb.AppendLine(" AND SENDINGDATE >= TODATE('" + icPostFirstDate + "')");
                }

                if (icsm.ICPostLastDate.HasValue) // İcmal Gönderim Tarihi (Bitiş)
                {
                    string icPostLastDate = Convert.ToDateTime(icsm.ICPostLastDate.Value.ToShortDateString() + " 23:59:59").ToString("yyyy-MM-dd HH:mm:ss");
                    sb.AppendLine(" AND SENDINGDATE <= TODATE('" + icPostLastDate + "') ");
                }

                if (!string.IsNullOrWhiteSpace(icsm.ICNo)) // İcmal No
                    sb.AppendLine(" AND NO = " + icsm.ICNo);

                if (!string.IsNullOrWhiteSpace(icsm.ICPostNo)) // Gönderim No
                    sb.AppendLine(" AND SENDINGNO = '" + icsm.ICPostNo + "'");

                if (!string.IsNullOrWhiteSpace(icsm.ICFirstPrice)) // İcmal Tutarı (Başlangıç)
                    sb.AppendLine(" AND INVOICECOLLECTIONDETAILS(CURRENTSTATE IN (STATES.INVOICED, STATES.PARTIALPAID, STATES.PAID)).SUM((SUBEPISODEPROTOCOLS.MEDULAFATURATUTARI)) >= " + icsm.ICFirstPrice);

                if (!string.IsNullOrWhiteSpace(icsm.ICLastPrice)) // İcmal Tutarı (Bitiş)
                    sb.AppendLine(" AND INVOICECOLLECTIONDETAILS(CURRENTSTATE IN (STATES.INVOICED, STATES.PARTIALPAID, STATES.PAID)).SUM((SUBEPISODEPROTOCOLS.MEDULAFATURATUTARI)) <= " + icsm.ICLastPrice);

                sb.AppendLine(" AND (CREATEUSER = '" + TTUser.CurrentUser.TTObjectID.Value + "' OR ISGENERAL = 1)");

                BindingList<InvoiceCollection.GetInvoiceCollectionByInjection_Class> tempList = InvoiceCollection.GetInvoiceCollectionByInjection(objectContext, sb.ToString());

                var query =
                    from tl in tempList
                    select new InvoiceCollectionSearchResultModel { ObjectID = tl.ObjectID, No = tl.No, Name = tl.Name, Date = tl.Date, StateDisplayText = tl.Statedisplaytext != null ? tl.Statedisplaytext.ToString() : "", Payer = new listboxObject(null, tl.Payername, null), InvoiceCount = Convert.ToInt32(tl.Invoicecount), InvoicePrice = tl.Invoiceprice != null ? tl.Invoiceprice.ToString() : "", PaymentPrice = tl.Paymentprice != null ? tl.Paymentprice.ToString() : "", Deduction = tl.Deduction != null ? tl.Deduction.ToString() : "", TermName = tl.Invoicetermname };

                result = query.ToArray();
            }

            return result;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Donem_Islemleri, TTRoleNames.Fatura_Icmal_Islemleri)]
        public List<PriceDetailResultModel> GetPricesForInvoiceCollections(PriceDetailParameterModel invoiceCollectionIDs)
        {
            if (invoiceCollectionIDs.SelectedObjectIDs.Count <= 0)
                throw new TTException(TTUtils.CultureService.GetText("M26006", "İcmal seçilmedi!"));
            string filterExpression = string.Empty;
            filterExpression = " AND SUBEPISODEPROTOCOL.INVOICECOLLECTIONDETAIL.INVOICECOLLECTION IN (";
            foreach (Guid id in invoiceCollectionIDs.SelectedObjectIDs)
            {
                filterExpression += "'" + id + "',";
            }

            filterExpression = filterExpression.Remove(filterExpression.Length - 1, 1);
            filterExpression += ")";
            filterExpression += " AND AccountPayableReceivable.Type = ";
            filterExpression += "1";
            using (TTObjectContext objectContext = new TTObjectContext(false))
            {
                return AccountTransaction.GetPricesForInvoiceCollection(objectContext, filterExpression).GroupBy(x => x.InvoiceCollection.Value).Select(g => new PriceDetailResultModel { ObjectID = g.First().InvoiceCollection.Value, DrugTotal = g.Sum(d => (decimal)d.Drugtotal), MaterialTotal = g.Sum(m => (decimal)m.Materialtotal), ProcedureTotal = g.Sum(p => (decimal)p.Proceduretotal), }).ToList();
                //AccountTransaction.GetPricesForInvoiceCollection(objectContext, APRTypeEnum.PAYER, filterExpression).ToList();
            }
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public List<listboxObject> GetInvoiceErrorCodes(InvoiceSEPSearchCriteria input)
        {
            List<listboxObject> result = new List<listboxObject>();
            using (var objectContext = new TTObjectContext(true))
            {
                int errorType = 0;
                if (input.status.Contains((int)MedulaSubEpisodeStatusEnum.InvoiceEntryWithError) || input.status.Contains((int)MedulaSubEpisodeStatusEnum.InvoiceReadWithError))
                    errorType = 1;
                else if (input.status.Contains((int)MedulaSubEpisodeStatusEnum.ProcedureEntryWithError))
                    errorType = 2;


                StringBuilder sb = SubEpisodeProtocol.InvoiceSEPSearchFilter(input, objectContext);
                List<SubEpisodeProtocol.GetErrorByInjection_Class> errorList = SubEpisodeProtocol.GetErrorByInjection(errorType, " AND " + sb.ToString()).ToList();
                List<string> paramCodes = errorList.Select(x => x.Sonuckodu).ToList();
                BindingList<MedulaErrorCodeDefinition> resultList = MedulaErrorCodeDefinition.GetMedulaErrorByCodes(objectContext, paramCodes);

                foreach (MedulaErrorCodeDefinition item in resultList)
                {
                    listboxObject tempItem = new listboxObject();
                    tempItem.ObjectID = item.ObjectID;
                    tempItem.Code = item.Code;
                    tempItem.Name = "[" + item.Code + "](" + errorList.FirstOrDefault(x => x.Sonuckodu == item.Code).Sayi.ToString() + ")" + item.Message;
                    result.Add(tempItem);
                }
            }
            return result.OrderBy(x => x.Code).ToList();
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public List<listboxObject> GetBannedStates(InvoiceSEPSearchCriteria input)
        {
            List<listboxObject> result = new List<listboxObject>();
            using (var objectContext = new TTObjectContext(true))
            {

                List<InvoiceBlockingDefinition> blockDefs = InvoiceBlockingDefinition.GetInvoiceBlockDef();
                foreach (InvoiceBlockingDefinition item in blockDefs)
                {
                    listboxObject tempItem = new listboxObject();
                    tempItem.ObjectID = item.StateDefId;
                    tempItem.Code = item.ObjectID.ToString();
                    tempItem.Name = "[" + item.ObjectName + "] " + item.StateName;
                    result.Add(tempItem);
                }
            }
            return result.OrderBy(x => x.Name).ToList();
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public List<listboxObject> GetSpecificInvoiceErrorCodes(InvoiceSEPSearchCriteria input)
        {
            List<listboxObject> result = new List<listboxObject>();
            using (var objectContext = new TTObjectContext(true))
            {
                if (input.FirstSelectErrorCode.HasValue && input.FirstSelectErrorCode.Value != Guid.Empty)
                {
                    MedulaErrorCodeDefinition mecd = objectContext.GetObject<MedulaErrorCodeDefinition>(input.FirstSelectErrorCode.Value) as MedulaErrorCodeDefinition;
                    if (mecd != null && mecd.Code == "1108")
                    {
                        int errorType = 0;
                        if (input.status.Contains((int)MedulaSubEpisodeStatusEnum.InvoiceEntryWithError) || input.status.Contains((int)MedulaSubEpisodeStatusEnum.InvoiceReadWithError))
                            errorType = 1;
                        else if (input.status.Contains((int)MedulaSubEpisodeStatusEnum.ProcedureEntryWithError))
                            errorType = 2;


                        StringBuilder sb = SubEpisodeProtocol.InvoiceSEPSearchFilter(input, objectContext);
                        List<SubEpisodeProtocol.GetErrorMessageByInjection_Class> errorList = SubEpisodeProtocol.GetErrorMessageByInjection(errorType, " AND " + sb.ToString()).ToList();
                        List<string> tempList = new List<string>();
                        foreach (var item in errorList)
                        {
                            string[] tempSplittedMessage = item.Sonucmesaji.Split(' ');
                            if (item.Sayi != null)
                                for (int i = 0; i < Convert.ToInt32(item.Sayi); i++)
                                {
                                    tempList.Add(tempSplittedMessage[7] + "-" + tempSplittedMessage[14]);
                                }
                        }
                        foreach (var item in tempList.GroupBy(x => x).ToDictionary(g => g.Key, g => g.Count()))
                        {
                            listboxObject tempItem = new listboxObject();
                            tempItem.Code = item.Key;
                            string[] splittedCode = tempItem.Code.Split('-');
                            PricingDetailDefinition.GetPricingDetailDefinitions_Class firstPD = PricingDetailDefinition.GetPricingDetailDefinitions(" WHERE EXTERNALCODE = '" + splittedCode[0] + "' ORDER BY DATESTART desc ").FirstOrDefault();
                            PricingDetailDefinition.GetPricingDetailDefinitions_Class secondPD = PricingDetailDefinition.GetPricingDetailDefinitions(" WHERE EXTERNALCODE = '" + splittedCode[1] + "' ORDER BY DATESTART desc ").FirstOrDefault();
                            tempItem.Name = "(" + item.Value + ") " + firstPD.ExternalCode + "-" + PrepareProcedureNameWithFirstAndLastTen(firstPD.Description) + " / " + secondPD.ExternalCode + "-" + PrepareProcedureNameWithFirstAndLastTen(secondPD.Description);
                            result.Add(tempItem);
                        }
                    }
                    else if (mecd != null && (mecd.Code == "1299" || mecd.Code == "1030" || mecd.Code == "1692"))
                    {
                        List<SubEpisodeProtocol.GetTrxCodeAndNameByInjection_Class> codeAndNameList = null;
                        StringBuilder sb = SubEpisodeProtocol.InvoiceSEPSearchFilter(input, objectContext);
                        if (mecd.Code == "1299" || mecd.Code == "1030")
                            codeAndNameList = SubEpisodeProtocol.GetTrxCodeAndNameByInjection(" AND " + sb.ToString() + " AND ACCOUNTTRANSACTIONS.CURRENTSTATE = STATES.MEDULAENTRYUNSUCCESSFUL AND ACCOUNTTRANSACTIONS.MEDULARESULTCODE = '" + mecd.Code + "'").ToList();
                        else
                            codeAndNameList = SubEpisodeProtocol.GetTrxCodeAndNameByInjection(" AND " + sb.ToString() + " AND ACCOUNTTRANSACTIONS.NABIZRESULTCODE = '" + mecd.Code + "'").ToList();

                        foreach (var item in codeAndNameList)
                        {
                            listboxObject tempItem = new listboxObject();
                            tempItem.Code = item.Code;
                            tempItem.Name = "(" + item.Sayi + ")-[" + item.Code + "] " + item.Name;
                            result.Add(tempItem);
                        }
                    }

                }
                else if (input.BannedState.HasValue && input.BannedState.Value != Guid.Empty)
                {
                    StringBuilder sb = SubEpisodeProtocol.InvoiceSEPSearchFilter(input, objectContext);
                    string tempNQL = @" AND " + sb.ToString() + " AND ACCOUNTTRANSACTIONS.CURRENTSTATE <> STATES.CANCELLED " +
                        " AND  ACCOUNTTRANSACTIONS.CURRENTSTATE <> STATES.MEDULADONTSEND  AND ( ACCOUNTTRANSACTIONS.SUBACTIONPROCEDURE.CURRENTSTATEDEFID = '" + input.BannedState.Value + "' " +
                        " OR ACCOUNTTRANSACTIONS.SUBACTIONPROCEDURE.EPISODEACTION.CURRENTSTATEDEFID = '" + input.BannedState.Value + "' ) ";
                    List<SubEpisodeProtocol.GetTrxCodeAndNameByInjection_Class> codeAndNameList = SubEpisodeProtocol.GetTrxCodeAndNameByInjection(tempNQL).ToList();
                    foreach (var item in codeAndNameList)
                    {
                        listboxObject tempItem = new listboxObject();
                        tempItem.Code = item.Code;
                        tempItem.Name = "(" + item.Sayi + ")-[" + item.Code + "] " + item.Name;
                        result.Add(tempItem);
                    }
                }
            }
            return result.OrderBy(x => x.Code).ToList();
        }

        public string PrepareProcedureNameWithFirstAndLastTen(string _name)
        {
            if (_name.Length > 20)
            {
                string firstTen = _name.Substring(0, 10);
                string lastTen = _name.Substring(_name.Length - 10, 10);
                return firstTen + "..." + lastTen;
            }
            else
                return _name;
        }
        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        //InvoiceSEPSearchCriteria issc
        public LoadResult InvoiceSEPSearch(DataSourceLoadOptions loadOptions, int? fromType = null) //fromType == 1 CollectiveOperation
        {
            LoadResult result = null;
            InvoiceSEPSearchCriteria issc = JsonConvert.DeserializeObject<InvoiceSEPSearchCriteria>(loadOptions.Params.InvoiceSEPSearchCriteria.ToString());
            using (var objectContext = new TTObjectContext(true))
            {
                StringBuilder sb = SubEpisodeProtocol.InvoiceSEPSearchFilter(issc, objectContext);

                int typeAPR = 1;
                if (issc.InvoiceSearchType == (int)PayerTypeEnum.Paid)
                    typeAPR = (int)APRTypeEnum.PATIENT;
                if (issc.searchResultType == "Takip")
                {
                    TTQueryDef queryDef = TTObjectDefManager.Instance.ObjectDefs["SubEpisodeProtocol"].QueryDefs["GetSEPByInjection"];
                    Dictionary<string, object> paramList = new Dictionary<string, object>();
                    paramList.Add("TYPE", typeAPR);

                    result = DevexpressLoader.Load(objectContext, queryDef, loadOptions, paramList, sb.ToString(), "OBJECTID");

                    //if (loadOptions.Group == null)
                    //{
                    //    List<object> summary = new List<object>();
                    //    summary.Add(new { selector = "Id", value = result.totalCount });
                    //    //summary.Add(new { selector = "Hbystutari", value = prices[0].Hbystutari });
                    //    //summary.Add(new { selector = "MedulaFaturaTutari", value = prices[0].Medulafaturatutari });
                    //    result.summary = summary.ToArray();
                    //}
                }
                else
                {
                    TTQueryDef queryDef = TTObjectDefManager.Instance.ObjectDefs["SubEpisodeProtocol"].QueryDefs["GetEpisodeByInjection"];
                    Dictionary<string, object> paramList = new Dictionary<string, object>();
                    result = DevexpressLoader.Load(objectContext, queryDef, loadOptions, paramList, sb.ToString());

                }
            }

            return result;
        }

        private int ConvertEnumValueToIntValue(Type e, string value)
        {
            foreach (var item in Enum.GetValues(e))
            {
                if (item.ToString() == value)
                    return (int)item;
            }

            return 0;
        }

        private LoadResult LoadInvoiceSEPTransactionListModel(DataSourceLoadOptions loadOptions, LoadInvoiceFormModel lifm)
        {
            using (TTObjectContext objectContext = new TTObjectContext(true))
            {
                LoadResult result = null;
                int transactionType;
                if (lifm.type == (int)PayerTypeEnum.Paid)
                    transactionType = (int)APRTypeEnum.PATIENT;
                else
                    transactionType = (int)APRTypeEnum.PAYER;
                List<Guid> blockStates = InvoiceBlockingDefinition.GetBlockStateIDs(transactionType, objectContext);

                List<Guid> procedureStateIDs = new List<Guid>();
                procedureStateIDs.Add(SubActionProcedure.States.Cancelled);
                procedureStateIDs.Add(SubActionProcedure.States.Completed);
                procedureStateIDs.Add(SubActionProcedure.States.New);

                Guid SurgeryProcedureObjectDefId = Guid.Parse("92532fda-beeb-47e4-9dc5-be36a6eabf8a");
                Guid MainSurgeryProcedureObjectDefId = Guid.Parse("2addf04b-71a1-4fe9-87e0-0fdf90dad155");    // Base i SurgeryProcedure
                Guid SubSurgeryProcedureObjectDefId = Guid.Parse("44e2477b-b407-4789-bb25-276774cc401d");     // Base i SurgeryProcedure
                Guid SurgeryPackageProcedureObjectDefId = Guid.Parse("146c0541-4b54-4de8-8483-be7accc702ac");
                Guid PMAddingProcedureDefId = Guid.Parse("8b5dbbd3-290c-4384-86df-6b0e1780169c");
                Guid SubactionPackageProcedureDefId = Guid.Parse("3a0a421e-1b0e-4cbe-a11f-34ea70ee2f84");

                TTQueryDef queryDef = TTObjectDefManager.Instance.ObjectDefs["AccountTransaction"].QueryDefs["GetTransactionsForInvoiceBySEP"];
                Dictionary<string, object> paramList = new Dictionary<string, object>();
                paramList.Add("SEP", lifm.id);
                paramList.Add("APRTYPE", transactionType);
                paramList.Add("BLOCKSTATES", blockStates);

                #region TransActionDate ve CurrentStateDefID SQLInjection
                //Grid'in filtresi dışında örn:bir checkbox'a tıklanarak filtre uygulanmak isteniyorsa bu filtre sunucu tarafında uyglanıyor. 
                //(devextreme --> remoteoperations --> filtering başlığı alatında açıklaması mevcut)
                string incjectSQL = string.Empty;
                bool stateAdded = false;
                if (!string.IsNullOrEmpty(lifm.Statetext))
                {
                    incjectSQL += " CURRENTSTATEDEFID  <> '" + AccountTransaction.States.MedulaDontSend + "'";
                    stateAdded = true;
                }
                if (lifm.InPatientDate.HasValue || lifm.DischargeDate.HasValue)
                {
                    if (!string.IsNullOrEmpty(incjectSQL))
                        incjectSQL += " AND ";
                    if (lifm.InPatientDate.HasValue && !lifm.DischargeDate.HasValue)
                    {
                        incjectSQL += " TODATE(TransActionDate)  = TODATE('" + lifm.InPatientDate.Value.ToString("dd.MM.yyyy") + "')";
                    }
                    else if (!lifm.InPatientDate.HasValue && lifm.DischargeDate.HasValue)
                    {
                        incjectSQL += " TODATE(TransActionDate)  = TODATE('" + lifm.DischargeDate.Value.ToString("dd.MM.yyyy") + "')";
                    }
                    else if (lifm.InPatientDate.HasValue && lifm.DischargeDate.HasValue)
                    {
                        incjectSQL += " (TODATE(TransActionDate)  = TODATE('" + lifm.InPatientDate.Value.ToString("dd.MM.yyyy") + "')";
                        incjectSQL += "OR TODATE(TransActionDate)  = TODATE('" + lifm.DischargeDate.Value.ToString("dd.MM.yyyy") + "'))";
                    }
                }
                if (lifm.Nabiz700Status.HasValue && lifm.Nabiz700Status.Value == 2)//Hatalı nabiz durumundakileri getirir.
                {
                    if (!string.IsNullOrEmpty(incjectSQL))
                        incjectSQL += " AND ";

                    incjectSQL += " NABIZ700STATUS = 2 ";
                }
                //if (lifm.BlockingStatus.HasValue && lifm.BlockingStatus.Value)//Fatura Engeli Varı getirir.
                //{
                //    if (!string.IsNullOrEmpty(incjectSQL))
                //        incjectSQL += " AND ";

                //    incjectSQL += " BLOCKING = 1 ";
                //}
                #endregion

                //BindingList<AccountTransaction.GetTransactionsForInvoiceBySEP_Class> accTrxList = AccountTransaction.GetTransactionsForInvoiceBySEP(objectContext, sepObjectID, APRType, blockStates);
                List<InvoiceSEPTransactionListModel> resultData = new List<InvoiceSEPTransactionListModel>();
                if (loadOptions.Group == null)
                {
                    result = DevexpressLoader.Load(objectContext, queryDef, loadOptions, paramList, incjectSQL, "OBJECTID");
                    foreach (var accTrx in result.GetData<AccountTransaction.GetTransactionsForInvoiceBySEP_Class>())
                    {
                        InvoiceSEPTransactionListModel istlm = new InvoiceSEPTransactionListModel();
                        istlm.ObjectID = accTrx.ObjectID.Value;
                        istlm.Basetype = accTrx.Basetype.ToString();
                        istlm.Medulatype = accTrx.Medulatype != null ? accTrx.Medulatype.ToString() : string.Empty;
                        istlm.Id = accTrx.Id.ToString();
                        istlm.Statetext = accTrx.Statetext.ToString();
                        istlm.ExternalCode = accTrx.ExternalCode == null ? string.Empty : accTrx.ExternalCode;
                        istlm.Description = accTrx.Description;
                        istlm.TransactionDate = Convert.ToDateTime(accTrx.TransactionDate.Value.ToString("dd.MM.yyyy"));
                        istlm.Unitprice = Convert.ToDecimal(accTrx.Unitprice);
                        istlm.Amount = accTrx.Amount.Value;
                        istlm.Totalprice = Convert.ToDecimal(accTrx.Totalprice);
                        istlm.MedulaProcessNo = accTrx.MedulaProcessNo;
                        istlm.MedulaPrice = accTrx.MedulaPrice;
                        istlm.AppDate = accTrx.Appdate != null ? Convert.ToDateTime(accTrx.Appdate).ToString("dd.MM.yyyy") : "";
                        //istlm.Blocking = accTrx.Blocking != null && accTrx.CurrentStateDefID.Value != AccountTransaction.States.MedulaDontSend ? Convert.ToBoolean(accTrx.Blocking) : false;
                        istlm.Blocking = accTrx.Blocking != null ? Convert.ToBoolean(accTrx.Blocking) : false;

                        //if (accTrx.MedulaPrice.HasValue && accTrx.MedulaPrice.Value - istlm.Totalprice != 0)
                        istlm.Diffprice = Convert.ToDouble(accTrx.Diffprice);
                        //istlm.DiffPrice = accTrx.MedulaPrice.HasValue ?  (accTrx.MedulaPrice.Value - istlm.TotalPrice).ToString(): null;

                        istlm.InvoiceInclusion = accTrx.InvoiceInclusion.Value;
                        istlm.MedulaResultCode = accTrx.MedulaResultCode == null ? string.Empty : accTrx.MedulaResultCode;
                        istlm.MedulaResultMessage = accTrx.MedulaResultMessage == null ? string.Empty : accTrx.MedulaResultMessage;
                        istlm.CurrentStateDefID = accTrx.CurrentStateDefID.Value;
                        istlm.OzelDurum = accTrx.OzelDurum;
                        istlm.AyniFarkliKesi = accTrx.AyniFarkliKesi;
                        istlm.MedulaReportNo = accTrx.MedulaReportNo;//string.Empty; // TODO : Mustafa Medula Rapor No getirilecek. 
                        istlm.MedulaBedNo = accTrx.MedulaBedNo != null ? accTrx.MedulaBedNo.ToString() : string.Empty;//string.Empty; // TODO : Mustafa Medula Yatak No getirilecek. 

                        if (accTrx.Procedurestateid != null)
                        {
                            if (procedureStateIDs.Contains(new Guid(accTrx.Procedurestateid.ToString())))
                                istlm.ProcedureState = accTrx.Eastate != null ? accTrx.Eastate.ToString() : string.Empty;
                            else
                                istlm.ProcedureState = accTrx.Procedurestate != null ? accTrx.Procedurestate.ToString() : string.Empty;
                        }
                        //istlm.Doctor = accTrx.Acctrxdoctor.HasValue ? accTrx.Acctrxdoctor.Value : accTrx.Doctor;
                        if (accTrx.Doctor != null)
                            istlm.Doctor = new Guid(accTrx.Doctor.ToString());

                        istlm.Suttype = accTrx.Suttype != null ? accTrx.Suttype.ToString() : string.Empty;

                        if (accTrx.Totalpayment != null)
                            istlm.Totalpayment = Convert.ToDecimal(accTrx.Totalpayment);

                        if (accTrx.UTSUsageCommitment.HasValue)
                            istlm.UTSUsageCommitment = accTrx.UTSUsageCommitment.Value;

                        if (accTrx.Spobjectid.HasValue && accTrx.Spobjectdefid.HasValue)
                        {
                            if (accTrx.Spobjectdefid.Value.Equals(SurgeryProcedureObjectDefId) ||
                                accTrx.Spobjectdefid.Value.Equals(MainSurgeryProcedureObjectDefId) ||
                                accTrx.Spobjectdefid.Value.Equals(SubSurgeryProcedureObjectDefId))
                            {
                                SurgeryProcedure sp = objectContext.GetObject<SurgeryProcedure>(accTrx.Spobjectid.Value, false);
                                if (sp != null)
                                {
                                    if (sp.ProcedureObject is SurgeryDefinition && (sp.ProcedureObject as SurgeryDefinition).SUTGroup.HasValue)
                                    {
                                        istlm.SurgerySutGroup = Common.GetDisplayTextOfDataTypeEnum((sp.ProcedureObject as SurgeryDefinition).SUTGroup.Value);
                                    }
                                    if (sp.Position.HasValue)//Ameliyat üzerinde varsa bu bilgi bu olsun yoksa altta acctrx ten alınacak.
                                        istlm.Position = (int)sp.Position.Value;
                                }
                            }
                            else if (accTrx.Spobjectdefid.Value.Equals(SurgeryPackageProcedureObjectDefId))
                            {
                                SurgeryPackageProcedure spp = objectContext.GetObject<SurgeryPackageProcedure>(accTrx.Spobjectid.Value, false);
                                if (spp != null && spp.SurgeryProcedure != null)
                                {
                                    if (spp.SurgeryProcedure.ProcedureObject is SurgeryDefinition && (spp.SurgeryProcedure.ProcedureObject as SurgeryDefinition).SUTGroup.HasValue)
                                    {
                                        istlm.SurgerySutGroup = Common.GetDisplayTextOfDataTypeEnum((spp.SurgeryProcedure.ProcedureObject as SurgeryDefinition).SUTGroup.Value);
                                    }
                                    if (spp.SurgeryProcedure.Position.HasValue)
                                        istlm.Position = (int)spp.SurgeryProcedure.Position.Value;
                                }
                            }
                            else if (accTrx.Spobjectdefid.Value.Equals(PMAddingProcedureDefId))
                            {
                                SubActionProcedure sap = objectContext.GetObject<SubActionProcedure>(accTrx.Spobjectid.Value, false);
                                if (sap != null && sap.ProcedureObject is SurgeryDefinition && (sap.ProcedureObject as SurgeryDefinition).SUTGroup.HasValue)
                                {
                                    istlm.SurgerySutGroup = Common.GetDisplayTextOfDataTypeEnum((sap.ProcedureObject as SurgeryDefinition).SUTGroup.Value);
                                    //if (spp.SurgeryProcedure.Position.HasValue)
                                    //    istlm.Position = Common.GetDisplayTextOfDataTypeEnum(spp.SurgeryProcedure.Position.Value);
                                }
                            }
                            else if (accTrx.Spobjectdefid.Value.Equals(SubactionPackageProcedureDefId))
                            {
                                SubActionPackageProcedure sapp = objectContext.GetObject<SubActionPackageProcedure>(accTrx.Spobjectid.Value, false);
                                if (sapp != null && sapp.SagSol != null)
                                {
                                    istlm.Position = Convert.ToInt32(sapp.SagSol.sagSolKodu);
                                }
                            }
                        }
                        if (accTrx.Position.HasValue)
                            istlm.Position = (int)accTrx.Position.Value;
                        istlm.Nabiz700Status = accTrx.Nabiz700Status != null ? (int)accTrx.Nabiz700Status : 0;
                        istlm.NabizResultCode = accTrx.NabizResultCode;
                        istlm.NabizResultMessage = accTrx.NabizResultMessage;

                        resultData.Add(istlm);
                    }
                    result.data = resultData;
                }
                else
                    result = DevexpressLoader.Load(objectContext, queryDef, loadOptions, paramList, incjectSQL, "OBJECTID");

                return result;
            }
        }


        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public LoadResult LoadInvoiceFormGrid(DataSourceLoadOptions loadOptions)
        {
            LoadInvoiceFormModel lifm = JsonConvert.DeserializeObject<LoadInvoiceFormModel>(loadOptions.Params.LoadInvoiceFormModel.ToString());

            //SubEpisodeProtocol singleSEP = objectContext.GetObject<SubEpisodeProtocol>(lifm.id) as SubEpisodeProtocol;
            return LoadInvoiceSEPTransactionListModel(loadOptions, lifm);
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public InvoiceSEPFormModel InvoiceForm(LoadInvoiceFormModel lifm)
        {
            InvoiceSEPFormModel result = new InvoiceSEPFormModel();
            Guid id = lifm.id;
            int transactionType;
            if (lifm.type == (int)PayerTypeEnum.Paid)
                transactionType = (int)APRTypeEnum.PATIENT;
            else
                transactionType = (int)APRTypeEnum.PAYER;
            using (var objectContext = new TTObjectContext(true))
            {
                if (lifm.type == (int)PayerTypeEnum.Paid)
                {
                    ControlAndChangeSEP(objectContext, ref id);
                }

                SubEpisodeProtocol singleSEP = objectContext.GetObject<SubEpisodeProtocol>(id) as SubEpisodeProtocol;
                result.InvoiceTypes = GetInvoiceTypes(singleSEP);

                foreach (int loadType in lifm.loadPartitions)
                {
                    if (loadType == (int)LoadInvoiceFormPartitions.MainSEP)
                        result.MainSEP = id;
                    else if (loadType == (int)LoadInvoiceFormPartitions.InvoiceSEPMaster)
                        result.InvoiceSEPMaster = LoadInvoiceSEPMasterModel(singleSEP, objectContext);
                    else if (loadType == (int)LoadInvoiceFormPartitions.InvoiceSEPDetail)
                        result.InvoiceSEPDetail = LoadInvoiceSEPDetailModel(singleSEP, lifm.type, objectContext);
                    else if (loadType == (int)LoadInvoiceFormPartitions.InvoiceSEPList)
                        result.InvoiceSEPList = LoadInvoiceSEPListModel(singleSEP, lifm.type, objectContext);
                    //else if (loadType == (int)LoadInvoiceFormPartitions.InvoiceSEPTransactionList)
                    //    result.InvoiceSEPTransactionList = LoadInvoiceSEPTransactionListModel(singleSEP, transactionType, objectContext);
                    else if (loadType == (int)LoadInvoiceFormPartitions.InvoiceSEPDiagnoseList)
                        result.InvoiceSEPDiagnoseList = LoadInvoiceSEPDiagnoseListModel(singleSEP, objectContext);
                    else if (loadType == (int)LoadInvoiceFormPartitions.PatientSEPList)
                        result.PatientSEPList = LoadPatientSEPListModel(singleSEP.Episode.Patient.ObjectID, objectContext).OrderByDescending(x => x.Date).ToList();
                    else if (loadType == (int)LoadInvoiceFormPartitions.InvoiceSEPEpicrisis)
                        result.InvoiceSEPEpicrisis = LoadInvoiceSEPEpicrisisModel(singleSEP, objectContext);
                }

                return result;
            }

        }


        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public RelatedEpisodeActionResultModel GetRelatedEpisodeActionOfSubEpisode(Guid sepObjectID)
        {
            using (TTObjectContext objectContext = new TTObjectContext(true))
            {
                RelatedEpisodeActionResultModel result = null;

                SubEpisodeProtocol sep = objectContext.GetObject<SubEpisodeProtocol>(sepObjectID);
                foreach (EpisodeAction episodeAction in sep.SubEpisode.EpisodeActions)
                {
                    if (episodeAction.IsCancelled == false)
                    {
                        if ((sep.MedulaTedaviTuru.tedaviTuruKodu != "Y" && episodeAction is PatientExamination) || (sep.MedulaTedaviTuru.tedaviTuruKodu == "Y" && episodeAction is InPatientPhysicianApplication))
                        {
                            result = new RelatedEpisodeActionResultModel();
                            result.EAObjectID = episodeAction.ObjectID;
                            result.ObjectDefName = episodeAction.ObjectDef.Name;
                            return result;
                        }
                    }
                }
                return null;
            }
        }

        private InvoiceSEPEpicrisisModel LoadInvoiceSEPEpicrisisModel(SubEpisodeProtocol singleSEP, TTObjectContext objectContext)
        {
            InvoiceSEPEpicrisisModel result = new InvoiceSEPEpicrisisModel();
            Dictionary<string, string> tempEpicrisis = singleSEP.GetSEPEpicrisisInfo();
            int i = 1;
            foreach (var item in tempEpicrisis)
            {
                result.EpicrisisDetail.Add(CreateNewInvoiceSEPEpicrisisDetail(item.Value, item.Key, ref i));
            }

            result.Episode = singleSEP.Episode.ObjectID;
            result.SubEpisode = singleSEP.SubEpisode.ObjectID;
            result.SubEpisodeProtocol = singleSEP.ObjectID;
            if (singleSEP.Epicrisis != null && !string.IsNullOrEmpty(singleSEP.Epicrisis.Description))
            {
                result.Description = singleSEP.Epicrisis.Description;
                result.CreateDate = singleSEP.Epicrisis.CreateDate;
                result.UserName = singleSEP.Epicrisis.ResUser.Name;
            }
            else
                result.Description = singleSEP.GetSEPEpicrisisDescription(tempEpicrisis);
            return result;
        }

        private InvoiceSEPEpicrisisDetailModel CreateNewInvoiceSEPEpicrisisDetail(string desc, string title, ref int order)
        {
            InvoiceSEPEpicrisisDetailModel isedm = new InvoiceSEPEpicrisisDetailModel();
            isedm.Included = true;
            isedm.Order = order;
            isedm.Text = desc;
            isedm.Type = title;
            order++;
            return isedm;
        }

        public class SaveSEPEpicrisisModel
        {
            public Guid SEPObjectID
            {
                get;
                set;
            }

            public string Description
            {
                get;
                set;
            }
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public void SaveSEPEpicrisis(SaveSEPEpicrisisModel param)
        {
            using (var objectContext = new TTObjectContext(false))
            {
                try
                {
                    SubEpisodeProtocol sep = objectContext.GetObject(param.SEPObjectID, typeof(SubEpisodeProtocol)) as SubEpisodeProtocol;
                    if (sep.Epicrisis == null)
                    {
                        SEPEpicrisis sepE = new SEPEpicrisis(objectContext, Common.GetTextOfRTFString(param.Description));
                        sep.Epicrisis = sepE;
                    }
                    else
                    {
                        sep.Epicrisis.CreateDate = DateTime.Now;
                        sep.Epicrisis.Description = param.Description;
                        sep.Epicrisis.ResUser = Common.CurrentResource;
                    }

                    objectContext.FullPartialllyLoadedObjects();
                    objectContext.Save();
                }
                catch (Exception ex)
                {
                    throw new TTException("SaveSEPEpicrisis:" + ex.Message);
                }
            }
        }

        public class ChangeDischargeDateModel
        {
            public Guid SEPObjectID { get; set; }
            public DateTime NewDischargeDate { get; set; }
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public void ChangeDischargeDate(ChangeDischargeDateModel param)
        {
            using (var objectContext = new TTObjectContext(false))
            {
                try
                {
                    SubEpisodeProtocol sep = objectContext.GetObject(param.SEPObjectID, typeof(SubEpisodeProtocol)) as SubEpisodeProtocol;
                    InvoiceLog.AddInfo(string.Format("Yatış çıkış tarihi değiştirildi. E.D: {0} Y.D: {1}", sep.DischargeDate.HasValue ? sep.DischargeDate.Value.ToString("dd.MM.yyyy") : "", param.NewDischargeDate.ToString("dd.MM.yyyy")), sep.ObjectID, InvoiceOperationTypeEnum.UpdateSEPProperties, InvoiceLogObjectTypeEnum.SubEpisodeProtocol);
                    sep.DischargeDate = param.NewDischargeDate;
                    objectContext.FullPartialllyLoadedObjects();
                    objectContext.Save();
                }
                catch (Exception ex)
                {
                    throw new TTException("ChangeDischargeDate:" + ex.Message);
                }
            }
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public void DeleteSEPEpicrisis([FromQuery] Guid sepObjectID)
        {
            using (var objectContext = new TTObjectContext(false))
            {
                try
                {
                    SubEpisodeProtocol sep = objectContext.GetObject(sepObjectID, typeof(SubEpisodeProtocol)) as SubEpisodeProtocol;
                    sep.Epicrisis = null;
                    objectContext.FullPartialllyLoadedObjects();
                    objectContext.Save();
                }
                catch (Exception ex)
                {
                    throw new TTException("DeleteSEPEpicrisis:" + ex.Message);
                }
            }
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public SearchProtocolNoModel getSEPObjectIDFromProtocolNo([FromQuery] string protocolNo)
        {
            using (var objectContext = new TTObjectContext(false))
            {
                SearchProtocolNoModel result = new SearchProtocolNoModel();
                try
                {
                    BindingList<SubEpisode> seList = SubEpisode.GetByProtocolNo(objectContext, protocolNo);
                    SubEpisode se = seList.Where(x => x.CurrentStateDefID != SubEpisode.States.Cancelled).FirstOrDefault();
                    if (se != null)
                    {
                        SubEpisodeProtocol sep = se.SubEpisodeProtocols.Where(x => x.CurrentStateDefID != SubEpisodeProtocol.States.Cancelled).FirstOrDefault();
                        if (sep != null)
                        {
                            result.SEPObjectID = sep.ObjectID;
                            result.Name = se.Episode.Patient.Name;
                            result.Surname = se.Episode.Patient.Surname;
                            result.ProtocolNo = se.ProtocolNo;
                            return result;
                        }
                        else
                            throw new TTException("Aranan kriterlere uygun kabul bulunamadı.");
                    }
                    else
                        throw new TTException("Aranan kriterlere uygun kabul bulunamadı.");
                }
                catch (Exception ex)
                {
                    throw new TTException("getSEPObjectIDFromProtocolNo:" + ex.Message);
                }
            }
        }

        private List<PatientSEPListModel> LoadPatientSEPListModel(Guid patientObjectID, TTObjectContext objectContext = null)
        {
            if (objectContext == null)
                objectContext = new TTObjectContext(true);
            List<PatientSEPListModel> result = new List<PatientSEPListModel>();
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" AND SUBEPISODE.EPISODE.PATIENT  = '" + patientObjectID + "' ");
            BindingList<SubEpisodeProtocol.GetSEPByInjection_Class> tempList = SubEpisodeProtocol.GetSEPByInjection(objectContext, (int)APRTypeEnum.PAYER, sb.ToString());
            foreach (var sep in tempList)
            {
                PatientSEPListModel pslm = new PatientSEPListModel();
                pslm.Episode = sep.Episode;
                pslm.HospitalProtocolNo = sep.ProtocolNo;
                pslm.MedulaBasvuruNo = sep.MedulaBasvuruNo;
                pslm.Medulafaturatutari = Convert.ToDouble(sep.Medulafaturatutari);
                pslm.MedulaTakipNo = sep.MedulaTakipNo;
                pslm.Medulatakipno1 = sep.MedulaTakipNo;
                pslm.Date = sep.MedulaProvizyonTarihi;
                pslm.Specialityname = sep.Specialityname;
                pslm.SubEpisodeResSection = sep.Subepisoderessection;
                pslm.Status = sep.Status;
                pslm.SubEpisode = sep.SubEpisode;
                pslm.Tedavituru = sep.Tedavituru;
                pslm.ObjectID = sep.ObjectID.Value;
                pslm.Id = sep.Id.Value;
                pslm.Payername = sep.Payername;
                pslm.PayetTypeEnum = Convert.ToInt32(sep.PayerType);
                pslm.InvoiceNo = sep.DocumentNo;
                pslm.InvoiceDate = sep.DocumentDate;
                result.Add(pslm);
            }

            return result;
            //throw new NotImplementedException();
        }

        private List<PayerType> GetInvoiceTypes(SubEpisodeProtocol singleSEP)
        {
            List<PayerType> result = new List<PayerType>();
            PayerType pt = new PayerType();
            pt.id = (int)singleSEP.Payer.Type.PayerType;
            pt.text = Common.GetDisplayTextOfEnumValue("PayerTypeEnum", (int)singleSEP.Payer.Type.PayerType);
            result.Add(pt);
            if (singleSEP.Payer.Type.PayerType != PayerTypeEnum.Paid)
            {

                BindingList<AccountTransaction.GetCountOfAccTrx_Class> countQueryRes = AccountTransaction.GetCountOfAccTrx(" WHERE CURRENTSTATEDEFID <> '" + AccountTransaction.States.Cancelled + "' AND INVOICEINCLUSION = 1 AND ACCOUNTPAYABLERECEIVABLE.TYPE = " + (int)APRTypeEnum.PATIENT
                    + " AND SUBEPISODEPROTOCOL.SEPMASTER = '" + singleSEP.SEPMaster.ObjectID + "'");
                if (countQueryRes != null && countQueryRes.Count > 0)
                {
                    if (Convert.ToInt32(countQueryRes[0].Acctrxcount) > 0)
                    {
                        pt = new PayerType();
                        pt.id = (int)PayerTypeEnum.Paid;
                        pt.text = Common.GetDisplayTextOfEnumValue("PayerTypeEnum", (int)PayerTypeEnum.Paid);
                        result.Add(pt);
                    }
                }
                //List<SubEpisodeProtocol> sepList = singleSEP.SEPMaster.SubEpisodeProtocols.Where(x => x.CurrentStateDefID != SubEpisodeProtocol.States.Cancelled).ToList();
                //foreach (var sepInner in sepList)
                //{
                //    int innerCount = sepInner.AccountTransactions.Select(" CURRENTSTATEDEFID <> '" + AccountTransaction.States.Cancelled + "' AND INVOICEINCLUSION = 1 AND ACCOUNTPAYABLERECEIVABLE.TYPE = " + (int)APRTypeEnum.PATIENT).Count;
                //    //.Where(x => x.CurrentStateDefID != AccountTransaction.States.Cancelled && 
                //    //x.InvoiceInclusion == true && x.AccountPayableReceivable.Type == APRTypeEnum.PATIENT).Count();
                //    if (innerCount > 0)
                //    {
                //        pt = new PayerType();
                //        pt.id = (int)PayerTypeEnum.Paid;
                //        pt.text = Common.GetDisplayTextOfEnumValue("PayerTypeEnum", (int)PayerTypeEnum.Paid);
                //        result.Add(pt);
                //        return result;
                //    }
                //}
            }

            return result;
        }

        private void ControlAndChangeSEP(TTObjectContext objectContext, ref Guid id)
        {
            SubEpisodeProtocol sep = objectContext.GetObject(id, typeof(SubEpisodeProtocol)) as SubEpisodeProtocol;
            if (sep.Payer.Type.PayerType != PayerTypeEnum.Paid)
            {
                int countOfPatientTrans = sep.AccountTransactions.Select("").Where(x => x.CurrentStateDefID != AccountTransaction.States.Cancelled && x.InvoiceInclusion == true && x.AccountPayableReceivable.Type == APRTypeEnum.PATIENT).Count();
                if (countOfPatientTrans == 0)
                {
                    List<SubEpisodeProtocol> sepList = sep.SEPMaster.SubEpisodeProtocols.Where(x => x.CurrentStateDefID != SubEpisodeProtocol.States.Cancelled).OrderBy(o => o.MedulaProvizyonTarihi).ToList();
                    foreach (var sepInner in sepList)
                    {
                        int innerCount = sepInner.AccountTransactions.Select("").Where(x => x.CurrentStateDefID != AccountTransaction.States.Cancelled && x.InvoiceInclusion == true && x.AccountPayableReceivable.Type == APRTypeEnum.PATIENT).Count();
                        if (innerCount > 0)
                        {
                            id = sepInner.ObjectID;
                            return;
                        }
                    }
                }
            }
        }

        private InvoiceSEPMasterModel LoadInvoiceSEPMasterModel(SubEpisodeProtocol singleSEP, TTObjectContext objectContext = null)
        {
            InvoiceSEPMasterModel result = new InvoiceSEPMasterModel();
            if (objectContext == null)
                objectContext = new TTObjectContext(true);
            result.PatientObjectID = singleSEP.SubEpisode.Episode.Patient.ObjectID;
            result.NameAndSurname = singleSEP.SubEpisode.Episode.Patient.FullName;
            result.UniqueRefNo = singleSEP.SubEpisode.Episode.Patient.UniqueRefNo.HasValue ? singleSEP.SubEpisode.Episode.Patient.UniqueRefNo.Value.ToString() : singleSEP.SubEpisode.Episode.Patient.ID.ToString();
            result.BirthDate = singleSEP.SubEpisode.Episode.Patient.BirthDate.HasValue ? singleSEP.SubEpisode.Episode.Patient.BirthDate.Value.ToString("dd/MM/yyyy") : "_";
            result.YupassNo = singleSEP.SubEpisode.Episode.Patient.YUPASSNO.HasValue ? singleSEP.SubEpisode.Episode.Patient.YUPASSNO.Value.ToString() : "_";
            result.Payer.ObjectID = singleSEP.Payer.ObjectID;
            result.Payer.Name = singleSEP.Payer.Name;
            result.PayerType.Name = singleSEP.Payer.Type.PayerType.HasValue ? Common.GetDisplayTextOfDataTypeEnum(singleSEP.Payer.Type.PayerType.Value) : "";
            result.PayerType.Code = singleSEP.Payer.Type.PayerType.HasValue ? ((int)singleSEP.Payer.Type.PayerType).ToString() : "";
            return result;
        }

        private InvoiceSEPDetailModel LoadInvoiceSEPDetailModel(SubEpisodeProtocol singleSEP, int type, TTObjectContext objectContext = null)
        {
            InvoiceSEPDetailModel result = new InvoiceSEPDetailModel();
            if (objectContext == null)
                objectContext = new TTObjectContext(true);

            SubEpisodeProtocol.InvoiceSEPDetailQuery_Class sepDetailQueryRes = SubEpisodeProtocol.InvoiceSEPDetailQuery(singleSEP.ObjectID)[0];
            result.ObjectID = singleSEP.ObjectID;
            ResUser doctor = singleSEP.SubEpisode.GetSubEpisodeProcedureDoctor();
            if (doctor != null)
                result.DoctorName = doctor.Name;
            result.Triage = sepDetailQueryRes.Triage;

            string inpatientStatus = string.Empty;
            string dischargeType = string.Empty;

            if (singleSEP.SubEpisode.InpatientStatus.HasValue)
            {
                inpatientStatus = Common.GetEnumValueDefOfEnumValueV2("InpatientStatusEnum", (int)singleSEP.SubEpisode.InpatientStatus).DisplayText;

                // Taburcu Tipi
                BindingList<TreatmentDischarge> treatmentDischargeList = TreatmentDischarge.GetTreatmentDischargeBySubEpisode(objectContext, singleSEP.SubEpisode.ObjectID);
                if (treatmentDischargeList.Count > 0) // Yatan Hasta Taburcu
                {
                    foreach (TreatmentDischarge td in treatmentDischargeList)
                    {
                        if (!td.IsCancelled && td.CurrentStateDef.Status != StateStatusEnum.CompletedUnsuccessfully && td.DischargeType != null)
                        {
                            dischargeType = td.DischargeType.Name;
                            break;
                        }
                    }
                }
            }

            result.InpatientStatus = inpatientStatus;
            result.DischargeType = dischargeType;
            result.SubEpisodeObjectID = sepDetailQueryRes.Subepisodeobjectid.Value;
            result.EpisodeObjectID = sepDetailQueryRes.Episodeobjectid.Value;
            result.HospitalProtocolNo = sepDetailQueryRes.Hospitalprotocolno;
            result.EpisodeOpeningDate = sepDetailQueryRes.Episodeopeningdate.HasValue ? sepDetailQueryRes.Episodeopeningdate.Value.ToString("dd/MM/yyyy") : "";

            if (sepDetailQueryRes.PatientStatus == SubEpisodeStatusEnum.Inpatient)
            {
                result.InPatientDate = sepDetailQueryRes.Subepisodeopeningdate;
                result.DischargeDate = sepDetailQueryRes.Subepisodeclosingdate;
            }

            if (sepDetailQueryRes.Medulatedaviturukodu == "Y")
                result.InPatientDate = sepDetailQueryRes.MedulaProvizyonTarihi;

            if (singleSEP.DischargeDate != null)
                result.DischargeDate = singleSEP.DischargeDate;

            if (result.InPatientDate != null && result.DischargeDate != null)
                result.TotalInPatientDate = Convert.ToInt32((Convert.ToDateTime(result.DischargeDate) - Convert.ToDateTime(result.InPatientDate)).TotalDays);

            result.Brans = sepDetailQueryRes.Bransobjectid;
            result.MedulaDevredilenKurum = sepDetailQueryRes.Devredilenkurumobjectid;

            result.MedulaIstisnaiHal = sepDetailQueryRes.Medulaistisnaihalobjectid;
            result.MedulaSigortaliTuru = sepDetailQueryRes.Medulasigortalituruobjectid;
            result.MedulaSonucKodu = sepDetailQueryRes.MedulaSonucKodu;
            result.MedulaSonucMesaji = "[" + sepDetailQueryRes.MedulaSonucKodu + "] " + sepDetailQueryRes.MedulaSonucMesaji;
            result.MedulaBasvuruNo = sepDetailQueryRes.MedulaBasvuruNo;
            result.PayerInvoiceDocumentObjectID = sepDetailQueryRes.Pidobjectid;

            if (!(type == (int)PayerTypeEnum.Paid && sepDetailQueryRes.PayerType != PayerTypeEnum.Paid))
            {
                result.InvoiceNo = sepDetailQueryRes.Piddocumentno;

                if (sepDetailQueryRes.Piddocumentdate != null)
                {
                    result.InvoiceDate = sepDetailQueryRes.Piddocumentdate;
                }
                else
                {
                    InvoiceTerm iT = objectContext.QueryObjects<InvoiceTerm>().Where(x => x.CurrentStateDefID == InvoiceTerm.States.Open).OrderBy(x => x.StartDate).FirstOrDefault();
                    if (iT != null)
                    {
                        if (iT.EndDate < DateTime.Now)
                            result.InvoiceDate = Convert.ToDateTime(iT.EndDate.Value.ToShortDateString());
                        else
                            result.InvoiceDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
                    }
                    else
                        result.InvoiceDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
                }

                result.InvoiceDescription = sepDetailQueryRes.Piddescription;
                result.InvoiceCancelCount = Convert.ToInt32(sepDetailQueryRes.Invoicecancelcount);
                result.InvoiceTerm = sepDetailQueryRes.Invoicetermname;
                result.InvoiceCollection.Name = sepDetailQueryRes.Icname;
                result.InvoiceCollection.ObjectID = sepDetailQueryRes.Icobjectid;
                result.InvoiceCollection.Code = sepDetailQueryRes.Icno.HasValue ? sepDetailQueryRes.Icno.Value.ToString() : string.Empty;
            }
            else
                result.InvoiceDate = DateTime.Now;
            double? HBYSTotal = 0;
            double? InvoiceTotal = 0;
            APRTypeEnum transactionType;
            if (type == (int)PayerTypeEnum.Paid)
                transactionType = APRTypeEnum.PATIENT;
            else
                transactionType = APRTypeEnum.PAYER;

            List<Guid> sepGuidList = new List<Guid>();
            foreach (var sep in singleSEP.SEPMaster.SubEpisodeProtocols)
            {
                if (!(type == (int)PayerTypeEnum.Paid && singleSEP.Payer.Type.PayerType != PayerTypeEnum.Paid)) //Ücretli olmayan SEP in içindeki ücretli kısmını görüntülemek için yapıldı.
                    InvoiceTotal += sep.MedulaFaturaTutari.HasValue ? sep.MedulaFaturaTutari.Value : (Currency)0;

                //HBYSTotal += sep.AccountTransactions.Select("").Where(x => x.InvoiceInclusion == true && x.CurrentStateDefID != AccountTransaction.States.Cancelled && x.AccountPayableReceivable.Type == transactionType).Sum(y => y.UnitPrice * y.Amount);

                if (!string.IsNullOrEmpty(sep.Description))
                    result.SEPDescription += " " + sep.Description;

                sepGuidList.Add(sep.ObjectID);
            }

            result.InvoiceTotalPrice = InvoiceTotal.ToString();
            var hbysPriceQuery = AccountTransaction.GetHBYSPriceBySEP(sepGuidList, transactionType);
            if (hbysPriceQuery != null && hbysPriceQuery.Count > 0)
                result.HBYSTotalPrice = hbysPriceQuery[0].Hbystotalprice.ToString();
            return result;
        }

        private List<InvoiceSEPListModel> LoadInvoiceSEPListModel(SubEpisodeProtocol singleSEP, int type, TTObjectContext objectContext = null)
        {
            List<InvoiceSEPListModel> result = new List<InvoiceSEPListModel>();
            if (objectContext == null)
                objectContext = new TTObjectContext(true);
            bool control = false;
            if (singleSEP.Payer.Type.PayerType != PayerTypeEnum.Paid && type == (int)PayerTypeEnum.Paid)
                control = true;
            BindingList<SubEpisodeProtocol.GetBySEPMaster_Class> sepList = SubEpisodeProtocol.GetBySEPMaster(singleSEP.SEPMaster.ObjectID);
            foreach (var sep in sepList)
            {
                var innerSEP = objectContext.GetObject<SubEpisodeProtocol>(sep.ObjectID.Value);
                if (control)
                {
                    var atCount = AccountTransaction.GetHBYSPriceBySEP(new List<Guid>() { sep.ObjectID.Value }, APRTypeEnum.PATIENT);
                    //int innerCount = 0;
                    if (atCount != null && atCount.Count > 0)
                    {
                        if (Convert.ToInt32(atCount[0].Atcount) == 0)
                            continue;
                    }
                    //innerCount = Convert.ToInt32(atCount[0].Atcount); //innerSEP.AccountTransactions.Select("").Where(x => x.CurrentStateDefID != AccountTransaction.States.Cancelled && x.InvoiceInclusion == true && x.AccountPayableReceivable.Type == APRTypeEnum.PATIENT).Count();

                }

                InvoiceSEPListModel islm = new InvoiceSEPListModel();
                APRTypeEnum transactionType;
                if (type == (int)PayerTypeEnum.Paid)
                    transactionType = APRTypeEnum.PATIENT;
                else
                    transactionType = APRTypeEnum.PAYER;
                var HBYSPriceQuery = AccountTransaction.GetHBYSPriceBySEP(new List<Guid>() { sep.ObjectID.Value }, transactionType);
                if (HBYSPriceQuery != null && HBYSPriceQuery.Count > 0)
                    islm.HBYSPrice = Convert.ToDouble(HBYSPriceQuery[0].Hbystotalprice);
                //innerSEP.AccountTransactions.Select("").Where(x => x.InvoiceInclusion == true && x.CurrentStateDefID != AccountTransaction.States.Cancelled && x.AccountPayableReceivable.Type == transactionType).Sum(y => y.UnitPrice * y.Amount);
                islm.ObjectID = sep.ObjectID.Value;
                islm.SubEpisodeObjectID = sep.SubEpisode.Value;
                islm.KabulNo = sep.ProtocolNo;
                islm.EpisodeObjectID = sep.Episode.Value;
                islm.Description = sep.Description;
                islm.Checked = innerSEP.Checked.HasValue ? innerSEP.Checked.Value : false;
                islm.Investigation = innerSEP.Investigation.HasValue ? innerSEP.Investigation.Value : false;
                if (control) //Bu durum sadece ücretli faturası kesilmemiş ancak SEP in kurumu ücretli dışında olan kayıtlar için olabilir.
                {
                    islm.InvoiceStatus = TTUtils.CultureService.GetText("M27008", "Takip No Alınmamış");
                    islm.MedulaTakipNo = "";
                    islm.MedulaBagliTakipNo = "";
                    islm.InvoicePrice = 0;
                }
                else
                {
                    islm.InvoiceStatus = sep.Invoicestatus.ToString();
                    islm.MedulaTakipNo = sep.MedulaTakipNo;
                    islm.MedulaBagliTakipNo = sep.Baglitakipno;
                    islm.InvoicePrice = sep.MedulaFaturaTutari;
                }

                islm.MedulaProvizyonTarihi = sep.MedulaProvizyonTarihi.Value;
                islm.MedulaTedaviTuru = sep.MedulaTedaviTuru;
                islm.SubEpisodeResSection = sep.Ressectionname; //sep.Specialityname;
                islm.Id = sep.Id.Value;
                islm.MedulaProvizyonTipi = sep.MedulaProvizyonTipi;
                islm.MedulaTedaviTipi = sep.MedulaTedaviTipi;
                islm.MedulaTakipTipi = sep.MedulaTakipTipi;

                List<Guid> SEPGuidList = new List<Guid>();
                SEPGuidList.Add(sep.ObjectID.Value);
                List<Guid> blockStates = InvoiceBlockingDefinition.GetBlockStateIDs((int)APRTypeEnum.PAYER, objectContext);
                BindingList<AccountTransaction.GetBlockTransactionsCountBySEPs_Class> blockResultList = AccountTransaction.GetBlockTransactionsCountBySEPs(objectContext, blockStates, SEPGuidList);
                if (blockResultList.Count > 0 && Convert.ToInt32(blockResultList[0].Blockingcount) > 0)
                    islm.BlockState = true;
                else
                    islm.BlockState = false;


                result.Add(islm);
            }

            return result.OrderBy(x => x.MedulaProvizyonTarihi).ThenBy(x => x.KabulNo).ToList();
        }


        private List<InvoiceSEPDiagnoseListModel> LoadInvoiceSEPDiagnoseListModel(SubEpisodeProtocol sep, TTObjectContext objectContext = null)
        {
            List<InvoiceSEPDiagnoseListModel> result = new List<InvoiceSEPDiagnoseListModel>();
            if (objectContext == null)
                objectContext = new TTObjectContext(true);
            BindingList<SEPDiagnosis.GetBySubEpisodeProtocol_Class> diagnoseList = SEPDiagnosis.GetBySubEpisodeProtocol(objectContext, sep.ObjectID);
            foreach (var diagnose in diagnoseList)
            {
                InvoiceSEPDiagnoseListModel isdlm = new InvoiceSEPDiagnoseListModel();
                isdlm.ObjectID = diagnose.ObjectID.Value;
                isdlm.Id = diagnose.Id.ToString();
                isdlm.Diagnose = diagnose.Diagnose.HasValue ? objectContext.GetObject(diagnose.Diagnose.Value, typeof(DiagnosisDefinition)) as DiagnosisDefinition : null;
                isdlm.IsMainDiagnose = diagnose.IsMainDiagnose;
                isdlm.DiagnosisType = diagnose.Diagnosistype != null ? diagnose.Diagnosistype.ToString() : string.Empty;
                isdlm.MedulaProcessNo = diagnose.MedulaProcessNo;
                isdlm.CurrentState = diagnose.Statetext.ToString();
                isdlm.CurrentStateDefID = diagnose.CurrentStateDefID.Value;
                isdlm.MedulaResultCode = diagnose.MedulaResultCode;
                isdlm.MedulaResultMessage = diagnose.MedulaResultMessage;
                isdlm.OzelDurum = diagnose.OzelDurum.HasValue ? objectContext.GetObject(diagnose.OzelDurum.Value, typeof(OzelDurum)) as OzelDurum : null;
                result.Add(isdlm);
            }

            return result;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public bool UpdateInvoiceSEPList(InvoiceSEPListModel param)
        {
            using (var objectContext = new TTObjectContext(false))
            {
                SubEpisodeProtocol sep = objectContext.GetObject(param.ObjectID, typeof(SubEpisodeProtocol)) as SubEpisodeProtocol;
                if (sep.InvoiceStatus == MedulaSubEpisodeStatusEnum.ProvisionNoNotExists)
                {
                    if (param.MedulaTedaviTuru.HasValue)
                    {
                        TedaviTuru tt = objectContext.GetObject(param.MedulaTedaviTuru.Value, typeof(TedaviTuru)) as TedaviTuru;
                        InvoiceLog.AddInfo(string.Format("Tedavi türü bilgisi değiştirildi. E.D: {0} Y.D: {1}", sep.MedulaTedaviTuru.tedaviTuruAdi, tt.tedaviTuruAdi), sep.ObjectID, InvoiceOperationTypeEnum.UpdateSEPProperties, InvoiceLogObjectTypeEnum.SubEpisodeProtocol);
                        sep.MedulaTedaviTuru = tt;
                    }
                    else if (param.MedulaProvizyonTipi.HasValue)
                    {
                        ProvizyonTipi pt = objectContext.GetObject(param.MedulaProvizyonTipi.Value, typeof(ProvizyonTipi)) as ProvizyonTipi;
                        InvoiceLog.AddInfo(string.Format("Provizyon tipi bilgisi değiştirildi. E.D: {0} Y.D: {1}", sep.MedulaProvizyonTipi.provizyonTipiAdi, pt.provizyonTipiAdi), sep.ObjectID, InvoiceOperationTypeEnum.UpdateSEPProperties, InvoiceLogObjectTypeEnum.SubEpisodeProtocol);
                        sep.MedulaProvizyonTipi = pt;

                        sep.SetPropertiesFromOtherSEPs();
                    }
                    else if (param.MedulaTedaviTipi.HasValue)
                    {
                        TedaviTipi tt = objectContext.GetObject(param.MedulaTedaviTipi.Value, typeof(TedaviTipi)) as TedaviTipi;
                        InvoiceLog.AddInfo(string.Format("Tedavi tipi bilgisi değiştirildi. E.D: {0} Y.D: {1}", sep.MedulaTedaviTipi.tedaviTipiAdi, tt.tedaviTipiAdi), sep.ObjectID, InvoiceOperationTypeEnum.UpdateSEPProperties, InvoiceLogObjectTypeEnum.SubEpisodeProtocol);
                        sep.MedulaTedaviTipi = tt;
                    }
                    else if (param.MedulaTakipTipi.HasValue)
                    {
                        TakipTipi tt = objectContext.GetObject(param.MedulaTakipTipi.Value, typeof(TakipTipi)) as TakipTipi;
                        InvoiceLog.AddInfo(string.Format("Takip tipi bilgisi değiştirildi. E.D: {0} Y.D: {1}", sep.MedulaTakipTipi.takipTipiAdi, tt.takipTipiAdi), sep.ObjectID, InvoiceOperationTypeEnum.UpdateSEPProperties, InvoiceLogObjectTypeEnum.SubEpisodeProtocol);
                        sep.MedulaTakipTipi = tt;
                    }
                    else if (sep.MedulaProvizyonTarihi != param.MedulaProvizyonTarihi)
                    {
                        InvoiceLog.AddInfo(string.Format("Takip tarihi bilgisi değiştirildi. E.D: {0} Y.D: {1}", sep.MedulaProvizyonTarihi.HasValue ? sep.MedulaProvizyonTarihi.Value.ToString("dd/MM/yyyy") : "", param.MedulaProvizyonTarihi.ToString("dd/MM/yyyy")), sep.ObjectID, InvoiceOperationTypeEnum.UpdateSEPProperties, InvoiceLogObjectTypeEnum.SubEpisodeProtocol);
                        sep.MedulaProvizyonTarihi = param.MedulaProvizyonTarihi;
                    }
                }
                else if (!sep.IsInvoiced)
                {
                    if (param.MedulaProvizyonTipi.HasValue)
                    {
                        ProvizyonTipi pt = objectContext.GetObject(param.MedulaProvizyonTipi.Value, typeof(ProvizyonTipi)) as ProvizyonTipi;
                        sep.UpdateProvizyonTipiFromMedula(pt.provizyonTipiKodu);
                    }
                    else if (param.MedulaTedaviTipi.HasValue)
                    {
                        TedaviTipi tt = objectContext.GetObject(param.MedulaTedaviTipi.Value, typeof(TedaviTipi)) as TedaviTipi;
                        sep.UpdateTedaviTipiFromMedula(Convert.ToInt32(tt.tedaviTipiKodu));
                    }
                }

                if (param.Checked.HasValue)
                {
                    InvoiceLog.AddInfo(string.Format("Kontrol edildi bilgisi değiştirildi. E.D: {0} Y.D: {1}", sep.Checked, param.Checked.Value), sep.ObjectID, InvoiceOperationTypeEnum.UpdateSEPProperties, InvoiceLogObjectTypeEnum.SubEpisodeProtocol);
                    sep.Checked = param.Checked.Value;
                }
                else if (param.Investigation.HasValue)
                {
                    InvoiceLog.AddInfo(string.Format("İncelendi bilgisi değiştirildi. E.D: {0} Y.D: {1}", sep.Investigation, param.Investigation.Value), sep.ObjectID, InvoiceOperationTypeEnum.UpdateSEPProperties, InvoiceLogObjectTypeEnum.SubEpisodeProtocol);
                    sep.Investigation = param.Investigation.Value;
                }
                objectContext.Save();
            }

            return true;
        }

        public class SaveGridCustomizationModel
        {
            public string PageName
            {
                get;
                set;
            }

            public string GridName
            {
                get;
                set;
            }

            public List<string> ColumnNameList
            {
                get;
                set;
            }

            public SaveGridCustomizationModel()
            {
                this.ColumnNameList = new List<string>();
            }
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Everyone)]
        public void SaveUserBasedGridColumnCustomization(List<SaveGridCustomizationModel> sgcm)
        {
            using (var objectContext = new TTObjectContext(false))
            {
                try
                {
                    foreach (var oneGrid in sgcm)
                    {
                        string ColumnList = "1";
                        foreach (var column in oneGrid.ColumnNameList)
                        {
                            ColumnList += "," + column;
                        }

                        ColumnList = ColumnList.Replace("1,", "");
                        UserBasedGridColumnOption ubgco = null;
                        BindingList<UserBasedGridColumnOption> optionList = UserBasedGridColumnOption.GetGridColumnOption(objectContext, Common.CurrentResource.ObjectID, oneGrid.GridName, oneGrid.PageName);
                        if (optionList.Count == 0)
                        {
                            ubgco = new UserBasedGridColumnOption(objectContext);
                            ubgco.ColumnList = ColumnList;
                            ubgco.GridName = oneGrid.GridName;
                            ubgco.PageName = oneGrid.PageName;
                            ubgco.ResUser = Common.CurrentResource;
                        }
                        else if (optionList.Count == 1)
                        {
                            optionList[0].ColumnList = ColumnList;
                        }
                        else
                        {
                            int i = 0;
                            foreach (UserBasedGridColumnOption item in optionList)
                            {
                                if (i == 0)
                                    item.ColumnList = ColumnList;
                                else
                                {
                                    ITTObject tempItem = (ITTObject)item;
                                    tempItem.Delete();
                                }

                                i++;
                            }
                        }
                    }

                    objectContext.Save();
                }
                catch
                {
                    throw new TTException(TTUtils.CultureService.GetText("M26350", "Kullanıcı ayarları kayıt edilirken bir hata oluştu."));
                }
            }
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Everyone)]
        public List<string> GetColumnAndOrder([FromQuery] string gridName, [FromQuery] string pageName)
        {
            List<string> result = new List<string>();
            using (var objectContext = new TTObjectContext(false))
            {
                BindingList<UserBasedGridColumnOption> optionList = UserBasedGridColumnOption.GetGridColumnOption(objectContext, Common.CurrentResource.ObjectID, gridName, pageName);
                if (optionList.Count > 0)
                {
                    if (optionList[0].ColumnList == null)
                        return result;
                    result = optionList[0].ColumnList.Split(',').ToList();
                }
            }

            return result;
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public void DeleteUserCustomization([FromQuery] string gridName, [FromQuery] string pageName)
        {
            using (var objectContext = new TTObjectContext(false))
            {
                BindingList<UserBasedGridColumnOption> optionList = UserBasedGridColumnOption.GetGridColumnOption(objectContext, Common.CurrentResource.ObjectID, gridName, pageName);
                foreach (UserBasedGridColumnOption item in optionList)
                {
                    ITTObject tempItem = (ITTObject)item;
                    tempItem.Delete();
                }

                objectContext.Save();
            }
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public List<MedulaResult> ReadTermInvoiceInfoFromMedula(TermInformationModel termInformation)
        {
            if (termInformation.Term.HasValue == false)
                throw new TTException("Dönem seçiniz.");

            if (termInformation.GSSDocumentNo.HasValue == false && termInformation.TempProtDocumentNo.HasValue == false)
                throw new TTException("Evrak No giriniz.");

            List<MedulaResult> result = new List<MedulaResult>();
            using (TTObjectContext objectContext = new TTObjectContext(false))
            {
                try
                {
                    InvoiceTerm term = objectContext.GetObject<InvoiceTerm>(termInformation.Term.Value, false);
                    if (term == null)
                        throw new TTException("Dönem bulunamadı.");

                    result = term.ReadSEPInfoFromMedula(termInformation.GSSDocumentNo, termInformation.TempProtDocumentNo);
                    objectContext.Save();
                }
                catch (Exception ex)
                {
                    throw new TTException(ex.Message);
                }
            }

            return result;
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public TermInformationModel GetTermInfoForAccountancy(Guid termObjectID)
        {
            TermInformationModel result = new TermInformationModel();

            using (TTObjectContext objectContext = new TTObjectContext(true))
            {
                try
                {
                    InvoiceTerm term = objectContext.GetObject<InvoiceTerm>(termObjectID, false);
                    if (term == null)
                        throw new TTException("Dönem bulunamadı.");

                    result.Term = termObjectID;
                    result.GSSDocumentNo = term.GSSDocumentNo;
                    result.TempProtDocumentNo = term.TempProtDocumentNo;
                    result.Approved = term.Approved.HasValue ? term.Approved.Value : false;
                    result.ApproveUser = term.ApproveUser != null ? term.ApproveUser.Name : null;
                    result.ApproveDate = term.ApproveDate;

                    List<MedulaTakipBilgisi.GetByTerm_Class> MedulaTakipList = MedulaTakipBilgisi.GetByTerm(termObjectID).ToList();
                    List<MedulaTakipBilgisi.GetByTerm_Class> GSSTakipList = MedulaTakipList.Where(x => x.Type == MedulaTakipBilgisiTypeEnum.GSS).ToList();
                    List<MedulaTakipBilgisi.GetByTerm_Class> GeciciKorumaTakipList = MedulaTakipList.Where(x => x.Type == MedulaTakipBilgisiTypeEnum.GeciciKoruma).ToList();

                    result.MedulaTotal = MedulaTakipList.Sum(x => (decimal)x.ToplamTutar);
                    result.MedulaBKKTotal = GSSTakipList.Where(x => x.GrupAdi == "BKK'na göre borçlular").Sum(x => (decimal)x.ToplamTutar);
                    result.MedulaGocIdaresiTotal = GeciciKorumaTakipList.Sum(x => (decimal)x.ToplamTutar);
                    result.MedulaNetTotal = result.MedulaTotal - (result.MedulaBKKTotal + result.MedulaGocIdaresiTotal);

                    result.HBYSSEPTotal = term.GetTotalMedulaPriceBySEP();
                    result.HBYSAccTrxTotal = term.GetTotalMedulaPriceByAccTrx();
                }
                catch (Exception ex)
                {
                    throw new TTException(ex.Message);
                }
            }

            return result;
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public TermInformationModel TermApprovedChange(Guid termObjectID, bool approved)
        {
            TermInformationModel result = new TermInformationModel();

            using (TTObjectContext objectContext = new TTObjectContext(false))
            {
                try
                {
                    InvoiceTerm term = objectContext.GetObject<InvoiceTerm>(termObjectID, false);
                    if (term == null)
                        throw new TTException("Dönem bulunamadı.");

                    if (approved && term.Approved != true)
                    {
                        if (term.GetTotalPriceOfMedulaTakipBilgileri() <= 0)
                            throw new TTException("Dönemi onaylayabilmek için Medula Tutarı sıfırdan büyük olmalıdır.");

                        term.Approved = true;
                        term.ApproveUser = Common.CurrentResource;
                        term.ApproveDate = Common.RecTime();
                        objectContext.Save();
                    }
                    else if (!approved && term.Approved == true)
                    {
                        term.Approved = null;
                        term.ApproveUser = null;
                        term.ApproveDate = null;
                        objectContext.Save();
                    }

                    result.ApproveUser = term.ApproveUser != null ? term.ApproveUser.Name : null;
                    result.ApproveDate = term.ApproveDate;
                }
                catch (Exception ex)
                {
                    throw new TTException(ex.Message);
                }
            }

            return result;
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public List<InvoiceTerm.SEPInformationModel> GetIncompatibleSEPsForAccountancy(Guid termObjectID)
        {
            using (TTObjectContext objectContext = new TTObjectContext(true))
            {
                try
                {
                    InvoiceTerm term = objectContext.GetObject<InvoiceTerm>(termObjectID, false);
                    if (term == null)
                        throw new TTException("Dönem bulunamadı.");

                    return term.GetIncompatibleSEPs();
                }
                catch (Exception ex)
                {
                    throw new TTException(ex.Message);
                }
            }
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public void ArrangeIncompatibleSEPsForAccountancy(List<InvoiceTerm.SEPInformationModel> SEPInformationList)
        {
            using (TTObjectContext objectContext = new TTObjectContext(false))
            {
                try
                {
                    if (SEPInformationList.Count > 0)
                    {
                        List<SubEpisodeProtocol> sepList = new List<SubEpisodeProtocol>();
                        List<SEPMaster> sepMasterList = new List<SEPMaster>();

                        List<SubEpisodeProtocol> sepBKKPrimBorcluList = new List<SubEpisodeProtocol>();
                        List<SubEpisodeProtocol> sepGeciciKorumaList = new List<SubEpisodeProtocol>(); // Bunun için bir düzeltme kodu yazılmadı henüz, ileride gerekirse yazılacak

                        foreach (InvoiceTerm.SEPInformationModel item in SEPInformationList)
                        {
                            if (item.SEPObjectId.HasValue)
                            {
                                SubEpisodeProtocol sep = objectContext.GetObject<SubEpisodeProtocol>(item.SEPObjectId.Value, false);
                                if (sep != null && !string.IsNullOrWhiteSpace(sep.MedulaTakipNo))
                                {
                                    if (item.UyumsuzlukTipi == InvoiceTerm.TakipUyumsuzlukTipi.Faturalama)
                                    {
                                        if (!sepList.Contains(sep))
                                            sepList.Add(sep);

                                        if (!sepMasterList.Contains(sep.SEPMaster))
                                            sepMasterList.Add(sep.SEPMaster);
                                    }
                                    else if (item.UyumsuzlukTipi == InvoiceTerm.TakipUyumsuzlukTipi.BKKPrimBorclu)
                                    {
                                        sepBKKPrimBorcluList.Add(sep);
                                    }
                                    else if (item.UyumsuzlukTipi == InvoiceTerm.TakipUyumsuzlukTipi.GeciciKoruma)
                                    {
                                        sepGeciciKorumaList.Add(sep);
                                    }
                                }
                            }
                        }

                        // Faturalama hatalarını düzeltme
                        foreach (SEPMaster sepMaster in sepMasterList)
                        {
                            List<SubEpisodeProtocol> sepMasterSEPs = sepList.Where(x => x.SEPMaster.ObjectID == sepMaster.ObjectID).ToList();
                            sepMaster.ArrangeInvoice(sepMasterSEPs);
                        }

                        // BKK Prim Borçlu hatalarını düzeltme
                        foreach (SubEpisodeProtocol sep in sepBKKPrimBorcluList)
                        {
                            sep.ReadProvisionFromMedula(); // Takibin "İstisnai Hal" bilgisini düzeltir
                        }

                        // Geçici Koruma hatalarını düzeltme
                        foreach (SubEpisodeProtocol sep in sepGeciciKorumaList)
                        {
                            sep.ReadProvisionFromMedula(); // Takibin "Kurum" bilgisini Devredilen Kurum'a göre düzeltir
                        }

                        objectContext.Save();
                    }
                }
                catch (Exception ex)
                {
                    throw new TTException(ex.Message);
                }
            }
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public List<InvoiceTerm.MIFPayer> GetMIFInfo(Guid mifObjectID)
        {
            List<InvoiceTerm.MIFPayer> result = new List<InvoiceTerm.MIFPayer>();

            using (TTObjectContext objectContext = new TTObjectContext(true))
            {
                try
                {
                    MIF mif = objectContext.GetObject<MIF>(mifObjectID, false);
                    if (mif == null)
                        throw new TTException("Muhasebe İşlem Fişi bulunamadı.");

                    List<PayerDefinition> payerList = mif.MIFDetails.Select(x => x.Payer).Distinct().OrderBy(x => x.Name).ToList();

                    foreach (PayerDefinition payer in payerList)
                    {
                        InvoiceTerm.MIFPayer mifPayer = new InvoiceTerm.MIFPayer()
                        {
                            Payer = payer.ObjectID,
                            Code = payer.Code.HasValue ? payer.Code.ToString() : null,
                            Name = payer.Name
                        };
                        result.Add(mifPayer);

                        List<MIFDetail> payerMIFDetails = mif.MIFDetails.Where(x => x.Payer.ObjectID == payer.ObjectID).OrderBy(x => x.AccountCode).ToList();

                        foreach (MIFDetail mifDetail in payerMIFDetails)
                        {
                            InvoiceTerm.MIFPayerDetail mifPayerDetail = new InvoiceTerm.MIFPayerDetail()
                            {
                                AccountCode = mifDetail.AccountCode,
                                AccountName = mifDetail.AccountName,
                                Debt = mifDetail.Debt,
                                Credit = mifDetail.Credit
                            };
                            mifPayer.Details.Add(mifPayerDetail);
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw new TTException(ex.Message);
                }
            }

            return result;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public List<InvoiceTerm.MIFPayer> PrepareNewMIF(MIFInfo mifInfo)
        {
            if (mifInfo.TermObjectID.HasValue == false)
                throw new TTException("Dönem seçiniz.");

            if (mifInfo.MIFType.HasValue == false)
                throw new TTException("MİF Türünü seçiniz.");

            List<InvoiceTerm.MIFPayer> result = new List<InvoiceTerm.MIFPayer>();

            using (TTObjectContext objectContext = new TTObjectContext(true))
            {
                try
                {
                    InvoiceTerm term = objectContext.GetObject<InvoiceTerm>(mifInfo.TermObjectID.Value, false);
                    if (term == null)
                        throw new TTException("Dönem bulunamadı.");

                    result = term.PrepareMIF((MIFTypeEnum)mifInfo.MIFType);
                }
                catch (Exception ex)
                {
                    throw new TTException(ex.Message);
                }
            }

            return result;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public MIFInfo SaveNewMIF(MIFModel mifModel)
        {
            if (mifModel.MIFInfo.TermObjectID.HasValue == false)
                throw new TTException("Dönem seçiniz.");

            if (mifModel.MIFInfo.MIFType.HasValue == false)
                throw new TTException("MİF Türünü seçiniz.");

            if (mifModel.MIFPayers == null || mifModel.MIFPayers.Count == 0)
                throw new TTException("Kaydedilecek MİF detayı bulunamadı");

            MIFInfo result = mifModel.MIFInfo;

            using (TTObjectContext objectContext = new TTObjectContext(false))
            {
                try
                {
                    InvoiceTerm term = objectContext.GetObject<InvoiceTerm>(mifModel.MIFInfo.TermObjectID.Value, false);
                    if (term == null)
                        throw new TTException("Dönem bulunamadı.");

                    MIF mif = new MIF(objectContext);
                    mif.InvoiceTerm = term;
                    mif.CreateUser = Common.CurrentResource;
                    mif.MIFType = (MIFTypeEnum)mifModel.MIFInfo.MIFType.Value;
                    mif.CreateDate = Common.RecTime();

                    foreach (InvoiceTerm.MIFPayer mifPayer in mifModel.MIFPayers)
                    {
                        PayerDefinition payer = objectContext.GetObject<PayerDefinition>(mifPayer.Payer, false);
                        if (payer == null)
                            throw new TTException("Kurum bulunamadı.");

                        foreach (InvoiceTerm.MIFPayerDetail detail in mifPayer.Details)
                        {
                            MIFDetail mifDetail = new MIFDetail(objectContext);
                            mifDetail.MIF = mif;
                            mifDetail.Payer = payer;
                            mifDetail.AccountCode = detail.AccountCode;
                            mifDetail.AccountName = detail.AccountName;
                            mifDetail.Debt = detail.Debt;
                            mifDetail.Credit = detail.Credit;
                        }
                    }

                    objectContext.Save();

                    result.MIFObjectID = mif.ObjectID;
                    result.MIFName = mif.Name;
                    //result.CreateUser = mif.CreateUser.Name;
                    //result.CreateDate = mif.CreateDate;
                }
                catch (Exception ex)
                {
                    throw new TTException(ex.Message);
                }
            }

            return result;
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public List<listboxObject> GetInvoiceTerms(Guid? stateDefID)
        {
            List<listboxObject> result = new List<listboxObject>();
            string filterExp = string.Empty;
            if (stateDefID.HasValue)
                filterExp = "CURRENTSTATEDEFID = '" + stateDefID.Value.ToString() + "'";

            using (var objectContext = new TTObjectContext(true))
            {
                var ttList = objectContext.QueryObjects<InvoiceTerm>(filterExp).OrderByDescending(x => x.EndDate);
                var query =
                    from i in ttList
                    select new listboxObject { ObjectID = i.ObjectID, Name = i.Name.Trim() + " - " + i.CurrentStateDef.DisplayText };
                result = query.ToList();
            }

            return result;
        }

        [HttpGet]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Saymanlik_Islemleri)]
        public List<MIFInfo> GetMIFs()
        {
            List<MIFInfo> result = new List<MIFInfo>();
            using (var objectContext = new TTObjectContext(true))
            {
                var ttList = MIF.GetMIFs(objectContext, null);
                var query =
                    from i in ttList
                    select new MIFInfo
                    {
                        MIFObjectID = i.ObjectID.Value,
                        MIFName = i.Invoicetermname + " > " + Common.GetDisplayTextOfDataTypeEnum(i.MIFType) + " > " + i.CreateDate.ToString() + " (" + i.Createusername + ")",
                        MIFType = (int)i.MIFType,
                        TermObjectID = i.InvoiceTerm.Value
                    };

                result = query.ToList();
            }

            return result;
        }


        #region InvoiceAllInOneForm

        public List<GridDTO> GetLast5InvoicesOfUser(TTObjectContext objectContext)
        {
            var last5Invoices = SubEpisodeProtocol.GetLast5InvoicesOfUser(Common.CurrentResource.ObjectID);
            var query = from invoice in last5Invoices
                        orderby invoice.CreateDate descending
                        select new GridDTO
                        {
                            HospitalProtocolNo = invoice.Protocolno.ToString(),
                            NameSurname = invoice.Name + " " + invoice.Surname,
                            ObjectID = invoice.PayerInvoiceDocument,
                            Price = Convert.ToDouble(invoice.Faturatutari),
                            UniqueRefNo = invoice.UniqueRefNo
                        };
            return query.ToList();
        }

        public List<GraphtDTO> GetTermGraphData(BindingList<GetGroupedInvoicePricesByTerm_Class> queryData, Guid termObjectID, int distributionType)
        {
            List<GraphtDTO> result = null;
            var cultureInfo = CultureInfo.CurrentCulture;
            var numberFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();
            switch (distributionType)
            {
                case 0:
                    result = (from data in queryData
                              group data by data.Tedavituru.Trim() into g
                              select new GraphtDTO
                              {
                                  Name = g.Key,
                                  TotalPrice = Math.Round(g.Sum(x => Convert.ToDecimal(x.Faturatutari)), 2),
                              }).ToList();
                    break;
                case 1:
                    result = (from data in queryData
                              group data by data.PayerType into g
                              select new GraphtDTO
                              {
                                  Name = Common.GetEnumValueDefOfEnumValue(g.Key).DisplayText,
                                  TotalPrice = Math.Round(g.Sum(x => Convert.ToDecimal(x.Faturatutari)), 2),
                              }).ToList();
                    break;
                default:
                    result = result = new List<GraphtDTO>(); ;
                    break;
            }
            return result;
        }

        public List<GraphtDTO> GetUserGraphData(BindingList<GetGroupedInvoicePricesByTerm_Class> queryData, Guid userObjectID, int distributionType)
        {

            List<GraphtDTO> result = null;
            var cultureInfo = CultureInfo.CurrentCulture;
            var numberFormat = (NumberFormatInfo)NumberFormatInfo.CurrentInfo.Clone();
            switch (distributionType)
            {
                case 0:
                    result = (from data in queryData
                              where data.Userobjectid.Value == userObjectID
                              group data by new { Tedavituru = data.Tedavituru.Trim() } into g
                              select new GraphtDTO
                              {
                                  Name = g.Key.Tedavituru,
                                  TotalPrice = Math.Round(g.Sum(x => Convert.ToDecimal(x.Faturatutari)), 2)

                              }).ToList();
                    break;
                case 1:
                    result = (from data in queryData
                              where data.Userobjectid.Value == userObjectID
                              group data by new { PayerType = data.PayerType } into g
                              select new GraphtDTO
                              {
                                  Name = Common.GetEnumValueDefOfEnumValue(g.Key.PayerType).DisplayText,
                                  TotalPrice = Math.Round(g.Sum(x => Convert.ToDecimal(x.Faturatutari)), 2)
                              }).ToList();
                    break;
                default:
                    result = new List<GraphtDTO>();
                    break;
            }

            return result;
        }

        public List<GridDTO> GetUserGridData(BindingList<GetGroupedInvoicePricesByTerm_Class> queryData, List<Guid> userObjectIDList)
        {
            List<GridDTO> result = null;

            result = (from data in queryData
                      where userObjectIDList.Contains(data.Userobjectid.Value)
                      group data by new { data.Userobjectid, data.Username } into g
                      select new GridDTO
                      {
                          ObjectID = g.Key.Userobjectid,
                          NameSurname = g.Key.Username,
                          Price = g.Sum(x => Convert.ToDouble(x.Faturatutari))
                      }).OrderByDescending(x => x.Price).ToList();

            return result;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public InvoiceAllInOneFormInitViewModel InitInvoiceAllInOneForm()
        {
            InvoiceAllInOneFormInitViewModel initModel = new InvoiceAllInOneFormInitViewModel();
            using (TTObjectContext objectContext = new TTObjectContext(true))
            {
                var termList = objectContext.QueryObjects<InvoiceTerm>("", "StartDate DESC");

                initModel.TermList = termList.Select(x => new ListBoxDTO { ObjectID = x.ObjectID, Name = x.Name + " - " + x.CurrentStateDef.DisplayText }).ToList();
                return initModel;
            }
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public List<GridDTO> GetLast5InvoicesOfUser()
        {
            using (TTObjectContext objectContext = new TTObjectContext(true))
            {
                return GetLast5InvoicesOfUser(objectContext);
            }
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public List<GraphtDTO> GetTermGraphData(InvoiceAllInOneFormSearchModel searchModel)
        {
            List<GraphtDTO> result = new List<GraphtDTO>();
            if (searchModel.selectedTermDistributionType.HasValue)
            {
                using (TTObjectContext objectContext = new TTObjectContext(true))
                {
                    var queryData = SubEpisodeProtocol.GetGroupedInvoicePricesByTerm(searchModel.selectedTerm.Value);
                    return GetTermGraphData(queryData, searchModel.selectedTerm.Value, searchModel.selectedTermDistributionType.Value);
                }
            }
            return result;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public List<GraphtDTO> GetUserGraphData(InvoiceAllInOneFormSearchModel searchModel)
        {
            List<GraphtDTO> result = new List<GraphtDTO>();
            if (searchModel.selectedUserDistributionType.HasValue)
            {
                using (TTObjectContext objectContext = new TTObjectContext(true))
                {
                    var queryData = SubEpisodeProtocol.GetGroupedInvoicePricesByTerm(searchModel.selectedTerm.Value);
                    return GetUserGraphData(queryData, searchModel.selectedUser.Count > 0 ? searchModel.selectedUser[0].Value : Common.CurrentResource.ObjectID, searchModel.selectedUserDistributionType.Value);
                }
            }
            return result;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public InvoiceAllInOneFormViewModel GetAllStatistics(InvoiceAllInOneFormSearchModel searchModel)
        {
            InvoiceAllInOneFormViewModel result = new InvoiceAllInOneFormViewModel();
            using (TTObjectContext objectContext = new TTObjectContext(true))
            {

                result.Last5Invoices = GetLast5InvoicesOfUser(objectContext);

                if (searchModel.selectedTerm.HasValue)
                {
                    var queryData = SubEpisodeProtocol.GetGroupedInvoicePricesByTerm(searchModel.selectedTerm.Value);

                    List<ResUser> userList = new List<ResUser>();
                    if (TTUser.CurrentUser.HasRole(TTRoleNames.Doner_Sermaye_Isletme_Muduru))
                    {
                        userList = objectContext.QueryObjects<ResUser>(" USERTYPE = 267").ToList();
                    }
                    else
                        userList.Add(Common.CurrentResource);

                    if (searchModel.selectedUserDistributionType.HasValue)
                    {
                        result.invoiceUserStatGridDataSource = GetUserGridData(queryData, userList.Select(x => x.ObjectID).ToList());
                        result.userGraphDataSource = GetUserGraphData(queryData, Common.CurrentResource.ObjectID, searchModel.selectedUserDistributionType.Value);
                    }

                    if (searchModel.selectedTermDistributionType.HasValue)
                    {
                        result.termGraphDataSource = GetTermGraphData(queryData, searchModel.selectedTerm.Value, searchModel.selectedTermDistributionType.Value);
                    }
                }
                else
                    throw new TTException("Lütfen Dönem seçiniz.");
            }
            return result;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public LoadResult GetProceduresForDashboard(DataSourceLoadOptions loadOptions)
        {
            LoadResult result = null;
            InvoiceAllInOneFormSearchModel parameters = JsonConvert.DeserializeObject<InvoiceAllInOneFormSearchModel>(loadOptions.Params.InvoiceAllInOneFormSearchModel.ToString());
            using (var objectContext = new TTObjectContext(true))
            {
                TTQueryDef queryDef = TTObjectDefManager.Instance.ObjectDefs["AccountTransaction"].QueryDefs["GetProceduresForDashboard"];
                Dictionary<string, object> paramList = new Dictionary<string, object>();
                if (parameters.selectedUser.Count > 0)
                    paramList.Add("USER", parameters.selectedUser[0]);
                else
                    throw new TTException("Kullanıcı seçilmedi.");
                paramList.Add("TERM", parameters.selectedTerm);

                result = DevexpressLoader.Load(objectContext, queryDef, loadOptions, paramList, "", "");

            }

            return result;
        }

        [HttpPost]
        [AtlasRequiredRoles(TTRoleNames.Fatura_Islemleri)]
        public LoadResult GetInconsistentForDashboard(DataSourceLoadOptions loadOptions)
        {
            LoadResult result = null;
            InvoiceAllInOneFormSearchModel parameters = JsonConvert.DeserializeObject<InvoiceAllInOneFormSearchModel>(loadOptions.Params.InvoiceAllInOneFormSearchModel.ToString());
            using (var objectContext = new TTObjectContext(true))
            {
                TTQueryDef queryDef = TTObjectDefManager.Instance.ObjectDefs["AccountTransaction"].QueryDefs["GetInconsistentForDashboard"];
                Dictionary<string, object> paramList = new Dictionary<string, object>();
                if (parameters.selectedUser.Count > 0)
                    paramList.Add("USER", parameters.selectedUser[0]);
                else
                    throw new TTException("Kullanıcı seçilmedi.");
                paramList.Add("TERM", parameters.selectedTerm);


                result = DevexpressLoader.Load(objectContext, queryDef, loadOptions, paramList, "", "");

            }

            return result;
        }
    }


    public class GridDTO
    {
        public Guid? ObjectID { get; set; }
        public string HospitalProtocolNo { get; set; }
        public string NameSurname { get; set; }
        public double Price { get; set; }
        public long? UniqueRefNo { get; set; }
    }

    public class InvoiceAllInOneFormInitViewModel
    {
        public List<ListBoxDTO> TermList = new List<ListBoxDTO>();
    }

    public class ListBoxDTO
    {
        public Guid? ObjectID { get; set; }
        public string Name { get; set; }
    }

    public class InvoiceAllInOneFormViewModel
    {
        public List<GridDTO> Last5Invoices { get; set; } = new List<GridDTO>();
        public List<GridDTO> invoiceUserStatGridDataSource { get; set; } = new List<GridDTO>();
        public List<GraphtDTO> termGraphDataSource { get; set; } = new List<GraphtDTO>();
        public List<GraphtDTO> userGraphDataSource { get; set; } = new List<GraphtDTO>();
        //public List<UserBasedProcedureGroupGridModel> userBasedProcedureGroupDataSource = new List<UserBasedProcedureGroupGridModel>();
        //public List<UserBasedInvoiceDifferenceGridModel> userBasedInvoiceDifferenceGridModel = new List<UserBasedInvoiceDifferenceGridModel>();
    }

    public class InvoiceAllInOneFormSearchModel
    {
        public Guid? selectedTerm { get; set; }
        public List<Guid?> selectedUser { get; set; }
        public byte? selectedUserDistributionType { get; set; }
        public byte? selectedTermDistributionType { get; set; }
    }

    public class GraphtDTO
    {
        public string Name { get; set; }
        public decimal TotalPrice { get; set; }
    }

    public class UserBasedProcedureGroupGridModel
    {
        public int OrderNo { get; set; }
        public string ProcedureType { get; set; }
        public string ProcedureName { get; set; }
        public string ProcedureCode { get; set; }
        public double Quantity { get; set; }
        public double Price { get; set; }
    }

    public class UserBasedInvoiceDifferenceGridModel
    {
        public int OrderNo { get; set; }
        public string HospitalProtocolNo { get; set; }
        public string DepartmentName { get; set; }
        public double MedulaPrice { get; set; }
        public double Quantity { get; set; }
        public double Price { get; set; }
    }
    #endregion InvoiceAllInOneForm
}