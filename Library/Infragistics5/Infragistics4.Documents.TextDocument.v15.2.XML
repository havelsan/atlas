<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics4.Documents.TextDocument.v15.2</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Documents.Parsing.LexerStateCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Documents.Parsing.LexerState"/> instances for the grammar. The collection contains all non-default lexer states and the 
            <see cref="P:Infragistics.Documents.Parsing.LexerStateCollection.DefaultLexerState"/> property exposes the default lexer state.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateCollection.Add(System.String)">
            <summary>
            Adds a new <see cref="T:Infragistics.Documents.Parsing.LexerState"/> with the specified name to the collection.
            </summary>
            <param name="name">The name to give to the new LexerState.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="name"/> belongs to a LexerState already in the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.LexerState.Name"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateCollection.Clear">
            <summary>
            Removes all members from this collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateCollection.Contains(Infragistics.Documents.Parsing.LexerState)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:Infragistics.Documents.Parsing.LexerState"/> exists within this collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="lexerState"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether a <see cref="T:Infragistics.Documents.Parsing.LexerState"/> with the specified <paramref key="value"/> exists within this collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.LexerState.Name"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Infragistics.Documents.Parsing.LexerState"/> with the specified name from the collection.
            </summary>
            <param key="name">The name of the LexerState to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.LexerState.Name"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateCollection.Remove(Infragistics.Documents.Parsing.LexerState)">
            <summary>
            Removes the specified <see cref="T:Infragistics.Documents.Parsing.LexerState"/> from the collection.
            </summary>
            <param key="lexerState">The LexerState to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="lexerState"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateCollection.TryGetLexerState(System.String,Infragistics.Documents.Parsing.LexerState@)">
            <summary>
            Tries to get a <see cref="T:Infragistics.Documents.Parsing.LexerState"/> with the specified name and returns whether one is in the collection.
            </summary>
            <param name="name">The name of the lexer state to find in the collection, case-insensitively.</param>
            <param name="lexerState">[Out] Contains the lexer state with the specified name or null if no lexer state has the name specified.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.LexerState.Name"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerStateCollection.Count">
            <summary>
            Gets the number of <see cref="T:Infragistics.Documents.Parsing.LexerState"/> instances in this collection.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerStateCollection.DefaultLexerState">
            <summary>
            Gets the default lexer state of a grammar, which is the starting lexer state when documents are lexically analyzed.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerStateCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.LexerState"/> at the specified index.
            </summary>
            <param name="index">The 0-based index of the Symbol to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.Parsing.LexerStateCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerStateCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Parsing.LexerState"/> with the specified name.
            </summary>
            <param key="name">The name of the LexerState to find.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when no lexer state exists with the specified name.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.LexerState.Name"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> instances contained within a <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Add(Infragistics.Documents.Parsing.TerminalSymbol,System.Boolean)">
            <summary>
            Adds the specified symbol to the collection.
            </summary>
            <remarks>
            <p class="body">
            If the <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> owning the collection is not the default lexer state, the symbol can optionally be added as an exit symbol.
            If it is an exit symbol, the lexer state will be exited when tokens associated with the symbol are created by the lexer. When a lexer state
            is exited, the lexer will go back to the state it was in before the state was entered. A LexerState will be entered when a token is created
            which is associated with a TerminalSymbol that has a <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LexerStateToEnter"/> set. If a TerminalSymbol is both an 
            exit symbol and it has a LexerStateToEnter set, the LexerStateToEnter will be ignored. The lexer cannot enter and exit a state at the same 
            time and exiting a lexer state takes precedence.
            </p>
            </remarks>
            <param name="symbol">The symbol to add to the collection.</param>
            <param name="isExitSymbol">Indicates whether the symbol should be an exit symbol for the lexer state.</param>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="symbol"/> does not belong to the same <see cref="T:Infragistics.Documents.Parsing.Grammar"/> as the owning <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="symbol"/> is the <see cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="isExitSymbol"/> is True and the owning <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> is the default lexer state.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Add(System.String,System.String,Infragistics.Documents.Parsing.TerminalSymbolComparison,System.Boolean)">
            <summary>
            Adds a new <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> to the collection with the specified name.
            </summary>
            <remarks>
            <p class="body">
            If the <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> owning the collection is not the default lexer state, the symbol can optionally be added as an exit symbol.
            If it is an exit symbol, the lexer state will be exited when tokens associated with the symbol are created by the lexer. When a lexer state
            is exited, the lexer will go back to the state it was in before the state was entered. A LexerState will be entered when a token is created
            which is associated with a TerminalSymbol that has a <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LexerStateToEnter"/> set. If a TerminalSymbol is both an 
            exit symbol and it has a LexerStateToEnter set, the LexerStateToEnter will be ignored. The lexer cannot enter and exit a state at the same 
            time and exiting a lexer state takes precedence.
            </p>
            </remarks>
            <param name="name">The <see cref="P:Infragistics.Documents.Parsing.Symbol.Name"/> of the new symbol.</param>
            <param name="value">
            The text which must be matched for the terminal symbol to be recognized within the text. If null, the <paramref name="name"/> will 
            be used as the value.
            </param>
            <param name="comparison">
            Indicates how the text should be interpreted: as a case-sensitive literal string, a case-insensitive literal string, or a regular expression.
            </param>
            <param name="isExitSymbol">Indicates whether the symbol should be an exit symbol for the lexer state.</param>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the owning <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> does not belong to a <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when a symbol of the owning Grammar already exists with the specified name.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="comparison"/> is not defined in the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbolComparison"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="isExitSymbol"/> is True and the owning <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> is the default lexer state.
            </exception>
            <returns>The TerminalSymbol instance which was added to the collection.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Add(System.String,System.String,System.Int16,System.Boolean,System.Int32)">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Clear">
            <summary>
            Clears all symbols from the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Contains(Infragistics.Documents.Parsing.TerminalSymbol)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> exists within the collection.
            </summary>
            <param name="symbol">The symbol to find in the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> with the specified name exists within the collection.
            </summary>
            <param name="name">The name of the symbol to find in the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.IndexOf(Infragistics.Documents.Parsing.TerminalSymbol)">
            <summary>
            Gets the index of the specified symbol or -1 if it doesn't exist.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
            <returns>The zero-based index of the symbol in the collection or -1 if it doesn't exist.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Insert(System.Int32,Infragistics.Documents.Parsing.TerminalSymbol,System.Boolean)">
            <summary>
            Inserts the specified symbol into the collection.
            </summary>
            <remarks>
            <p class="body">
            If the <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> owning the collection is not the default lexer state, the symbol can optionally be added as an exit symbol.
            If it is an exit symbol, the lexer state will be exited when tokens associated with the symbol are created by the lexer. When a lexer state
            is exited, the lexer will go back to the state it was in before the state was entered. A LexerState will be entered when a token is created
            which is associated with a TerminalSymbol that has a <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LexerStateToEnter"/> set. If a TerminalSymbol is both an 
            exit symbol and it has a LexerStateToEnter set, the LexerStateToEnter will be ignored. The lexer cannot enter and exit a state at the same 
            time and exiting a lexer state takes precedence.
            </p>
            </remarks>
            <param name="index">The zero-based index at which to insert the symbol.</param>
            <param name="symbol">The symbol to add to the collection.</param>
            <param name="isExitSymbol">Indicates whether the symbol should be an exit symbol for the lexer state.</param>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than the <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="symbol"/> does not belong to the same <see cref="T:Infragistics.Documents.Parsing.Grammar"/> as the owning <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="symbol"/> is the <see cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="isExitSymbol"/> is True and the owning <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> is the default lexer state.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Insert(System.Int32,System.String,System.String,Infragistics.Documents.Parsing.TerminalSymbolComparison,System.Boolean)">
            <summary>
            Inserts a new <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> into the collection with the specified name.
            </summary>
            <remarks>
            <p class="body">
            If the <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> owning the collection is not the default lexer state, the symbol can optionally be added as an exit symbol.
            If it is an exit symbol, the lexer state will be exited when tokens associated with the symbol are created by the lexer. When a lexer state
            is exited, the lexer will go back to the state it was in before the state was entered. A LexerState will be entered when a token is created
            which is associated with a TerminalSymbol that has a <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LexerStateToEnter"/> set. If a TerminalSymbol is both an 
            exit symbol and it has a LexerStateToEnter set, the LexerStateToEnter will be ignored. The lexer cannot enter and exit a state at the same 
            time and exiting a lexer state takes precedence.
            </p>
            </remarks>
            <param name="index">The zero-based index at which to insert the symbol.</param>
            <param name="name">The <see cref="P:Infragistics.Documents.Parsing.Symbol.Name"/> of the new symbol.</param>
            <param name="value">
            The value indicating the text which must be matched for the terminal symbol to be recognized within the text. If null, the 
            <paramref name="name"/> will be used as the value.
            </param>
            <param name="comparison">
            Indicates how the text should be interpreted: as a case-sensitive literal string, a case-insensitive literal string, or a regular expression.
            </param>
            <param name="isExitSymbol">Indicates whether the symbol should be an exit symbol for the lexer state.</param>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the owning <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> does not belong to a <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than the <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when a symbol of the owning Grammar already exists with the specified name.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="comparison"/> is not defined in the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbolComparison"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="isExitSymbol"/> is True and the owning <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> is the default lexer state.
            </exception>
            <returns>The TerminalSymbol instance which was inserted into the collection.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.IsExitSymbol(Infragistics.Documents.Parsing.TerminalSymbol)">
            <summary>
            Indicates whether the specified <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> will cause the lexer to exit the current <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> 
            when it is encountered during lexical analysis.
            </summary>
            <param name="symbol">The symbol to check.</param>
            <returns>True if the symbol exits the LexerState when found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> with the specified name from the collection.
            </summary>
            <param name="name">The name of the TerminalSymbol to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <returns>True if a non-terminal symbol with the name was in the collection before removal; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Remove(Infragistics.Documents.Parsing.TerminalSymbol)">
            <summary>
            Removes the specified symbol from the collection.
            </summary>
            <param name="symbol">The symbol to remove from the collection.</param>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
            <returns>True if the symbol was in the collection and removed; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.TryGetSymbol(System.String,Infragistics.Documents.Parsing.TerminalSymbol@)">
            <summary>
            Tries to get a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> with the specified name and returns whether one is in the collection.
            </summary>
            <param name="name">The name of the symbol to find in the collection.</param>
            <param name="symbol">[Out] Contains the symbol with the specified name or null if no symbol has the name specified.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Count">
            <summary>
            Gets the number of symbols in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> at the specified index.
            </summary>
            <param name="index">The 0-based index of the Symbol to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> with the specified name, case sensitively.
            </summary>
            <param name="name">
            The <see cref="P:Infragistics.Documents.Parsing.Symbol.Name"/> of the symbol to get.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when no TerminalSymbol with the specified name exists in the collection.
            </exception>
            <seealso cref="M:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.TryGetSymbol(System.String,Infragistics.Documents.Parsing.TerminalSymbol@)"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.LexerStateTerminalSymbolCollection.LexerState"/> which owns the collection.
            </summary>
        </member>
        <member name="T:Infragistics.CoreUtilities">
            <summary>
            Contains static helper methods.
            </summary>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetUnderlyingType(System.Type)">
            <summary>
            Takes a Type and returns the underlying (non-nullable) type, if the Type is nullable. If the specified type is not nullable, then the passed-in type is returned. 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetWeakReferenceTargetSafe(System.WeakReference)">
            <summary>
            Wraps the 'get' of the Target property in a try/catch to prevent unhandled exceptions
            </summary>
            <param name="weakReference">The WeakRefernce holding the target.</param>
            <returns>The Target or null if an exception was thrown.</returns>
        </member>
        <member name="T:Infragistics.Collections.WeakDictionary`2">
            <summary>
            IDictionary implementation that manages keys and/or values as weak references so they can be
            garbage collected.
            </summary>
            <typeparam name="TKey">Type of keys</typeparam>
            <typeparam name="TValue">Type of values</typeparam>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Single,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="loadFactor">Specifies load factor. Must be greater than 0 and less than or equal to 1.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.CreateKeyWeakReference(`0)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="key">Key object.</param>
            <returns>Weak reference to the key.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.CreateValueWeakReference(`1)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="value">Value object.</param>
            <returns>Weak reference to the value.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.ExpandCollapseHelper(System.Boolean)">
            <summary>
            Expands or contracts the size of storage based on the new count after an operation,
            like add, remove or clear, is performed.
            </summary>
            <param name="expandOnly">Specifies that the storage should only be expanded, and not contracted.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry to the dictionary. If an entry with the specified key already exists, 
            this method throws an exception.
            </summary>
            <param name="key">Key of the entry to add.</param>
            <param name="value">Value to associate with the key.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Clear">
            <summary>
            Removes all entries from the dictionary.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Compact(System.Boolean)">
            <summary>
            Removes entries from the dictionary where keys are no longer alive (have been garbage 
            collected). Note that keys can get garbage collected during the process of compacting 
            and therefore it's not guarrenteed that all the entries in the dictionary will be 
            with live keys after this operation is completed.
            </summary>
            <param name="removeEntriesWithNullValues">Whether to also remove entries where
            value is null or has been garbage collected.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if an entry with the specified key exists in the dictionary.
            </summary>
            <param name="key">Key to check for existence.</param>
            <returns>Returns true if an entry with the specified key exists in the dictionary.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key. Does nothing if the specified key doesn't exist.
            </summary>
            <param name="key">Key of the entry to remove.</param>
            <returns>True if an entry was removed. False if entry with the specified key was not found.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key. If the entry doesn't exist, returns false.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key. Set will add an entry for the key 
            if it doesn't already exist.
            </summary>
            <param name="key">Value associated with this key will be returned.</param>
            <returns>Value associated with the specified key.</returns>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Count">
            <summary>
            Returns the number of entries in the dictionary. Note that this will not take into account 
            any garbage collected items - they will be included in the count.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Keys">
            <summary>
            Returns the keys in the dictionary. Only keys with non-null values are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Values">
            <summary>
            Returns the values in the dictionary. Only values with non-null keys are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            Returns the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            Returns the values in the dictionary.
            </summary>
        </member>
        <member name="T:Infragistics.WeakEventHandler`3">
            <summary>
            Helper class for weak event handling.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TEventSource"></typeparam>
            <typeparam name="TEventArgs"></typeparam>
            <example>
            <code>
            <![CDATA[
            using System;
            using System.Collections;
            using System.Collections.Specialized;
            using System.ComponentModel;
            using Infragistics;
            
            namespace TestApp
            {
                public class TestClass
                {
                    private IEnumerable _itemsSource;
                    private WeakCollectionChangedHandler<TestClass> _weakCollectionChanged;
                    private WeakEventHandler<TestClass, ICollectionView, EventArgs> _weakCollectionViewCurrentChanged;
            
                    public IEnumerable ItemsSource
                    {
                        get { return _itemsSource; }
                        set { this.SetItemsSource(value); }
                    }
            
                    private void SetItemsSource(IEnumerable value)
                    {
                        if (this._itemsSource == value)
                        {
                            return;
                        }
            
                        if (this._weakCollectionChanged != null)
                        {
                            this._weakCollectionChanged.Detach();
                            this._weakCollectionChanged = null;
                        }
            
                        if (this._weakCollectionViewCurrentChanged != null)
                        {
                            this._weakCollectionViewCurrentChanged.Detach();
                            this._weakCollectionViewCurrentChanged = null;
                        }
            
                        this._itemsSource = value;
            
                        INotifyCollectionChanged notifyCollectionChanged = value as INotifyCollectionChanged;
                        if (notifyCollectionChanged != null)
                        {
                            this._weakCollectionChanged =
                                new WeakCollectionChangedHandler<TestClass>
                                    (
                                        this,
                                        notifyCollectionChanged,
                                        (instance, s, e) => instance.ItemsSource_CollectionChanged(s, e)
                                    );
            
                            notifyCollectionChanged.CollectionChanged += this._weakCollectionChanged.OnEvent;
                        }
            
                        ICollectionView collectionView = value as ICollectionView;
                        if (collectionView != null)
                        {
                            this._weakCollectionViewCurrentChanged =
                                new WeakEventHandler<TestClass, ICollectionView, EventArgs>
                                    (
                                        this,
                                        collectionView,
                                        (instance, s, e) => instance.ItemsSource_CurrentChanged(s, e),
                                        (weakHandler, eventSource) => eventSource.CurrentChanged -= weakHandler.OnEvent
                                    );
            
                            collectionView.CurrentChanged += this._weakCollectionViewCurrentChanged.OnEvent;
                        }
                    }
            
                    private void ItemsSource_CurrentChanged(object sender, EventArgs e)
                    {
                        // ...
                    }
            
                    private void ItemsSource_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
                    {
                        // ...
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Infragistics.WeakEventHandler`3.#ctor(`0,`1,System.Action{`0,System.Object,`2},System.Action{Infragistics.WeakEventHandler{`0,`1,`2},`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.WeakEventHandler`3"/> class.
            </summary>
            <param name="instance">The short living object that wants to recieve events from the long living <paramref name="eventSource"/> object.</param>
            <param name="eventSource">The long living object that raises the event.</param>
            <param name="onEventAction">The delegate that will be invoked when the event is raised.</param>
            <param name="onDetachAction">The delegate that will be invoked when the event should be detached</param>
            <remarks>
            The delegates <paramref name="onEventAction"/> and <paramref name="onDetachAction"/> must not refer to instance methods.
            </remarks>
        </member>
        <member name="M:Infragistics.WeakEventHandler`3.OnEvent(System.Object,`2)">
            <summary>
            Handler for the event raised by the long living object.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="eventArgs">The <b>TEventArgs</b> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.WeakEventHandler`3.Detach">
            <summary>
            Invokes <see cref="P:Infragistics.WeakEventHandler`3.OnDetachAction"/> that handles the detaching of <see cref="M:Infragistics.WeakEventHandler`3.OnEvent(System.Object,`2)"/> from the event.
            </summary>
        </member>
        <member name="P:Infragistics.WeakEventHandler`3.OnEventAction">
            <summary>
            Gets or sets the delegate that will be invoked when the event is raised.
            </summary>
            <remarks>
            The delegate must not refer to an instance method.
            </remarks>
        </member>
        <member name="P:Infragistics.WeakEventHandler`3.OnDetachAction">
            <summary>
            Gets or sets the delegate that will be invoked when the event should be detached.
            </summary>
            <remarks>
            The delegate must not refer to an instance method.
            </remarks>
        </member>
        <member name="T:Infragistics.WeakCollectionChangedHandler`1">
            <summary>
            Helper class for weak handling of <c>System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged</c>.
            </summary>
            <typeparam name="TInstance">The type of the instance that will recieve the events.</typeparam>
            <remarks>
            See <see cref="T:Infragistics.WeakEventHandler`3"/> for a sample.
            </remarks>
        </member>
        <member name="M:Infragistics.WeakCollectionChangedHandler`1.#ctor(`0,System.Collections.Specialized.INotifyCollectionChanged,System.Action{`0,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.WeakCollectionChangedHandler`1"/> class.
            </summary>
            <param name="instance">The short living object that wants to recieve events from the long living <paramref name="eventSource"/> object.</param>
            <param name="eventSource">The long living object that raises the event.</param>
            <param name="onEventAction">The delegate that will be invoked when the event is raised.</param>
        </member>
        <member name="T:Infragistics.WeakPropertyChangedHandler`1">
            <summary>
            Helper class for weak handling of <c>System.ComponentModel.INotifyPropertyChanged.PropertyChanged</c>.
            </summary>
            <typeparam name="TInstance">The type of the instance that will recieve the events.</typeparam>
            <remarks>
            See <see cref="T:Infragistics.WeakEventHandler`3"/> for a sample.
            </remarks>
        </member>
        <member name="M:Infragistics.WeakPropertyChangedHandler`1.#ctor(`0,System.ComponentModel.INotifyPropertyChanged,System.Action{`0,System.Object,System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.WeakPropertyChangedHandler`1"/> class.
            </summary>
            <param name="instance">The short living object that wants to recieve events from the long living <paramref name="eventSource"/> object.</param>
            <param name="eventSource">The long living object that raises the event.</param>
            <param name="onEventAction">The delegate that will be invoked when the event is raised.</param>
        </member>
        <member name="T:Infragistics.Shared.AssemblyVersion">
            <summary>
            Contains version information for the Infragistics assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.MajorMinor">
            <summary>
            Major.Minor number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Build">
            <summary>
            Build number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Revision">
            <summary>
            Revision number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Version">
            <summary>
            Assembly version number
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.ToolBoxBitmapFolder">
            <summary>
            Location of the resources for toolbox bitmaps. 
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.CompanyName">
            <summary>
            Assembly company name
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.EndCopyrightYear">
            <summary>
            End year of assembly copyright
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.SatelliteContractVersion">
            <summary>
            The assembly version number for the satellite assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Configuration">
            <summary>
            The current build configuration for the assembly.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.UnitTestPublicKey">
            <summary>
            Public key for the unit test assemblies.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentResourceCustomizer">
            <summary>
            Class used to provide the ability to customize resource strings.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.#ctor">
            <summary>
            Creates a new instance of the TextDocumentResourceCustomizer class.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.GetCustomizedString(System.String)">
            <summary>
            Gets the customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource that was customized.</param>
            <returns>The customized string or null if the resource wasn't customized.</returns>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetAllCustomizedStrings">
            <summary>
            Clears all strings customized by calls to <see cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)"/> method.
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)">
            <summary>
            Resets a customized string identified by the specified string resource name so that it will load from the resource file.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)">
            <summary>
            Sets a customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <param name="customizedText">The customized string. If null this has the same effect as calling <see cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)"/></param>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentResources">
            <summary>
            Exposes a <see cref="T:Infragistics.Documents.TextDocumentResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocumentResources.Customizer"/> 
            <seealso cref="T:Infragistics.Documents.TextDocumentResourceCustomizer"/> 
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResources.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResources.GetString(System.String)">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResources.GetObject(System.String)">
            <summary>
            Returns the resource object using the specified name.
            </summary>
            <param name="name">Name of the resource item</param>
            <returns>An object containing the specified resource</returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentResources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.TextDocumentResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextDocumentResourceCustomizer"/> 
        </member>
        <member name="T:Infragistics.Documents.Parsing.LanguageGenerator">
            <summary>
            Generates code to create a <see cref="T:Infragistics.Documents.Parsing.LanguageBase"/>-derived class based on an existing <see cref="T:Infragistics.Documents.Parsing.Grammar"/> instance.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageGenerator.GenerateClass(Infragistics.Documents.Parsing.LanguageGenerationParams)">
            <summary>
            Generates code to create a <see cref="T:Infragistics.Documents.Parsing.LanguageBase"/> derived class based on an existing <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </summary>
            <param name="parameters">The parameters describing how the class should be generated.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="parameters"/> is null.
            </exception>
            <returns>The contents of the generated file.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageGenerator.GenerateClass(Infragistics.Documents.Parsing.LanguageGenerationParams,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Generates code to create a <see cref="T:Infragistics.Documents.Parsing.LanguageBase"/> derived class based on an existing <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </summary>
            <param name="parameters">The parameters describing how the class should be generated.</param>
            <param name="stream">The stream in which to write the code.</param>
            <param name="encoding">The encoding in which to write the code. If null, UTF8 will be used.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="parameters"/> is null.
            </exception>
        </member>
        <member name="T:Infragistics.Documents.Parsing.LanguageGenerationParams">
            <summary>
            Contains the parameters available when generating a language class file using the <see cref="T:Infragistics.Documents.Parsing.LanguageGenerator"/>.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.LanguageGenerator.GenerateClass(Infragistics.Documents.Parsing.LanguageGenerationParams)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.LanguageGenerator.GenerateClass(Infragistics.Documents.Parsing.LanguageGenerationParams,System.IO.Stream,System.Text.Encoding)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageGenerationParams.#ctor(Infragistics.Documents.Parsing.Grammar,System.String,System.String,Infragistics.Documents.Parsing.CodeFileFormat)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.LanguageGenerationParams"/> instance.
            </summary>
            <param name="grammar">The grammar for which the language will be generated.</param>
            <param name="className">The name of the class to be generated.</param>
            <param name="namespaceName">The namespace of the class to be generated.</param>
            <param name="format">The format in which generated code file will be created.</param>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageGenerationParams.ClassName">
            <summary>
            Gets or sets the name of the class to be generated.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageGenerationParams.Format">
            <summary>
            Gets or sets the format in which generated code file will be created.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageGenerationParams.GenerateSymbolNameConstants">
            <summary>
            Gets or sets the value indicating whether a nested class with symbol names should be generated.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageGenerationParams.Grammar">
            <summary>
            Gets a the <see cref="P:Infragistics.Documents.Parsing.LanguageGenerationParams.Grammar"/> for which the language will be generated.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageGenerationParams.IsSealed">
            <summary>
            Gets or sets a the value indicating whether the class to be generated will be marked as sealed.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageGenerationParams.IsPartial">
            <summary>
            Gets or sets a the value indicating whether the class to be generated will be marked as partial.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageGenerationParams.IsPublic">
            <summary>
            Gets or sets the value indicating whether the class to be generated will be marked as public or internal.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageGenerationParams.NamespaceName">
            <summary>
            Gets or sets the namespace of the class to be generated.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageGenerationParams.Summary">
            <summary>
            Gets or sets the text which appears in the summary tag of the documentation comments for the generated class.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.Diagnostic">
            <summary>
            Represents and error, warning, or information associated with a node in the parse tree.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Diagnostic.#ctor(Infragistics.Documents.Parsing.TextSpan,System.String,Infragistics.Documents.Parsing.DiagnosticSeverity)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.Diagnostic"/> instance.
            </summary>
            <param name="relativeSpan">The span indicating the location of the diagnostic message relative to the <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.FullSpan"/> of the node to which it relates.</param>
            <param name="message">The message associated with the diagnostic message.</param>
            <param name="severity">The severity level of the diagnostic message.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="message"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="severity"/> is not defined in the <see cref="T:Infragistics.Documents.Parsing.DiagnosticSeverity"/> enumeration.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Diagnostic.ToString">
            <summary>
            Gets a string representation of the error.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Diagnostic.Message">
            <summary>
            Gets the message associated with the diagnostic message.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Diagnostic.RelativeSpan">
            <summary>
            Gets the span indicating the location of the diagnostic message relative to the <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.FullSpan"/> of the node to which it relates.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Diagnostic.Severity">
            <summary>
            Gets the severity level of the diagnostic message.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.NodeDiagnostic">
            <summary>
            Represents and error, warning, or information associated with a node in the parse tree.
            </summary> 
        </member>
        <member name="M:Infragistics.Documents.Parsing.NodeDiagnostic.Equals(System.Object)">
            <summary>
            Determines whether the specified object equals this <see cref="T:Infragistics.Documents.Parsing.NodeDiagnostic"/> value.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns>True if obj is another NodeDiagnostic with the same values; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NodeDiagnostic.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Infragistics.Documents.Parsing.NodeDiagnostic"/> value.
            </summary>
            <returns>A hash code for the NodeDiagnostic value.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NodeDiagnostic.ToString">
            <summary>
            Gets a string representation of the error.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NodeDiagnostic.op_Equality(Infragistics.Documents.Parsing.NodeDiagnostic,Infragistics.Documents.Parsing.NodeDiagnostic)">
            <summary>
            Determines whether two <see cref="T:Infragistics.Documents.Parsing.NodeDiagnostic"/> values are equal.
            </summary>
            <returns>True if the values are equal; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NodeDiagnostic.op_Inequality(Infragistics.Documents.Parsing.NodeDiagnostic,Infragistics.Documents.Parsing.NodeDiagnostic)">
            <summary>
            Determines whether two <see cref="T:Infragistics.Documents.Parsing.NodeDiagnostic"/> values are not equal.
            </summary>
            <returns>True if the values are not equal; False otherwise.</returns>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NodeDiagnostic.Message">
            <summary>
            Gets the message associated with the error.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NodeDiagnostic.Node">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> with which the error is associated.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NodeDiagnostic.Severity">
            <summary>
            Gets the severity level of the diagnostic message.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NodeDiagnostic.SnapshotSpan">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.NodeDiagnostic.SnapshotSpan"/> indicating the location of the error.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NodeDiagnostic.Span">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> indicating the location of the error.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.EbnfSerializationSettings">
            <summary>
            Contains the various settings used to customize the Ebnf serialization process.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EbnfSerializationSettings.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.EbnfSerializationSettings"/> instance.
            </summary>
            <param name="useAlternateSyntax">Indicates whether the alternate Ebnf format should be used.</param>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfSerializationSettings.UseAlternateSyntax">
            <summary>
            Gets or sets the value which indicates whether the alternate Ebnf format should be used.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.EbnfLoadError">
            <summary>
            Encapsulates an error that was encountered while attempting to
            import a grammar definition script.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EbnfLoadError.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfLoadError.CharacterPosition">
            <summary>
            Gets the position of the error within the EBNF text.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfLoadError.Column">
            <summary>
            Gets the column within the line of the error.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.EbnfLoadError.LineNumber"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfLoadError.Description">
            <summary>
            Gets the human-readable description of the error.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfLoadError.LineNumber">
            <summary>
            Gets the line number of the error within the EBNF text.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.EbnfLoadError.Column"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfLoadError.Reason">
            <summary>
            Returns a constant which identifies the reason for the error.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfLoadError.Text">
            <summary>
            Gets the erroneous text in the EBNF file.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.EbnfLoadResult">
            <summary>
            Describes the result of a grammar definition import operation.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EbnfLoadResult.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfLoadResult.Errors">
            <summary>
            Gets the read-only collection of <see cref="T:Infragistics.Documents.Parsing.EbnfLoadError"/> instances describing the errors in the parsed EBNF file.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfLoadResult.Grammar">
            <summary>
            Gets the grammar parsed from the EBNF file if there were no errors in the file.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.EbnfLoadResult.Errors"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EbnfLoadResult.Success">
            <summary>
            Get the value indicating whether the import operation was successful. 
            If True, <see cref="P:Infragistics.Documents.Parsing.EbnfLoadResult.Grammar"/> will be the instance representing the grammar defined by the EBNF file.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.EbnfLoadResult.Grammar"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.CodeFileFormat">
            <summary>
            Represents the various formats in which generated code files can be created.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.LanguageGenerationParams.Format"/>
        </member>
        <member name="F:Infragistics.Documents.Parsing.CodeFileFormat.CSharp">
            <summary>
            The file should be generated in the C# file format.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.CodeFileFormat.VisualBasic">
            <summary>
            The file should be generated in the Visual Basic file format.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.DiagnosticSeverity">
            <summary>
            Indicates the severity of a parse error.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.DiagnosticSeverity.Error">
            <summary>
            The error is incorrect and the document cannot be used until it is fixed.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.DiagnosticSeverity.Warning">
            <summary>
            The error is a warning for something that might not have been intended by the user.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.DiagnosticSeverity.Information">
            <summary>
            The error is information to indicate something to the user.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.EbnfLoadErrorReason">
            <summary>
            Constants which describe the reason for an import error.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.AttributeBlockWithinRule">
            <summary>
            An attribute block has been defined in the middle of a rule.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.ContradictorySyntacticException">
            <summary>
            A syntactic exception appears to prevent all variations of the original content.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.DefaultLexerStateCannotHaveExitSymbols">
            <summary>
            A symbol is marked as an exit symbol in the default lexer state, which is not allowed to have exit symbols.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.DuplicateSymbolName">
            <summary>
            A symbol name is already in use by another symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.DuplicateLexerStateName">
            <summary>
            A <see cref="T:Infragistics.Documents.Parsing.LexerState"/> name is already in use by another LexerState.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.EmptyGrammarDefinition">
            <summary>
            The grammar definition is empty.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.EndOfStreamSymbolReferenced">
            <summary>
            The <see cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/> was referenced by a rule that is not the start symbol or the start symbol is not a well-formed start symbol with 
            a single non-terminal symbol followed by the end of stream symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.GrammarPropertiesNotAtTop">
            <summary>
            The grammar properties are not at the top of the EBNF file.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.GroupingSymbolMismatch">
            <summary>
            An grouping symbol, such as an open parenthesis or closing parenthesis was encountered without a corresponding opening/closing symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.InsignificantSymbolReferenced">
            <summary>
            A non-terminal symbol contains a reference to an insignificant terminal symbol, which can never be included in the 
            non-terminal symbol because the syntax analyzer ignores them.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.InvalidPropertyValue">
            <summary>
            The specified value is not valid for the property to which it is being assigned.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.InvalidRegularExpression">
            <summary>
            An invalid regular expression pattern was specified.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.InvalidSymbolName">
            <summary>
            A symbol has an invalid name. The name must be an underscore or letter followed by zero or more letters, numbers, or underscores.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.InvalidSyntacticException">
            <summary>
            A syntactic exception has an invalid exception portion. The exception portion of a syntactic exception rule cannot use recursively defined 
            non-terminal symbols directly or indirectly.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.InvalidXml">
            <summary>
            A special sequence contains invalid XML content.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.LexerStateCannotHaveSpecialSymbols">
            <summary>
            The <see cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/> or <see cref="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol"/> has been added to a lexer state.
            Those symbols are implicitly included in all lexer states and cannot be added to them directly.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.MissingAssignmentSymbol">
            <summary>
            The statement does not contain equals sign following the declaration.
            All statements must contain one and only one assignment symbol following the declaration.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.MissingDeclaration">
            <summary>
            The left-hand side of the statement cannot be parsed into a valid identifier.
            All statements must begin with a valid identifier which is not enclosed in quotes.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.MissingEndOfStatement">
            <summary>
            The statement does not contain a semicolon.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.MissingNameProperty">
            <summary>
            A declaration is missing a value for the 'Name' property.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.MissingOperator">
            <summary>
            An operator is expected at the specified location. This is usually caused by the occurrence of two adjacent operands.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.MissingValue">
            <summary>
            An XML tag has no value specified.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.MissingValueProperty">
            <summary>
            A <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> declaration is missing the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Value"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.MultipleLexerStates">
            <summary>
            There are multiple entered LexerStates defined for a symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.OpenLiteralString">
            <summary>
            An opening quote symbol was encountered without a closing one.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.StartSymbolIsReferenced">
            <summary>
            A symbol is referenced which is a well formed start symbol for the grammar. The start symbol can only be referenced
            if it is not defined as having a single production of a non-terminal followed by the end of stream symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.UnbalancedXmlTag">
            <summary>
            An opening XML tag was encountered without a corresponding closing one,
            or a closing XML tag was encountered without a corresponding opening one.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.UndeclaredReference">
            <summary>
            A reference to an identifier that was never declared was encountered.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.UnexpectedAssignmentSymbol">
            <summary>
            The grammar contains an equals sign in an area where it is not expected.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.UnexpectedIdentifier">
            <summary>
            The grammar contains an identifier in an area where it is not expected.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.UnexpectedOperator">
            <summary>
            The grammar contains an operator in an area where it is not expected.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.UnrecognizedContent">
            <summary>
            A statement contains content which is not recognizable.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.UnrecognizedSymbolReferenced">
            <summary>
            The <see cref="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol"/> has been added to a rule for a non-terminal symbol. 
            The unrecognized symbol cannot be used in the syntax tree.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.UnrecognizedXmlAttribute">
            <summary>
            An XML attribute was encountered, but its name was not recognized.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EbnfLoadErrorReason.UnrecognizedXmlTag">
            <summary>
            A well-formed XML tag was encountered, but its name was not recognized.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.GrammarWarningType">
            <summary>
            Represents the types of warnings which can occur when analyzing a <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.Analyze(Infragistics.Documents.Parsing.GrammarAnalysisOptions)"/>
        </member>
        <member name="F:Infragistics.Documents.Parsing.GrammarWarningType.Ambiguity">
            <summary>
            An ambiguity will occur if the parser is in a certain state and a specific token is processed, which could impact performance.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.GrammarWarningType.ComplexNonTerminalSymbol">
            <summary>
            A non-terminal symbol is very complex (contains over 100 productions) and may need to be simplified by moving the contents of alternation 
            or optional sub-rules to their own non-terminal symbols.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.GrammarWarningType.SymbolCannotBeParsed">
            <summary>
            A non-terminal symbol or a significant terminal symbol cannot be used in the parse tree because it is not directly or indirectly referenced
            by the start symbol of the Grammar.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.GrammarWarningType.UnnecessarySyntaxRule">
            <summary>
            A <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> is unnecessary or redundant and can be removed.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.LanguageElement">
            <summary>
            Represents the various types of language elements which can be represented by a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/>.
            </summary>
            <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElement"/>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.Undefined">
            <summary>
            No language element is specified.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.Comment">
            <summary>
            Represents a comment, which is by default insignificant to the syntax analyzer.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.NewLine">
            <summary>
            Represents a newline (either \r, \n, or \r\n), which is by default insignificant to the syntax analyzer.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.Whitespace">
            <summary>
            Represents contiguous whitespace, which is by default insignificant to the syntax analyzer.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.ReservedKeyword">
            <summary>
            Represents a reserved keyword in a language, which is by default significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.ContextSensitiveKeyword">
            <summary>
            Represents a context-sensitive keyword in a language, which is by default significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.Identifier">
            <summary>
            Represents an identifier in a language, which is by default significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.StringLiteral">
            <summary>
            Represents a string or character literal, which is by default significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.NumericLiteral">
            <summary>
            Represents a numeric literal, which is by default significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.DateLiteral">
            <summary>
            Represents a date or time literal, which is by default significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.Operator">
            <summary>
            Represents an operator symbol, such as +, -, >, |, etc., which is by default significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.Punctuation">
            <summary>
            Represents a punctuation symbol, such as a semicolon, parentheses, braces, etc., which is by default significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.Unrecognized">
            <summary>
            Represents content not recognized by any symbol in the active <see cref="T:Infragistics.Documents.Parsing.LexerState"/>, which is significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.EndOfStream">
            <summary>
            Represents the <see cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/>, which is significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.LanguageElement.Custom">
            <summary>
            Represents content with a custom language element specified by the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElementName"/>, which is by default significant to the syntax analyzer. 
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SyntaxRuleType">
            <summary>
            Represents the types of rules which which determine whether a <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> has been correctly matched in the 
            text being parsed.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxRule.Type"/>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxRuleType.Empty">
            <summary>
            An empty set of symbols. This rule succeed by matching nothing from the document.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxRuleType.Exception">
            <summary>
            A syntactic exception rule. This rule can only succeed if its sub-rule matches content and the exception rule does not succeed for the same content.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxRuleType.Factor">
            <summary>
            A syntactic factor rule. The sub-rule must be repeated a specified number of times for the factor rule to succeed.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxRuleType.SymbolReference">
            <summary>
            A symbol reference rule. The symbol associated with the rule must be found in the document for the rule is succeed.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxRuleType.Alternation">
            <summary>
            A logical 'or' is applied between each of the sub-rules. One of the sub-rules must succeed for the alternation rule to succeed.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxRuleType.Concatenation">
            <summary>
            The sub-rules are logically concatenated. Each sub-rule must succeed in order for the concatenation rule to succeed.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxRuleType.Optional">
            <summary>
            The sub-rule may or may not succeed. Either way, the optional rule will succeed.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxRuleType.Repetition">
            <summary>
            The sub-rule can be repeated zero or more times for the repetition rule to succeed.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SyntaxTreePruningMode">
            <summary>
            Constants which describe whether a non-terminal <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> should appear in the <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/>
            produced when a document is parsed.
            </summary>
            <remarks>
            <p class="body">
            The term "pruning" refers to the process of removing non-terminal syntax nodes which, for whatever reason, are not considered 
            important to the consumer of the syntax tree.
            </p>
            <p class="body">
            Terminal nodes are never removed from a syntax tree, since they always represent significant content.
            </p>
            <p class="body">
            Child nodes of non-terminal nodes which are pruned from the tree become immediate children of the first ancestor node that is 
            not pruned.
            </p>
            <p class="body">
            By default, non-terminal nodes which have only one child, where that child is itself a non-terminal node, do not appear in the 
            syntax tree. Non-terminal nodes whose name is prefixed with an underscore ('_') also do not appear. This is the equivalent of 
            the BasedOnChildrenAndName value.
            </p>
            <p class="body">
            Pruning can be overridden on individual non-terminal symbols by setting their <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.PreventPruning"/> 
            value to True, or in EBNF by marking a non-terminal definition with a special sequence like this: "?&lt;PreventPruning/&gt;?"
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.SyntaxTreePruningMode"/>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxTreePruningMode.None">
            <summary>
            All non-terminal nodes appear in the tree.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxTreePruningMode.BasedOnChildren">
            <summary>
            Non-terminal syntax nodes which have zero children or only one child, where that child is itself a non-terminal syntax node, are not included in
            the syntax tree.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxTreePruningMode.BasedOnName">
            <summary>
            Non-terminal syntax nodes which are associated with a <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> whose name begins with an underscore ('_') 
            are considered to be used internally for the purpose of grouping certain constructs, and do not appear in the syntax tree.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.SyntaxTreePruningMode.BasedOnChildrenAndName">
            <summary>
            Combines the BasedOnChildren and BasedOnName values. This is the default value for <see cref="P:Infragistics.Documents.Parsing.Grammar.SyntaxTreePruningMode"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.TerminalSymbolComparison">
            <summary>
            Constants which determine the manner in which a terminal
            symbol's value is compared to values in the compilation
            source.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.TerminalSymbolComparison.Literal">
            <summary>
            The value associated with the symbol is a literal string.
            The syntax parser will compare values in the compilation
            target with the associated value and generate an error if
            the values do not match exactly. The comparison under this
            setting is case-sensitive.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.TerminalSymbolComparison.LiteralIgnoreCase">
            <summary>
            Same as the 'Literal' setting, except that character casing
            is ignored for the string comparisons.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.TerminalSymbolComparison.RegularExpression">
            <summary>
            The value associated with the symbol is implied to be a regular
            expression pattern. The
            <a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.aspx">System._Text.RegularExpressions.Regex</a>
            class is used to determine whether values in the compilation target
            match the pattern assigned to the terminal symbol's value.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.GlobalAmbiguityContext">
            <summary>
            Represents a global ambiguity detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. This object contains two alternate parses for the text (if there are more 
            than two alternate parses, multiple contexts will be created). Code handling global ambiguities can determine which of the two alternate 
            parse sub-trees should be used in the final tree by setting <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/>.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Documents.Parsing.LanguageBase.OnGlobalAmbiguityDetected(Infragistics.Documents.Parsing.GlobalAmbiguityContext)"/>
            <seealso cref="E:Infragistics.Documents.Parsing.CustomLanguage.GlobalAmbiguityDetected"/>
            <seealso cref="P:Infragistics.Documents.GlobalAmbiguityDetectedEventArgs.Context"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.IsErrorHandling">
            <summary>
            Gets the value indicating whether the parser is currently handling errors, which could produce extra global ambiguities that
            wouldn't occur during a normal parse.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot">
            <summary>
            Gets or sets the root node of the sub-tree which should be chosen when constructing the final parse tree.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. Code handling global ambiguities can determine which sub-trees should be used 
            in the final tree by setting PreferredSubTreeRoot.
            </p>
            <p class="note">
            <b>Note:</b> The only valid values are null or the instances returned by <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot1"/> or <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot2"/>.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified value is not null, <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot1"/>, or <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot2"/>.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot1"/>
            <seealso cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot2"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot1">
            <summary>
            Gets the root node of the first sub-tree in which the ambiguous text can be parsed.
            </summary>
            <remarks>
            <p class="body">
            To have the first sub-tree used in the final parse tree for the document, set the value on the <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/>.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/>
            <seealso cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot2"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot2">
            <summary>
            Gets the root node of the second sub-tree in which the ambiguous text can be parsed.
            </summary>
            <remarks>
            <p class="body">
            To have the second sub-tree used in the final parse tree for the document, set the value on the <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/>.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/>
            <seealso cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.SubTreeRoot1"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.GLRParser">
            <summary>
            This parsing algorithm is based on the Elkhound parsing implementation and optimizations. 
            Copyright (c) 2002, Regents of the University of California. All rights reserved.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.Grammar">
            <summary>
            Represents a context-free grammar whose production rules are used to parse and validate textual input.
            </summary>
            <remarks>
            <p class="body">
            The syntax of a language is defined by its grammar. This formal definition provides a way to define what constitutes
            a legal sequence of characters in a concise, recursive manner.
            </p>
            <p class="body">
            The main components of a grammar definition are represented by the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> and 
            <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> instances stored in the grammar.
            </p>
            <p class="body">
            A TerminalSymbol represents the specific character pattern which must be matched in order for the corresponding rule to be satisfied. 
            For example, a TerminalSymbol for the string "class" would evaluate the input string and signify success if it begins with "class", 
            and signify failure if it does not. More complex evaluations are made possible through the use of regular expression patterns.
            </p>
            <p class="body">
            A NonTerminalSymbol represents a zero or more symbols, which can either be TerminalSymbols or NonTerminalSymbols. In addition, it can
            represent multiple sets of symbols. For example, let's say "class" is defined as a TerminalSymbol and a NonTerminalSymbol is defined in an 
            EBNF file as "Classes = class | (Classes, class);" This indicates that. This means that for a "Classes" NonTerminalSymbol to be recognized 
            in a parsed document, there must be either a "class" TerminalSymbol or a "Classes" NonTerminalSymbol followed by a "class" TerminalSymbol.
            In the latter, the nested "Classes" symbol could also either represent a "class" TerminalSymbol or a "Classes" NonTerminalSymbol followed 
            by a "class" TerminalSymbol. Therefore, "Classes" represents one or more "class" TerminalSymbols.
            </p>
            <p class="body">
            The rules which define what can be represented by a NonTerminalSymbol are specified with the <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/> 
            value or by defining the symbols in an EBNF file and using the <see cref="M:Infragistics.Documents.Parsing.Grammar.LoadEbnf(System.IO.Stream,System.Text.Encoding)"/> method.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.LoadEbnf(System.String)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.LoadEbnf(System.IO.Stream,System.Text.Encoding)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.SaveEbnf(Infragistics.Documents.Parsing.EbnfSerializationSettings)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.SaveEbnf(System.IO.Stream,System.Text.Encoding,Infragistics.Documents.Parsing.EbnfSerializationSettings)"/>
            <a href="IG_SPE_EBNF_Format.html">EBNF File Format</a>
        </member>
        <member name="F:Infragistics.Documents.Parsing.Grammar.DefaultWhitespacePattern">
            <summary>
            The default regular expression pattern used to identify whitespace characters other than newlines: [ \t]+
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Infragistics.Documents.Parsing.Grammar">Grammar</see>
            class.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.AddProduction(System.Int32,System.Int32,System.Int32[])">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.Analyze(Infragistics.Documents.Parsing.GrammarAnalysisOptions)">
            <summary>
            Analyzes the <see cref="T:Infragistics.Documents.Parsing.Grammar"/> and reports a list of warnings which may help the Grammar creator find and fix issues.
            </summary>
            <param name="analysisOptions">The options which can be specified to customize the analysis of the grammar.</param>
            <remarks>
            <p class="note">
            <b>Note:</b> the Grammar symbols and rules should be fully initialized before analysis because the Grammar will be immutable after it is
            analyzed.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.StartSymbol"/> of the Grammar is not set.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when a <see cref="T:Infragistics.Documents.Parsing.LexerState"/> does not have any enter symbols defined.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when a <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> in the grammar doesn't have a <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/> defined or it owns a rule 
            which is not initialized correctly.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the start symbol never directly or indirectly references a terminal symbol.
            </exception>
            <returns>A <see cref="T:Infragistics.Documents.Parsing.GrammarAnalysisResult"/> which has a list of warnings.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.StartSymbol"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.Clone">
            <summary>
            Creates a mutable copy of the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.GetAllSymbols">
            <summary>
            Returns a collection of all symbols in the grammar.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NonTerminalSymbols"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NewLineSymbol"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.WhitespaceSymbol"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol"/>
            <seealso cref="P:Infragistics.Documents.Parsing.LexerState.Symbols"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.InitializeFrom(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Clears all data in the <see cref="T:Infragistics.Documents.Parsing.Grammar"/> and copies the data from the specified Grammar.
            </summary>
            <param name="source">The instance from which the Grammar is to be initialized.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="source"/> is equal to the Grammar on which InitializeFrom is called.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the target Grammar is immutable.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.LoadEbnf(System.String)">
            <summary>
            Attempts to create a <see cref="T:Infragistics.Documents.Parsing.Grammar"/> instance represented by the specified EBNF content.
            </summary>
            <param name="ebnfContent">
            A string containing the EBNF (Extended Backus-Naur Form) content.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="ebnfContent"/> is null.
            </exception>
            <returns>
            An <see cref="T:Infragistics.Documents.Parsing.EbnfLoadResult"/> instance which describes the result of the parse operation and contains a reference
            to the created Grammar instance if there were no errors.
            </returns>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.SaveEbnf(Infragistics.Documents.Parsing.EbnfSerializationSettings)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.SaveEbnf(System.IO.Stream,System.Text.Encoding,Infragistics.Documents.Parsing.EbnfSerializationSettings)"/>
            <a href="IG_SPE_EBNF_Format.html">EBNF File Format</a>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.LoadEbnf(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Attempts to create a <see cref="T:Infragistics.Documents.Parsing.Grammar"/> instance represented by the specified EBNF file stream.
            </summary>
            <param name="stream">
            A stream containing the EBNF (Extended Backus-Naur Form) file.
            </param>
            <param name="encoding">
            The character encoding used in the file. UTF8 will be used if it is not specified.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="stream"/> is null.
            </exception>
            <returns>
            An <see cref="T:Infragistics.Documents.Parsing.EbnfLoadResult"/> instance which describes the result of the parse operation and contains a reference
            to the created Grammar instance if there were no errors.
            </returns>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.SaveEbnf(Infragistics.Documents.Parsing.EbnfSerializationSettings)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.SaveEbnf(System.IO.Stream,System.Text.Encoding,Infragistics.Documents.Parsing.EbnfSerializationSettings)"/>
            <a href="IG_SPE_EBNF_Format.html">EBNF File Format</a>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.SaveEbnf(Infragistics.Documents.Parsing.EbnfSerializationSettings)">
            <summary>
            Saves the <see cref="T:Infragistics.Documents.Parsing.Grammar"/> represent in the EBNF file format and returns the saved content.
            </summary>
            <remarks>
            <p class="body">
            EBNF, which stands for Extended Backus–Naur Form, is a format for files which can describe context-free grammars.
            </p>
            </remarks>
            <param name="settings">The settings used to customize the EBNF serialization process.</param>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the Grammar is not in a valid state where is can be used to parse documents.
            </exception>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.LoadEbnf(System.String)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.LoadEbnf(System.IO.Stream,System.Text.Encoding)"/>
            <a href="IG_SPE_EBNF_Format.html">EBNF File Format</a>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.SaveEbnf(System.IO.Stream,System.Text.Encoding,Infragistics.Documents.Parsing.EbnfSerializationSettings)">
            <summary>
            Saves the <see cref="T:Infragistics.Documents.Parsing.Grammar"/> in the EBNF file format to the specified stream.
            </summary>
            <remarks>
            <p class="body">
            EBNF, which stands for Extended Backus–Naur Form, is a format for files which can describe context-free grammars.
            </p>
            </remarks>
            <param name="stream">The stream to which the output is saved. The caller is responsible for disposing the stream after the Grammar is saved.</param>
            <param name="encoding">The character encoding to use in the file. UTF8 will be used if it is not specified.</param>
            <param name="settings">The settings used to customize the EBNF serialization process.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="stream"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the Grammar is not in a valid state where is can be used to parse documents.
            </exception>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.LoadEbnf(System.String)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.LoadEbnf(System.IO.Stream,System.Text.Encoding)"/>
            <a href="IG_SPE_EBNF_Format.html">EBNF File Format</a>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.SetStartSymbolResolvedId(System.Int32)">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.SymbolFromName(System.String)">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> or <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> with the specified name in the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </summary>
            <param name="name">The case-sensitive name of the symbol to find</param>
            <remarks>
            <p class="body">
            This method will return any symbol with the specified name, if one exists in the grammar. To get just a non-terminal symbol with a specified
            name, use the <see cref="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.TryGetSymbol(System.String,Infragistics.Documents.Parsing.NonTerminalSymbol@)"/> method on the <see cref="P:Infragistics.Documents.Parsing.Grammar.NonTerminalSymbols"/> collection. To get just 
            a terminal symbol with a specified name, use the <see cref="M:Infragistics.Documents.Parsing.Grammar.TerminalSymbolFromName(System.String)"/> method.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null.
            </exception>
            <returns>
            The <see cref="T:Infragistics.Documents.Parsing.Symbol"/> with the <see cref="P:Infragistics.Documents.Parsing.Symbol.Name"/> specified if one exists in the Grammar; null otherwise.
            </returns>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NonTerminalSymbols"/>
            <seealso cref="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.TryGetSymbol(System.String,Infragistics.Documents.Parsing.NonTerminalSymbol@)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.TerminalSymbolFromName(System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Grammar.TerminalSymbolFromName(System.String)">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/>  with the specified name in the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </summary>
            <param name="name">The case-sensitive name of the terminal symbol to find</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null.
            </exception>
            <returns>
            The <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> with the <see cref="P:Infragistics.Documents.Parsing.Symbol.Name"/> specified if one exists in the Grammar; null otherwise.
            </returns>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.SymbolFromName(System.String)"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.CachedParseTable">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol">
            <summary>
            Gets a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> which represents the end of the input stream.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbolName">
            <summary>
            Gets or sets the name that is used to reference the <see cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> is False.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified name is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified name matches that of another symbol in the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.IsMutable">
            <summary>
            Gets the value indicating whether the <see cref="T:Infragistics.Documents.Parsing.Grammar"/> or any of its related instances can be modified.
            </summary>
            <remarks>
            <p class="body">
            A Grammar will become immutable the first time it is used to perform lexical or syntax analysis on a document.
            </p>
            <p class="body">
            If the Grammar is immutable, certain operations will cause an <see cref="T:System.InvalidOperationException"/>:
            <ul>
            <li>Calling <see cref="M:Infragistics.Documents.Parsing.Grammar.InitializeFrom(Infragistics.Documents.Parsing.Grammar)"/></li>
            <li>Setting the <see cref="P:Infragistics.Documents.Parsing.Grammar.NewLineSymbolName"/>, <see cref="P:Infragistics.Documents.Parsing.Grammar.StartSymbol"/>, <see cref="P:Infragistics.Documents.Parsing.Grammar.WhitespacePattern"/>, or <see cref="P:Infragistics.Documents.Parsing.Grammar.WhitespaceSymbolName"/></li>
            <li>Adding or removing items in the <see cref="P:Infragistics.Documents.Parsing.Grammar.NonTerminalSymbols"/> collection or a <see cref="P:Infragistics.Documents.Parsing.LexerState.Symbols"/> collection.</li>
            <li>Adding or removing items in the <see cref="P:Infragistics.Documents.Parsing.Grammar.LexerStates"/> collection.</li>
            <li>Modifying a <see cref="T:Infragistics.Documents.Parsing.LexerState"/> in in the Grammar</li>
            <li>Modifying a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> in the TerminalSymbols collection</li>
            <li>Modifying a <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> in the NonTerminalSymbols collection</li>
            <li>Adding, removing, or modifying syntax rules of a NonTerminalSymbol belonging to the Grammar</li>
            </ul>
            </p>
            <p class="body">
            Once a Grammar becomes immutable, it cannot become mutable again. However, a mutable copy of the Grammar can be created using the <see cref="M:Infragistics.Documents.Parsing.Grammar.Clone"/> method.
            </p>
            <p class="body">
            The <see cref="P:Infragistics.Documents.Parsing.Grammar.Name"/> can still be set when a Grammar is immutable because it does not affect how documents are parsed.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.LexerStates">
            <summary>
            Gets the set of lexer states in which the lexical analyzer can possible be when analyzing a document.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.Name">
            <summary>
            Gets or sets a name for this grammar definition.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> is False.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.NewLineSymbol">
            <summary>
            Gets a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> which represents newlines in a document.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NewLineSymbolName"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.WhitespaceSymbol"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.NewLineSymbolName">
            <summary>
            Gets or sets the name that is used to reference the <see cref="P:Infragistics.Documents.Parsing.Grammar.NewLineSymbol"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> is False.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified name matches that of another symbol in the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NewLineSymbol"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.NonTerminalSymbols">
            <summary>
            Gets a collection of <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> instances, each of which represents zero or more 
            symbols in a document.
            </summary>
            <remarks>
            <p class="body">
            Each <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> that is not a token node in the <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/> generated during a parse of a 
            document corresponds to a NonTerminalSymbol in the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>. The root node of the SyntaxTree will always
            correspond to the <see cref="P:Infragistics.Documents.Parsing.Grammar.StartSymbol"/> of the Grammar.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.StartSymbol"/>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.IsTokenNode"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.StartSymbol">
            <summary>
            Gets or sets a the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> which should be represented by the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> at the root 
            of the <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/>.
            </summary>
            <remarks>
            <p class="body">
            The StartSymbol property must be set to a non-null value prior to loading text into a document or an <see cref="T:System.InvalidOperationException"/>
            will be thrown.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> is False.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the value specified does not belong to the <see cref="P:Infragistics.Documents.Parsing.Grammar.NonTerminalSymbols"/> collection.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NonTerminalSymbols"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.SupportsParsing">
            <summary>
            Gets or sets the value indicating whether the <see cref="T:Infragistics.Documents.Parsing.Grammar"/> supports syntax analysis.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> is False.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.SyntaxTreePruningMode">
            <summary>
            Gets or sets the value indicating how the syntax tree should be pruned.
            </summary>
            <remarks>
            <p class="body">
            A grammar writer could define certain non-terminal symbols to group certain constructs together for reuse purposes. If these kinds of
            symbols should not appear in the final parse tree, naming these helper symbols with an underscore ('_') prefix and using the BasedOnName
            pruning mode will removed them from the final parse tree. In addition, certain operator precedence rules require long chains of lower 
            precedence rules containing higher precedence rules. When only the higher precedence structure is used, the owning lower precedence symbol
            should not appear in the tree. In these cases, using the BasedOnChildren pruning mode will remove non-terminals which only have a single
            non-terminal child. Or BasedOnChildrenAndName (the default value for this property) could be used to perform both types of pruning modes.
            </p>
            <p class="body">
            Pruning can be overridden on individual non-terminal symbols by setting their <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.PreventPruning"/> 
            value to True, or in EBNF by marking a non-terminal definition with a special sequence like this: "?&lt;PreventPruning/&gt;?"
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> is False.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified value is not defined in the <see cref="P:Infragistics.Documents.Parsing.Grammar.SyntaxTreePruningMode"/>.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.SyntaxTreePruningMode"/>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.PreventPruning"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol">
            <summary>
            Gets a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> which represents unrecognized content in a document.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.WhitespacePattern"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NewLineSymbol"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbolName">
            <summary>
            Gets or sets the name that is used to reference the <see cref="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> is False.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified name matches that of another symbol in the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.WhitespacePattern">
            <summary>
            Gets or sets the regular expression pattern used to identify non-newline whitespace by the syntax analysis layer.
            </summary>
            <remarks>
            <p class="body">
            By default, the pattern '[ \t]+' is used, which matches the ASCII characters 9 (horizontal tab) and 32 (space). 
            This property can be set to any valid regular expression pattern to change the definition of whitespace for this grammar.
            </p>
            <p class="body">
            To suppress automatic whitespace parsing, set this property to null or an empty string.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> is False.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the value specified is not a valid regular expression pattern.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.WhitespaceSymbol"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.WhitespaceSymbol">
            <summary>
            Gets a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> which represents non-newline whitespace in a document.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.WhitespacePattern"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NewLineSymbol"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Grammar.WhitespaceSymbolName">
            <summary>
            Gets or sets the name that is used to reference the <see cref="P:Infragistics.Documents.Parsing.Grammar.WhitespaceSymbol"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> is False.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified name matches that of another symbol in the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.WhitespaceSymbol"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.LanguageBase">
            <summary>
            An abstract base class representing a language that has a specific set of rules (i.e. <see cref="P:Infragistics.Documents.Parsing.LanguageBase.Grammar"/>).
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.LanguageBase.Grammar"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageBase.#ctor(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Instantiates a new instance of <see cref="T:Infragistics.Documents.Parsing.LanguageBase"/>
            </summary>
            <param name="grammar">The associated grammar.</param>
            <exception cref="T:System.ArgumentNullException">If grammar parameter is null,</exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageBase.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageBase.GetParseTable">
            <summary>
            Returns the parse table for a GLR parser.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageBase.GetErrorAlias(Infragistics.Documents.Parsing.Symbol)">
            <summary>
            Returns a customized error alias for the specified symbol or null to use the default alias.
            </summary>
            <remarks>
            <p class="body">
            If null is returned, the default alias for non-terminal symbols is the symbol name. For terminal symbols
            it is the value for literal comparison terminals and the symbol name for regular expression comparison 
            terminals.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageBase.InitializeDefaultServices">
            <summary>
            Gets called once on each instance to let derived <see cref="T:Infragistics.Documents.Parsing.LanguageBase"/> classes initialize the default services in the 
            <see cref="P:Infragistics.Documents.Parsing.LanguageBase.ServicesManager"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageBase.OnError(Infragistics.Documents.Parsing.ParseErrorContext)">
            <summary>
            Gets called when an error is detected during the parse.
            </summary>
            <remarks>
            <p class="body">
            The errors in the specified <paramref name="context"/> can be modified, added, or removed.
            </p>
            </remarks>
            <param name="context">The contextual information about the error which was detected.</param>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageBase.OnGlobalAmbiguityDetected(Infragistics.Documents.Parsing.GlobalAmbiguityContext)">
            <summary>
            Gets called when a global ambiguity is detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. The specified <paramref name="context"/> contains two alternate parses for
            the text (if there are more than two alternate parses, this method will be called multiple times). A derived implementation of this method 
            can determine which of the two alternate parse sub-trees should be used in the final tree by setting
            <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/> on the specified context.
            </p>
            <p class="body">
            A grammar creator can override this method in a derived language to get notified of global ambiguities and know which rules need to be
            re-written or mark with priority.
            </p>
            </remarks>
            <param name="context">An object containing the relevant information about the global ambiguity.</param>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.HasPriority"/>
            <seealso cref="E:Infragistics.Documents.Parsing.CustomLanguage.GlobalAmbiguityDetected"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LanguageBase.OnSyntaxTreeCreated(Infragistics.Documents.SyntaxTreeCreatedEventArgs)">
            <summary>
            Called after a parse operation has completed before the the new <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/> is returned.
            </summary>
            <param name="args">The event args that contains the new tree.</param>
            <remarks>
            <para class="body">The default implementation raises the <see cref="E:Infragistics.Documents.Parsing.LanguageBase.SyntaxTreeCreated"/> event.</para>
            <para class="note"><b>Note:</b> the parse operation is performed by the <see cref="T:Infragistics.Documents.TextDocument"/> on a background thread so as to not block the UI e.g. when using a XamSyntaxEditor. Therefore, this method is called on that same background thread as well.</para>
            </remarks>
            <seealso cref="T:Infragistics.Documents.Parsing.SyntaxTree"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageBase.Grammar">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.LanguageBase.Grammar"/> associated with the language.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LanguageBase.ServicesManager">
            <summary>
            Gets a <see cref="P:Infragistics.Documents.Parsing.LanguageBase.ServicesManager"/> for managing services for the derived <see cref="T:Infragistics.Documents.Parsing.LanguageBase"/> instance.
            </summary>
        </member>
        <member name="E:Infragistics.Documents.Parsing.LanguageBase.SyntaxTreeCreated">
            <summary>
            Occurs after a parse operation when a new <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/> has been created and before it returned.
            </summary>
            <remarks>
            <para class="body">This event can be used to add diagnostics and/or annotations via the <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/>'s <see cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)"/> and <see cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddDiagnostic(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.Diagnostic)"/> methods. 
            Each of these methods returns a new SyntaxTree that can then be set via the <see cref="P:Infragistics.Documents.SyntaxTreeCreatedEventArgs.SyntaxTree"/> property exposed off the event args.</para>
            <para class="note"><b>Note:</b> the parse operation is performed by the <see cref="T:Infragistics.Documents.TextDocument"/> on a background thread so as to not block the UI e.g. when using a XamSyntaxEditor. Therefore, this method is called on that same background thread as well.</para>
            </remarks>
            <seealso cref="T:Infragistics.Documents.Parsing.SyntaxTree"/>
            <seealso cref="T:Infragistics.Documents.SyntaxTreeCreatedEventArgs"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.GrammarAnalysisOptions">
            <summary>
            Contains all the options for customizing the analysis performed during <see cref="M:Infragistics.Documents.Parsing.Grammar.Analyze(Infragistics.Documents.Parsing.GrammarAnalysisOptions)"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.Analyze(Infragistics.Documents.Parsing.GrammarAnalysisOptions)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.GrammarAnalysisOptions.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.GrammarAnalysisOptions"/> instance.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarAnalysisOptions.AnalyzeForAmbiguity">
            <summary>
            Gets or sets the value indicating whether analysis should be performed for the Ambiguity <see cref="T:Infragistics.Documents.Parsing.GrammarWarningType"/>.
            </summary>
            <remarks>
            <p class="note">
            <B>Note:</B> If the <see cref="P:Infragistics.Documents.Parsing.Grammar.SupportsParsing"/> value of the analyzed <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False, this value will be ignored
            the analysis for Ambiguity will not be performed.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarAnalysisOptions.AnalyzeForComplexNonTerminalSymbol">
            <summary>
            Gets or sets the value indicating whether analysis should be performed for the ComplexNonTerminalSymbol <see cref="T:Infragistics.Documents.Parsing.GrammarWarningType"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.GrammarAnalysisOptions.ComplexNonTerminalSymbolProductionLimit"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarAnalysisOptions.AnalyzeForSymbolCannotBeParsed">
            <summary>
            Gets or sets the value indicating whether analysis should be performed for the SymbolCannotBeParsed <see cref="T:Infragistics.Documents.Parsing.GrammarWarningType"/>.
            </summary>
            <remarks>
            <p class="note">
            <B>Note:</B> If the <see cref="P:Infragistics.Documents.Parsing.Grammar.SupportsParsing"/> value of the analyzed <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False, this value will be ignored
            the analysis for SymbolCannotBeParsed will not be performed.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarAnalysisOptions.AnalyzeForUnnecessarySyntaxRule">
            <summary>
            Gets or sets the value indicating whether analysis should be performed for the UnnecessarySyntaxRule <see cref="T:Infragistics.Documents.Parsing.GrammarWarningType"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarAnalysisOptions.ComplexNonTerminalSymbolProductionLimit">
            <summary>
            Gets or sets the minimum number of productions a <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> must have before being considered complex.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.GrammarAnalysisOptions.AnalyzeForComplexNonTerminalSymbol"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.GrammarAnalysisResult">
            <summary>
            Contains the results of the grammar analysis, which has information indicating how a grammar creator might be able to improve the grammar for
            better parsing.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.Analyze(Infragistics.Documents.Parsing.GrammarAnalysisOptions)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.GrammarAnalysisResult.ToString">
            <summary>
            Gets the string representation of the <see cref="T:Infragistics.Documents.Parsing.GrammarAnalysisResult"/>.
            </summary>
            <returns>The string representation of the GrammarAnalysisResult.</returns>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarAnalysisResult.Grammar">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.GrammarAnalysisResult.Grammar"/> instance which was analyzed.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarAnalysisResult.Warnings">
            <summary>
            Gets the read-only collection of warnings for the analysis of the <see cref="P:Infragistics.Documents.Parsing.GrammarAnalysisResult.Grammar"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.GrammarWarning">
            <summary>
            Represents a warning which was found during the analysis of the <see cref="T:Infragistics.Documents.Parsing.Grammar"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.GrammarAnalysisResult.Warnings"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.Analyze(Infragistics.Documents.Parsing.GrammarAnalysisOptions)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.GrammarWarning.ToString">
            <summary>
            Gets the string representation of the <see cref="T:Infragistics.Documents.Parsing.GrammarWarning"/>.
            </summary>
            <returns>The string representation of the GrammarWarning.</returns>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarWarning.Message">
            <summary>
            Gets the message describing the warning.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarWarning.Type">
            <summary>
            Gets the type of the warning.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.GrammarWarningCollection">
            <summary>
            A read-only collection of <see cref="T:Infragistics.Documents.Parsing.GrammarWarning"/> instances.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.GrammarAnalysisResult.Warnings"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.Analyze(Infragistics.Documents.Parsing.GrammarAnalysisOptions)"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarWarningCollection.Count">
            <summary>
            Gets the number of warnings in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.GrammarWarningCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.GrammarWarning"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the warning to get.</param>
            <returns>The GrammarWarning at the specified index.</returns>
        </member>
        <member name="T:Infragistics.Documents.Parsing.NonTerminalSymbol">
            <summary>
            A grammar symbol which represents one or more combinations of symbols, which can be terminal or non-terminal symbols.
            </summary>
            <remarks>
            <p class="body">
            Non-terminal symbols represent sequences of zero or more symbols which have been parsed in a document. The possible sequences
            a non-terminal symbol can represent are described by the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> hierarchy owned by the symbol, which is exposed 
            by the <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/> property.
            </p>
            <p class="body">
            When the parser is analyzing a document and it determines a non-terminal symbol correctly represents a sequence of other symbols,
            a <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> will be created for it in the <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/>. The SyntaxNode of the root of the tree will 
            always be associated with the non-terminal symbol designated by the <see cref="P:Infragistics.Documents.Parsing.Grammar.StartSymbol"/>.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NonTerminalSymbols"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.StartSymbol"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.Symbol">
            <summary>
            Represents a symbol in the associated <see cref="P:Infragistics.Documents.Parsing.Symbol.Grammar"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Symbol.op_Implicit(Infragistics.Documents.Parsing.Symbol)~Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule">
            <summary>
            Converts a <see cref="T:Infragistics.Documents.Parsing.Symbol"/> to a <see cref="T:Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule"/> referencing that symbol. 
            </summary>
            <param name="symbol">The symbol to be referenced by the rule.</param>
            <returns>A new <see cref="T:Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule"/> instance.</returns>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Symbol.Grammar">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.Symbol.Grammar"/> to which the <see cref="T:Infragistics.Documents.Parsing.Symbol"/> belongs.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Symbol.IsStartOfErrorRecoveryPair">
            <summary>
            Gets or sets a value indicating whether the presence of the <see cref="T:Infragistics.Documents.Parsing.Symbol"/> followed by a specific <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> signals 
            the middle or end of a structure being parsed.
            </summary>
            <remarks>
            <p class="body">
            The use of this setting helps the error handling logic report more meaningful errors. This should be used on symbols which, when followed
            by a specific TerminalSymbol, unambiguously indicate that the middle or end of a structure has been reached. For example, in VB.NET, the
            "End" keyword followed by the "Class" keyword unambiguously signals the end of a Class declaration. Similarly, the "End" keyword followed
            by a "Sub" keyword unambiguously signals the end of a Sub (method) declaration. If the parser is currently within a Sub declaration that is
            within a Class declaration and the "End" keyword is found followed by the "Class" keyword, the use of IsStartOfErrorRecoveryPair will let
            the error handling logic know that "End Class" cannot end the Sub declaration and therefore, the "End Sub" is missing. That missing pair
            will then be inserted in the parse tree so that "End Class" can correctly be used to close the owning class. Therefore, setting the value
            to True on the TerminalSymbol representing the "End" keyword would help the parser provide more meaningful error messages when parsing 
            documents in the VB.NET language.
            </p>
            <p class="note">
            <b>Note:</b> This value is intended to be used on relatively small constructs. If the number of terminal symbols parsed to create a symbol
            is more than 10, the IsStartOfErrorRecoveryPair value will be ignored for that symbol.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="P:Infragistics.Documents.Parsing.Symbol.Grammar"/> is False.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Symbol.Name">
            <summary>
            Returns the name of the symbol.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbol.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbol.SuppressErrorRecoveryForSymbol(Infragistics.Documents.Parsing.Symbol)">
            <summary>
            Disables error recovery for the specified symbol when an error occurs during the construction of the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/>.
            </summary>
            <param name="symbol">The symbol for which error recovery should be suppressed.</param>
            <remarks>
            <p class="body">
            When parsing a document, if an unexpected token is encountered from the lexical analyzer, the parse must attempt to recover from the error.
            It uses a number of strategies to do this, each of which handles different kinds of errors. One of these strategies will take the non-terminals
            which are currently in construction when the error occurred and see if the unexpected token from the lexical analyzer should have actually 
            come later in one of those non-terminals. If so, it will insert the missing structures up to the unexpected token, thereby making the token
            "expected" and the parse can continue. However, it is possible that this type of error recovery is incorrect for certain non-terminals.
            </p>
            <p class="body">
            For example, a class declaration in C# can have an optional semicolon token after its close brace. If an erroneous semicolon is typed within
            the class members section, like so: "class X{ ; }", the error recovery routine will assume the semicolon is the optional semicolon after the
            closing brace. It will then insert the missing closing brace into the parse tree. When it reaches the actual closing brace, it will be skipped
            and marked as an error for being unexpected. One could argue that this is actually a correct reporting of errors, but things get much worse
            when there are class members declared after the semicolon. All tokens representing those members could be skipped if they cannot exist after 
            the end of a class declaration.
            </p>
            <p class="body">
            To solve this issue, certain non-terminals may need to know that an erroneous token should really be skipped rather than used in the error
            recovery process. In the example above, semicolons are only optional at the end of the class. Intuitively, one can see that the close brace 
            should have priority over the semicolon to signal the end of the class. Therefore, the semicolon in the a class declaration should not be 
            considered in the error recovery routine. So the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> representing the semicolon should be passed to the 
            SuppressErrorRecoveryForSymbol method on the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> representing the class declaration.
            </p>
            <p class="note">
            <b>Note:</b> The suppression will only work if the specified <paramref name="symbol"/> is directly referenced by the NonTerminalSymbol in its
            rule hierarchy. If the symbol is indirectly referenced through a reference to another non-terminal symbol, this call will have no effect on the 
            error recovery process.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="symbol"/> is not from the same Grammar as the NonTerminalSymbol.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbol.SetRuleData(System.Int64[])">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbol.HasPriority">
            <summary>
            Gets or sets the value indicating whether the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> has priority over other non-terminals
            when a global ambiguity is detected.
            </summary>
            <remarks>
            <p class="body">
            When a global ambiguity is detected, it means two or more <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> sub-trees are capable of representing the same 
            portion of textual content in the document based on the grammar definition. If nodes in one or more of those trees are associated 
            with priority NonTerminalSymbol instances, the tree with the priority node closest to the root level will be chosen as the preferred 
            sub-tree. If multiple trees have priority nodes at the same level, the tree with more priority nodes at that level will be chosen.
            Otherwise, if multiple trees have the same number of priority nodes at the same level or if all trees don't have any priority nodes,
            the global ambiguity cannot be resolved automatically and the <see cref="M:Infragistics.Documents.Parsing.LanguageBase.OnGlobalAmbiguityDetected(Infragistics.Documents.Parsing.GlobalAmbiguityContext)"/> method will be 
            called to allow the developer to resolve it with custom logic. If a <see cref="T:Infragistics.Documents.Parsing.CustomLanguage"/> instance is the language used to 
            parse the document, it will fire its <see cref="E:Infragistics.Documents.Parsing.CustomLanguage.GlobalAmbiguityDetected"/> event which also allows the developer to 
            resolve the ambiguity. If it is not resolved, one of the ambiguous trees will be arbitrarily chosen by the parser to represent the 
            content.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <seealso cref="M:Infragistics.Documents.Parsing.LanguageBase.OnGlobalAmbiguityDetected(Infragistics.Documents.Parsing.GlobalAmbiguityContext)"/>
            <seealso cref="E:Infragistics.Documents.Parsing.CustomLanguage.GlobalAmbiguityDetected"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbol.IsError">
            <summary>
            Gets or sets a value indicating whether this non-terminal represents an error when it is found in the parsed document.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbol.IsStartSymbol">
            <summary>
            Gets a value indicating whether the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> is the <see cref="P:Infragistics.Documents.Parsing.Grammar.StartSymbol"/>
            value of the associated Grammar and therefore if it must be at the root of the syntax tree of the parsed document.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbol.PreventBacktracking">
            <summary>
            Gets or sets the value indicating whether nodes associated with the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> can be
            backtracked by the error handling routine.
            </summary>
            <remarks>
            <p class="body">
            In some cases, if the user forgets to type certain things, the parser can incorrectly parse the text after the missing symbols 
            in the wrong way. So one of the strategies used to handle errors is to try to undo the creation of a few small nodes for the tree,
            insert some things which could be missing, and re-parse the tokens again in a different way. However, for some non-terminals, it 
            doesn't make sense to undo their creation and try to parse their tokens in a different way because their tokens can only be parsed 
            in one way. To prevent the error handler from undoing the creation of a node associated with a specific non-terminal symbol, set 
            PreventBacktracking to True.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbol.PreventPruning">
            <summary>
            Gets or sets the value indicating whether nodes representing the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> should always remain in the <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/>,
            regardless of the <see cref="P:Infragistics.Documents.Parsing.Grammar.SyntaxTreePruningMode"/> value.
            </summary>
            <seealso cref="T:Infragistics.Documents.Parsing.SyntaxTreePruningMode"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.SyntaxTreePruningMode"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> which defines what can be legally represented by the non-terminal.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbol.SuppressAmbiguityWarnings">
            <summary>
            Gets or sets the value indicating whether <see cref="M:Infragistics.Documents.Parsing.Grammar.Analyze(Infragistics.Documents.Parsing.GrammarAnalysisOptions)"/> should suppress ambiguity warnings when this
            non-terminal symbol's reduction is possible.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.Analyze(Infragistics.Documents.Parsing.GrammarAnalysisOptions)"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.NonTerminalSymbolCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> instances.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Add(System.String)">
            <summary>
            Adds a new <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> to the collection with the specified name.
            </summary>
            <param name="name">The <see cref="P:Infragistics.Documents.Parsing.Symbol.Name"/> of the new symbol.</param>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when a symbol of the owning Grammar already exists with the specified name.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Add(System.String,System.Int32)">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Clear">
            <summary>
            Removes all <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> instances from this collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Grammar"/> is False.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Contains(Infragistics.Documents.Parsing.NonTerminalSymbol)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> exists within the collection.
            </summary>
            <param name="symbol">The symbol to find in the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether a <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> with the specified name exists within the collection.
            </summary>
            <param name="name">The name of the symbol to find in the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> with the specified name from the collection.
            </summary>
            <param name="name">The name of the NonTerminalSymbol to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Grammar"/> is False.
            </exception>
            <returns>True if a non-terminal symbol with the name was in the collection before removal; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Remove(Infragistics.Documents.Parsing.NonTerminalSymbol)">
            <summary>
            Removes the specified <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> from the collection.
            </summary>
            <param name="symbol">The NonTerminalSymbol to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Grammar"/> is False.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.TryGetSymbol(System.String,Infragistics.Documents.Parsing.NonTerminalSymbol@)">
            <summary>
            Tries to get a <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> with the specified name and returns whether one is in the collection.
            </summary>
            <param name="name">The name of the symbol to find in the collection.</param>
            <param name="symbol">[Out] Contains the symbol with the specified name or null if no symbol has the name specified.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Count">
            <summary>
            Gets the number of symbols in this collection.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> at the specified index.
            </summary>
            <param name="index">The 0-based index of the NonTerminalSymbol to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> with the specified name, case sensitively.
            </summary>
            <param name="name">
            The <see cref="P:Infragistics.Documents.Parsing.Symbol.Name"/> of the symbol to get.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when no NonTerminalSymbol with the specified name exists in the collection.
            </exception>
            <seealso cref="M:Infragistics.Documents.Parsing.NonTerminalSymbolCollection.TryGetSymbol(System.String,Infragistics.Documents.Parsing.NonTerminalSymbol@)"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SyntaxRule">
            <summary>
            Abstract base class for all rules defining what a <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/> can legally represent.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxRule.Root">
            <summary>
            Returns the
            <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol">NonTerminalSymbol</see>
            whose rule tree contains this rule.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxRule.Type">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRuleType"/> value indicating the type of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.EmptySyntaxRule">
            <summary>
            Represents an empty set of symbols. This rule succeed by matching nothing from the document.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EmptySyntaxRule.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.EmptySyntaxRule"/> instance.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EmptySyntaxRule.Type">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRuleType"/> value indicating the type of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule">
            <summary>
            Represents a symbol reference rule. The symbol associated with the rule must be found in the parsed text for the 
            rule is succeed.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
            <seealso cref="P:Infragistics.Documents.Parsing.LexerState.Symbols"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.SymbolFromName(System.String)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.Grammar.TerminalSymbolFromName(System.String)"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.NonTerminalSymbols"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule.#ctor(Infragistics.Documents.Parsing.Symbol)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule"/> instance.
            </summary>
            <param name="symbol">The symbol which must be found in the document for the SymbolReferenceSyntaxRule to succeed.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="symbol"/> is the <see cref="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol"/>, which 
            cannot be referenced in a syntax rule.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule.Type">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRuleType"/> value indicating the type of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule.Symbol">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.SymbolReferenceSyntaxRule.Symbol"/> associated with the rule.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SyntaxRuleOwnerBase">
            <summary>
            Abstract base class for <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> instances which own a single rule.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxRuleOwnerBase.Rule">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> which is owned the current rule.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the specified value is already owned by another rule or <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/>.
            </exception>
        </member>
        <member name="T:Infragistics.Documents.Parsing.ExceptionSyntaxRule">
            <summary>
            Represents an excption rule, which can only succeed if its sub-rule matches content and the exception rule does not succeed for the same content.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ExceptionSyntaxRule.#ctor(Infragistics.Documents.Parsing.SyntaxRule,Infragistics.Documents.Parsing.SyntaxRule)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.ExceptionSyntaxRule"/> instance.
            </summary>
            <param name="rule">The rule which must succeed for the ExceptionSyntaxRule to succeed.</param>
            <param name="exception">The rule which must not succeed for the ExceptionSyntaxRule to succeed.</param>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ExceptionSyntaxRule.#ctor(Infragistics.Documents.Parsing.NonTerminalSymbol,System.Int32,System.Int32,Infragistics.Documents.Parsing.SyntaxRule,Infragistics.Documents.Parsing.SyntaxRule)">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ExceptionSyntaxRule.Type">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRuleType"/> value indicating the type of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ExceptionSyntaxRule.Exception">
            <summary>
            Gets or sets the exception <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> which is owned the current rule.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the specified value is already owned by another rule or <see cref="T:Infragistics.Documents.Parsing.NonTerminalSymbol"/>.
            </exception>
        </member>
        <member name="T:Infragistics.Documents.Parsing.FactorSyntaxRule">
            <summary>
            Represents a rule which will succeed if its owned <see cref="P:Infragistics.Documents.Parsing.SyntaxRuleOwnerBase.Rule"/> succeeds the specified number of times.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.FactorSyntaxRule.#ctor(System.Int32,Infragistics.Documents.Parsing.SyntaxRule)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.FactorSyntaxRule"/> instance.
            </summary>
            <param name="factor">The number of times the owned rule must succeed for the FactorSyntaxRule to succeed.</param>
            <param name="rule">The rule which can repeatedly succeed for the FactorSyntaxRule to succeed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="factor"/> is negative.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.FactorSyntaxRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.FactorSyntaxRule.Type">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRuleType"/> value indicating the type of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.FactorSyntaxRule.Factor">
            <summary>
            Gets or sets the number of times the owned rule must succeed for the <see cref="T:Infragistics.Documents.Parsing.FactorSyntaxRule"/> to succeed.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when the specified value is negative.
            </exception>
        </member>
        <member name="T:Infragistics.Documents.Parsing.OptionalSyntaxRule">
            <summary>
            Represents a rule which will succeed if its owned <see cref="P:Infragistics.Documents.Parsing.SyntaxRuleOwnerBase.Rule"/> succeeds when parsing or not.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.OptionalSyntaxRule.#ctor(Infragistics.Documents.Parsing.SyntaxRule)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.OptionalSyntaxRule"/> instance.
            </summary>
            <param name="rule">The rule which can optionally succeed for the OptionalSyntaxRule to succeed.</param>
        </member>
        <member name="P:Infragistics.Documents.Parsing.OptionalSyntaxRule.Type">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRuleType"/> value indicating the type of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.RepetitionSyntaxRule">
            <summary>
            Represents a rule which will succeed if its owned <see cref="P:Infragistics.Documents.Parsing.SyntaxRuleOwnerBase.Rule"/> succeeds zero or more times.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RepetitionSyntaxRule.#ctor(Infragistics.Documents.Parsing.SyntaxRule)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.RepetitionSyntaxRule"/> instance.
            </summary>
            <param name="rule">The rule which can repeatedly succeed for the RepetitionSyntaxRule to succeed.</param>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RepetitionSyntaxRule.#ctor(Infragistics.Documents.Parsing.NonTerminalSymbol,System.Int32,Infragistics.Documents.Parsing.SyntaxRule)">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RepetitionSyntaxRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.RepetitionSyntaxRule.Type">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRuleType"/> value indicating the type of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SyntaxRulesOwnerBase">
            <summary>
            Abstract base class for <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> instances which own multiple rules.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxRulesOwnerBase.Rules">
            <summary>
            Gets the collection of rules owned by the <see cref="T:Infragistics.Documents.Parsing.SyntaxRulesOwnerBase"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.AlternationSyntaxRule">
            <summary>
            Represents a rule which will succeed if one of its child <see cref="P:Infragistics.Documents.Parsing.SyntaxRulesOwnerBase.Rules"/> succeeds.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.AlternationSyntaxRule.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.AlternationSyntaxRule"/> instance.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.AlternationSyntaxRule.#ctor(Infragistics.Documents.Parsing.SyntaxRule[])">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.AlternationSyntaxRule"/> instance.
            </summary>
            <param name="rules">The rules with which to initialize the child rules collection.</param>
        </member>
        <member name="P:Infragistics.Documents.Parsing.AlternationSyntaxRule.Type">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRuleType"/> value indicating the type of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.ConcatenationSyntaxRule">
            <summary>
            Represents a rule which will succeed if all of its child <see cref="P:Infragistics.Documents.Parsing.SyntaxRulesOwnerBase.Rules"/> succeed in order.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.Rule"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ConcatenationSyntaxRule.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.ConcatenationSyntaxRule"/> instance.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ConcatenationSyntaxRule.#ctor(Infragistics.Documents.Parsing.SyntaxRule[])">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.ConcatenationSyntaxRule"/> instance.
            </summary>
            <param name="rules">The rules with which to initialize the child rules collection.</param>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ConcatenationSyntaxRule.Type">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxRuleType"/> value indicating the type of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SyntaxRuleCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> instances.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxRulesOwnerBase.Rules"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxRuleCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxRuleCollection.Add(Infragistics.Documents.Parsing.SyntaxRule)">
            <summary>
            Adds the specified <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/>-derived instance to the collection.
            </summary>
            <param name="rule">The SyntaxRule-derived instance to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="rule"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when <paramref name="rule"/> is already owned by another rule.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning Grammar is False.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxRuleCollection.Clear">
            <summary>
            Removes all rules from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxRuleCollection.IndexOf(Infragistics.Documents.Parsing.SyntaxRule)">
            <summary>
            Gets the index of the specified rule or -1 if it doesn't exist.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="rule"/> is null.
            </exception>
            <returns>The zero-based index of the rule in the collection or -1 if it doesn't exist.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxRuleCollection.Remove(Infragistics.Documents.Parsing.SyntaxRule)">
            <summary>
            Removes the specified rule from this collection.
            </summary>
            <param key="rule">The <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="rule"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning Grammar is False.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxRuleCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the rule at the specified index from this collection.
            </summary>
            <param key="index">The 0-based index of the <see cref="T:Infragistics.Documents.Parsing.SyntaxRule"/> to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.Parsing.SyntaxRuleCollection.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning Grammar is False.
            </exception>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxRuleCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxRuleCollection.Item(System.Int32)">
            <summary>
            Returns the
            <see cref="T:Infragistics.Documents.Parsing.SyntaxRule">rule</see>
            at the specified <paramref key="index"/>.
            </summary>
            <param key="index">The ordinal position of the rule within this collection.</param>
        </member>
        <member name="T:Infragistics.Documents.Parsing.TerminalSymbol">
            <summary>
            A grammar symbol which represents an elementary textual unit of a grammar.
            </summary>
            <remarks>
            <p class="body">
            When the lexical analyzer reads through a document, it attempts to group characters into tokens. A <see cref="T:Infragistics.Documents.Parsing.Token"/> is associated 
            with a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> and the text which was read to create it. Each TerminalSymbol indicates the possible text that can
            be used to create tokens for it via its <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Value"/> and <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Comparison"/> properties. The Comparison indicates how the 
            Value should be interpreted: as literal text, case-insensitive literal text, or a regular expression.
            </p>
            <p class="body">
            The lexical analyzer is always associated with a specified <see cref="T:Infragistics.Documents.Parsing.LexerState"/> when it is reading through a document. Initially,
            that is the <see cref="P:Infragistics.Documents.Parsing.LexerStateCollection.DefaultLexerState"/> of the <see cref="P:Infragistics.Documents.Parsing.Grammar.LexerStates"/> collection. Each LexerState
            owns a collection of <see cref="P:Infragistics.Documents.Parsing.LexerState.Symbols"/>, which are the TerminalSymbol instances that can possibly have tokens created
            for them in that state. The lexical analyzer will read characters until it can create the longest possible token. If two or more 
            TerminalSymbol instances can represent the longest token, the TerminalSymbol which is at the lowest index in the Symbols collection will
            be used. Therefore, TerminalSymbol instances representing reserved keywords should always be declared before a TerminalSymbol instance
            representing any identifier, so the reserved keyword is always used when possible.
            </p>
            <p class="body">
            Tokens created by the lexer are marked as either significant or insignificant. This indicates whether the tokens should be analyzed by 
            the syntax analyzer or ignored by it. The significance of each token is determined by the value of the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.IsSignificant"/> 
            property of the associated TerminalSymbol if it is set. If not, the significance of the token is determined by the 
            <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElement"/> property. If the language element is Whitespace, Newline, or Comment, the token will be insignificant.
            Otherwise, it will be significant.
            </p>
            <p class="body">
            When the syntax analyzer processes the tokens created by the lexical analyzer, the significant tokens will be associated with 
            <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> instances in the syntax tree and their <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.IsTokenNode"/> value will be True. Insignificant
            tokens will be represented in the leading ignored content of the next token node created.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Documents.Parsing.LexerState.Symbols"/>
            <seealso cref="T:Infragistics.Documents.Parsing.Token"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Token.IsSignificant"/>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.IsTokenNode"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetLeadingIgnoredContent"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TerminalSymbol.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TerminalSymbol.SetLookaheadPatternData(System.String,System.Int64[][])">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TerminalSymbol.SetLookaheadPatternFrom(Infragistics.Documents.Parsing.TerminalSymbol)">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.Comparison">
            <summary>
            Gets the value which determines the how the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Value"/> is compared to the text being parsed.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Value"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.IsEndOfStream">
            <summary>
            Gets the value indicating whether the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> represents an end of stream token.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.IsLookaheadNegative">
            <summary>
            Gets or sets the value indicating whether the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LookaheadPattern"/> should be used to perform a negative or positive lookahead.
            </summary>
            <remarks>
            <p class="body">
            The <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LookaheadPattern"/> is a regular expression pattern which the lexical analyzer will try to match using the text following
            a token associated with this <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/>. IsLookaheadNegative indicates whether the token should be used based on whether 
            the match is found or not. If IsLookaheadNegative is True, the token will only be used if the LookaheadPattern cannot match the text after
            the token. If False, the token will only be used if the LookaheadPattern can match the text after the token.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LookaheadPattern"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.IsSignificant">
            <summary>
            Gets or sets the value indicating whether the tokens associated with the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> represent significant content.
            </summary>
            <remarks>
            <p class="body">
            If the IsSignificant is null, the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElement"/> determines whether tokens are significant. LanguageElement values of
            Comment, Whitespace, or Newline are insignificant. All others are significant.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElement"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.IsUnrecognized">
            <summary>
            Gets the value indicating whether the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> represents unrecognized content.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElement">
            <summary>
            Gets or sets the language element for tokens associated with this symbol.
            </summary>
            <remarks>
            <p class="body">
            The LanguageElement can be used to classify tokens associated with the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/>. In addition, if <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.IsSignificant"/>
            is null, the LanguageElement determines the significance of the token. If the LanguageElement is Comment, Whitespace, or Newline, the token
            will be insignificant. Otherwise, it will be significant.
            </p>
            <p class="note">
            <b>Note:</b> The LanguageElement values of EndOfStream and Unrecognized cannot be set on a TerminalSymbol as they are reserved for the 
            <see cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/> and <see cref="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol"/>, respectively.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the value assigned is not defined in the <see cref="T:Infragistics.Documents.Parsing.LanguageElement"/> enumeration
            or it is the EndOfStream or Unrecognized value, as they are reserved.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.TerminalSymbol.IsSignificant"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.EndOfStreamSymbol"/>
            <seealso cref="P:Infragistics.Documents.Parsing.Grammar.UnrecognizedSymbol"/>
            <seealso cref="T:Infragistics.Documents.ClassificationType"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElementName">
            <summary>
            Gets or set the name of the language element for the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/>.
            </summary>
            <remarks>
            <p class="body">
            This value is synchronized with the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElement"/> value. If the name specified is a valid 
            <see cref="T:Infragistics.Documents.Parsing.LanguageElement"/> value, the LanguageElement will be set to that value. 
            Otherwise, the LanguageElement will be set to Custom.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the value specified is null or empty.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElement"/>
            <seealso cref="P:Infragistics.Documents.ClassificationType.Key"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.LexerStateToEnter">
            <summary>
            Gets or sets the lexer state which should be entered when the lexer encounters this <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/>
            when analyzing a document.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.LookaheadPattern">
            <summary>
            Gets or sets the regular expression pattern which is used to match the text following a token associated with the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/>
            to determine if the token can actually be used or not.
            </summary>
            <remarks>
            <p class="body">
            If LookaheadPattern is set, <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.IsLookaheadNegative"/> indicates whether the token should be used based on whether it can match the 
            text following the token. If IsLookaheadNegative is True, the token will only be used if the LookaheadPattern cannot match the text after
            the token. If False, the token will only be used if the LookaheadPattern can match the text after the token.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Infragistics.Documents.Parsing.Grammar.IsMutable"/> value of the owning <see cref="T:Infragistics.Documents.Parsing.Grammar"/> is False.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified value contains invalid regular expression elements.
            </exception>
            <seealso cref="P:Infragistics.Documents.Parsing.TerminalSymbol.IsLookaheadNegative"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TerminalSymbol.Value">
            <summary>
            Gets the value associated with the <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/>, which is either a literal string or a regular expression,
            depending on the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Comparison"/>
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Comparison"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.IgnoredContent">
            <summary>
            Represents a piece of ignored content in the parse tree.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.IgnoredContent.Empty">
            <summary>
            Empty ignored content which doesn't exist in a parse tree.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContent.Equals(System.Object)">
            <summary>
            Determines whether the specified object equals this <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/> value.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns>True if obj is another IgnoredContent with the same values; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContent.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/> value.
            </summary>
            <returns>A hash code for the IgnoredContent value.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContent.ToString">
            <summary>
            Gets the text of the ignored content.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContent.op_Equality(Infragistics.Documents.Parsing.IgnoredContent,Infragistics.Documents.Parsing.IgnoredContent)">
            <summary>
            Determines whether two <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/> values are equal.
            </summary>
            <returns>True if the values are equal; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContent.op_Inequality(Infragistics.Documents.Parsing.IgnoredContent,Infragistics.Documents.Parsing.IgnoredContent)">
            <summary>
            Determines whether two <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/> values are not equal.
            </summary>
            <returns>True if the values are not equal; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContent.Equals(Infragistics.Documents.Parsing.IgnoredContent)">
            <summary>
            Determines whether the specified value equals this <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/> value.
            </summary>
            <param name="other">The IgnoredContent value to test for equality.</param>
            <returns>True if other has the same values; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContent.GetStructuredNode">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> instance representing the root of the structured ignored content tree.
            </summary>
            <returns>A SyntaxNode instance for the structured ignored content or null for simple ignored content.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.IgnoredContent.IsStructured"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContent.GetText">
            <summary>
            Gets the text of the ignored content.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.IgnoredContent.IsStructured">
            <summary>
            Gets the value indicating whether the ignored content has a sub-tree of SyntaxNode instances representing it.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.IgnoredContent.GetStructuredNode"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.IgnoredContent.LanguageElement">
            <summary>
            Gets the language element represented by the ignored content.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.IgnoredContent.LanguageElementName">
            <summary>
            Gets the name of the language element represented by the ignored content.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.IgnoredContent.SnapshotSpan">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.IgnoredContent.SnapshotSpan"/> occupied by the <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/>.
            </summary>
            <value>A SnapshotSpan that represents the position of the ignored content.</value>
        </member>
        <member name="P:Infragistics.Documents.Parsing.IgnoredContent.Span">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> occupied by the <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/>.
            </summary>
            <value>A TextSpan that represents the position of the ignored content.</value>
        </member>
        <member name="T:Infragistics.Documents.Parsing.IgnoredContentList">
            <summary>
            Represents a set of contiguous ignored content in the parse tree.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.IgnoredContentList.Empty">
            <summary>
            An empty ignored content list which doesn't exist in a parse tree.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContentList.GetEnumerator">
            <summary>
            Gets an enumerator which returns all <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/> in the list.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContentList.Equals(System.Object)">
            <summary>
            Determines whether the specified object equals this <see cref="T:Infragistics.Documents.Parsing.IgnoredContentList"/> value.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns>True if obj is another IgnoredContentList with the same values; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContentList.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Infragistics.Documents.Parsing.IgnoredContentList"/> value.
            </summary>
            <returns>A hash code for the IgnoredContent value.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContentList.ToString">
            <summary>
            Gets the text of the ignored content.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContentList.op_Equality(Infragistics.Documents.Parsing.IgnoredContentList,Infragistics.Documents.Parsing.IgnoredContentList)">
            <summary>
            Determines whether two <see cref="T:Infragistics.Documents.Parsing.IgnoredContentList"/> values are equal.
            </summary>
            <returns>True if the values are equal; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContentList.op_Inequality(Infragistics.Documents.Parsing.IgnoredContentList,Infragistics.Documents.Parsing.IgnoredContentList)">
            <summary>
            Determines whether two <see cref="T:Infragistics.Documents.Parsing.IgnoredContentList"/> values are not equal.
            </summary>
            <returns>True if the values are not equal; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContentList.Equals(Infragistics.Documents.Parsing.IgnoredContentList)">
            <summary>
            Determines whether the specified value equals this <see cref="T:Infragistics.Documents.Parsing.IgnoredContentList"/> value.
            </summary>
            <param name="other">The IgnoredContentList value to test for equality.</param>
            <returns>True if other has the same values; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.IgnoredContentList.GetText">
            <summary>
            Gets the text of the ignored content.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.IgnoredContentList.Count">
            <summary>
            Gets the number of <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/> values in the list.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.IgnoredContentList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/> at the specified index.
            </summary>
            <param name="index">The 0-based index of the IgnoredContent value to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.Parsing.IgnoredContentList.Count"/>.
            </exception>
            <returns>A IgnoredContent value represented the item at the specified index.</returns>
        </member>
        <member name="P:Infragistics.Documents.Parsing.IgnoredContentList.SnapshotSpan">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.IgnoredContentList.SnapshotSpan"/> occupied by the <see cref="T:Infragistics.Documents.Parsing.IgnoredContent"/>.
            </summary>
            <value>A SnapshotSpan that represents the position of the ignored content.</value>
        </member>
        <member name="P:Infragistics.Documents.Parsing.IgnoredContentList.Span">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> occupied by the <see cref="T:Infragistics.Documents.Parsing.IgnoredContentList"/>.
            </summary>
            <value>A TextSpan that represents the position of the ignored content.</value>
        </member>
        <member name="T:Infragistics.Documents.Parsing.CustomLanguage">
            <summary>
            Representing a custom language generated from a <see cref="T:Infragistics.Documents.Parsing.Grammar"/> at run-time.
            </summary>
            <remarks>
            <p class="body">
            To create a custom language which is created from generated code and therefore has shorter initialization time, see 
            <see cref="T:Infragistics.Documents.Parsing.LanguageGenerator"/>.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Documents.Parsing.Grammar"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.CustomLanguage.#ctor(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Instantiates a new instance of <see cref="T:Infragistics.Documents.Parsing.CustomLanguage"/>
            </summary>
            <param name="grammar">The associated grammar.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="grammar"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.CustomLanguage.OnGlobalAmbiguityDetected(Infragistics.Documents.Parsing.GlobalAmbiguityContext)">
            <summary>
            Gets called when a global ambiguity is detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. The specified <paramref name="context"/> contains two alternate parses for
            the text (if there are more than two alternate parses, this method will be called multiple times). A derived implementation of this method 
            can determine which of the two alternate parse sub-trees should be used in the final tree by setting
            <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/> on the specified context.
            </p>
            <p class="body">
            A grammar creator can override this method in a derived language to get notified of global ambiguities and know which rules need to be
            re-written or mark with priority.
            </p>
            </remarks>
            <param name="context">An object containing the relevant information about the global ambiguity.</param>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.HasPriority"/>
            <seealso cref="E:Infragistics.Documents.Parsing.CustomLanguage.GlobalAmbiguityDetected"/>
        </member>
        <member name="E:Infragistics.Documents.Parsing.CustomLanguage.GlobalAmbiguityDetected">
            <summary>
            Occurs when a global ambiguity is detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. The <see cref="T:Infragistics.Documents.Parsing.GlobalAmbiguityContext"/> on the event arguments contains two 
            alternate parses for the text (if there are more than two alternate parses, this event will be fired multiple times). An event handler can 
            determine which of the two alternate parse sub-trees should be used in the final tree by setting
            <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/> on the context of the event arguments.
            </p>
            <p class="body">
            A grammar creator can handle this event to get notified of global ambiguities and know which rules need to be re-written or mark with priority.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.HasPriority"/>
            <seealso cref="M:Infragistics.Documents.Parsing.LanguageBase.OnGlobalAmbiguityDetected(Infragistics.Documents.Parsing.GlobalAmbiguityContext)"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.EBNFLanguage">
            <summary>
            EBNFLanguage class (auto-generated 2/20/2013 9:39:29 PM)
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EBNFLanguage.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.EBNFLanguage"/> instance.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EBNFLanguage.CreateLexerStates(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Creates the LexerStates for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EBNFLanguage.CreateNonTerminalSymbols(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Creates the NonTerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EBNFLanguage.CreateProductions(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Creates the productions for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EBNFLanguage.CreateSyntaxRules(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Creates the syntax rules for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EBNFLanguage.GetParseTable">
            <summary>
            Gets the parse table for a GLR parser.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.EBNFLanguage.InitializeGrammarProperties(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Initializes the properties of the associated Grammar.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.EBNFLanguage.Instance">
            <summary>
            Returns a static instance of the language (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames">
            <summary>
            Symbol name constants for the <see cref="T:Infragistics.Documents.Parsing.EBNFLanguage"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.AlternationExpression">
            <summary>
            Name for the AlternationExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.AsteriskToken">
            <summary>
            Name for the AsteriskToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.BarToken">
            <summary>
            Name for the BarToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.CloseBraceToken">
            <summary>
            Name for the CloseBraceToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.CloseBracketToken">
            <summary>
            Name for the CloseBracketToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.CloseParenToken">
            <summary>
            Name for the CloseParenToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.CommaToken">
            <summary>
            Name for the CommaToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.COMMENT_END">
            <summary>
            Name for the COMMENT_END symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.COMMENT_START">
            <summary>
            Name for the COMMENT_START symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.COMMENT_TEXT">
            <summary>
            Name for the COMMENT_TEXT symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.ConcatenationExpression">
            <summary>
            Name for the ConcatenationExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.DollarSignToken">
            <summary>
            Name for the DollarSignToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.DoubleQuote">
            <summary>
            Name for the DoubleQuote symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.EmptyExpression">
            <summary>
            Name for the EmptyExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.EndOfStreamToken">
            <summary>
            Name for the EndOfStreamToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.EqualsToken">
            <summary>
            Name for the EqualsToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.ExceptionExpression">
            <summary>
            Name for the ExceptionExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.FactorExpression">
            <summary>
            Name for the FactorExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.GroupExpression">
            <summary>
            Name for the GroupExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.IdentifierToken">
            <summary>
            Name for the IdentifierToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.MinusToken">
            <summary>
            Name for the MinusToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.NewLineToken">
            <summary>
            Name for the NewLineToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.NonTerminalSymbolDeclaration">
            <summary>
            Name for the NonTerminalSymbolDeclaration symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.NumericLiteralToken">
            <summary>
            Name for the NumericLiteralToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.OpenBraceToken">
            <summary>
            Name for the OpenBraceToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.OpenBracketToken">
            <summary>
            Name for the OpenBracketToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.OpenParenToken">
            <summary>
            Name for the OpenParenToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.OptionalExpression">
            <summary>
            Name for the OptionalExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.RepetitionExpression">
            <summary>
            Name for the RepetitionExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.Root">
            <summary>
            Name for the Root symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.SemicolonToken">
            <summary>
            Name for the SemicolonToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.SPEC_SEQ_CONTENT">
            <summary>
            Name for the SPEC_SEQ_CONTENT symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.SPEC_SEQ_END">
            <summary>
            Name for the SPEC_SEQ_END symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.SPEC_SEQ_START">
            <summary>
            Name for the SPEC_SEQ_START symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.StringLiteralContent">
            <summary>
            Name for the StringLiteralContent symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.StringLiteralToken">
            <summary>
            Name for the StringLiteralToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.SymbolReferenceExpression">
            <summary>
            Name for the SymbolReferenceExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.UnrecognizedToken">
            <summary>
            Name for the UnrecognizedToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.EBNFLanguage.SymbolNames.WhitespaceToken">
            <summary>
            Name for the WhitespaceToken symbol.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.ServicesManager">
            <summary>
            A thread-safe class which manages a collection of services for a <see cref="T:Infragistics.Documents.Parsing.LanguageBase"/>-derived instance and allows
            services to be registered by a string key or by a Type.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.LanguageBase.ServicesManager"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.GetRegisteredServices">
            <summary>
            Returns a collection of registered services.
            </summary>
            <returns>A collection of registered services.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.GetRegisteredServiceTypes">
            <summary>
            Returns a collection of registered service types.
            </summary>
            <returns>A collection of registered service types.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.GetRegisteredServiceKeys">
            <summary>
            Returns a collection of registered service keys.
            </summary>
            <returns>A collection of registered service keys.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.GetService``1">
            <summary>
            Gets a service which was registered with a specific Type.
            </summary>
            <typeparam name="T">The Type which was used as a key to register the service.</typeparam>
            <returns>The service instance if the service is found otherwise null.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.GetService(System.Type)">
            <summary>
            Gets a service which was registered with a specific Type.
            </summary>
            <param name="serviceType">The Type which was used as a key to register the service.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified, <paramref name="serviceType"/> is null.
            </exception>
            <returns>The service instance if the service is found otherwise null.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.GetService(System.String)">
            <summary>
            Gets a service registered with the specified key.
            </summary>
            <param name="serviceKey">The key of the service to get.</param>
            <returns>The service instance if the service is found otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="serviceKey"/> is null or empty.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.RegisterService``1(``0)">
            <summary>
            Registers a specific type of service instance.
            </summary>
            <remarks>
            <para class="body">Only one service instance of a specific type can be registered.</para>
            </remarks>
            <param name="service">The service instance to register.</param>
            <typeparam name="T">The Type used as a key to register the the service.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="service"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.RegisterService(System.Type,System.Object)">
            <summary>
            Registers a specific type of service instance.
            </summary>
            <remarks>
            <para class="body">Only one service instance of a specific type can be registered.</para>
            </remarks>
            <param name="serviceType">The Type used as a key to register the the service.</param>
            <param name="service">The service instance to register.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="serviceType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="service"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.RegisterService(System.String,System.Object)">
            <summary>
            Registers a service with a case-sensitively unique string key.
            </summary>
            <remarks>
            <para class="body">
            Each non-core service must be registered with a case-sensitively unique string key. There are no requirements on the format of the key.
            </para>
            </remarks>
            <param name="serviceKey">The case-sensitively unique string key of the service to register.</param>
            <param name="service">The service instance to register.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="serviceKey"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="service"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.UnregisterAllServices">
            <summary>
            Unregisters all currently registered services.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.UnregisterService``1">
            <summary>
            Unregisters a service of a specific type.
            </summary>
            <typeparam name="T">The Type which was used as a key to register the service.</typeparam>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.UnregisterService(System.Type)">
            <summary>
            Unregisters a service of a specific type.
            </summary>
            <param name="serviceType">The Type which was used as a key to register the service.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified, <paramref name="serviceType"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ServicesManager.UnregisterService(System.String)">
            <summary>
            Unregisters a service with a case-sensitively unique string key.
            </summary>
            <param name="serviceKey">The case-sensitively unique string key of the service to unregister.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="serviceKey"/> is null or empty.
            </exception>
        </member>
        <member name="E:Infragistics.Documents.Parsing.ServicesManager.ServiceAdded">
            <summary>
            Raised after a service is registered.
            </summary>
            <seealso cref="T:Infragistics.Documents.Parsing.ServiceEventArgs"/>
        </member>
        <member name="E:Infragistics.Documents.Parsing.ServicesManager.ServiceRemoved">
            <summary>
            Raised after a service is unregistered.
            </summary>
            <seealso cref="T:Infragistics.Documents.Parsing.ServiceEventArgs"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.PlainTextLanguage">
            <summary>
            Represents the plain text language.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.PlainTextLanguage.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.PlainTextLanguage"/> instance.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.PlainTextLanguage.CreateLexerStates(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Creates the LexerStates for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.PlainTextLanguage.InitializeGrammarProperties(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Initializes the properties of the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.PlainTextLanguage.InitializeDefaultServices">
            <summary>
            Gets called once on each instance to let derived <see cref="T:Infragistics.Documents.Parsing.LanguageBase"/> classes initialize the default services in the 
            <see cref="T:Infragistics.Documents.Parsing.ServicesManager"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.PlainTextLanguage.Instance">
            <summary>
            Returns a static instance of the language (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.PlainTextLanguage.SymbolNames">
            <summary>
            Symbol name constants for the <see cref="T:Infragistics.Documents.Parsing.PlainTextLanguage"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.PlainTextLanguage.SymbolNames.EndOfStreamToken">
            <summary>
            Name for the EndOfStreamToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.PlainTextLanguage.SymbolNames.NewLineToken">
            <summary>
            Name for the NewLineToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.PlainTextLanguage.SymbolNames.PunctuationToken">
            <summary>
            Name for the PunctuationToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.PlainTextLanguage.SymbolNames.UnrecognizedToken">
            <summary>
            Name for the UnrecognizedToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.PlainTextLanguage.SymbolNames.WhitespaceToken">
            <summary>
            Name for the WhitespaceToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.PlainTextLanguage.SymbolNames.WordToken">
            <summary>
            Name for the WordToken symbol.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.RegexLanguage">
            <summary>
            Represents the regular expression language.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RegexLanguage.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.RegexLanguage"/> instance.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RegexLanguage.CreateLexerStates(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Creates the LexerStates for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RegexLanguage.CreateNonTerminalSymbols(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Creates the NonTerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RegexLanguage.CreateProductions(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Creates the productions for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RegexLanguage.CreateSyntaxRules(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Creates the syntax rules for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RegexLanguage.GetParseTable">
            <summary>
            Gets the parse table for a GLR parser.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RegexLanguage.InitializeGrammarProperties(Infragistics.Documents.Parsing.Grammar)">
            <summary>
            Initializes the properties of the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RegexLanguage.OnError(Infragistics.Documents.Parsing.ParseErrorContext)">
            <summary>
            Gets called when an error is detected during the parse.
            </summary>
            <remarks>
            <p class="body">
            The errors in the specified <paramref name="context"/> can be modified, added, or removed.
            </p>
            </remarks>
            <param name="context">The contextual information about the error which was detected.</param>
        </member>
        <member name="M:Infragistics.Documents.Parsing.RegexLanguage.OnGlobalAmbiguityDetected(Infragistics.Documents.Parsing.GlobalAmbiguityContext)">
            <summary>
            Gets called when a global ambiguity is detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. The specified <paramref name="context"/> contains two alternate parses for
            the text (if there are more than two alternate parses, this method will be called multiple times). A derived implementation of this method 
            can determine which of the two alternate parse sub-trees should be used in the final tree by setting
            <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/> on the specified context.
            </p>
            <p class="body">
            A grammar creator can override this method in a derived language to get notified of global ambiguities and know which rules need to be
            re-written or mark with priority.
            </p>
            </remarks>
            <param name="context">An object containing the relevant information about the global ambiguity.</param>
            <seealso cref="P:Infragistics.Documents.Parsing.NonTerminalSymbol.HasPriority"/>
            <seealso cref="E:Infragistics.Documents.Parsing.CustomLanguage.GlobalAmbiguityDetected"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.RegexLanguage.Instance">
            <summary>
            Returns a static instance of the language (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames">
            <summary>
            Symbol name constants for the <see cref="T:Infragistics.Documents.Parsing.RegexLanguage"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.AlternationExpression">
            <summary>
            Name for the AlternationExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.AsteriskToken">
            <summary>
            Name for the AsteriskToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.BackreferenceToken">
            <summary>
            Name for the BackreferenceToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.BalancingGroupExpression">
            <summary>
            Name for the BalancingGroupExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.BarToken">
            <summary>
            Name for the BarToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.BracedQuantifierExpression">
            <summary>
            Name for the BracedQuantifierExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.BracedQuantifierLazyExpression">
            <summary>
            Name for the BracedQuantifierLazyExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.BracedQuantifierQuestionMarkToken">
            <summary>
            Name for the BracedQuantifierQuestionMarkToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.BracedQuantifierToken">
            <summary>
            Name for the BracedQuantifierToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.CaretToken">
            <summary>
            Name for the CaretToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.Character">
            <summary>
            Name for the Character symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.CharacterCategoryToken">
            <summary>
            Name for the CharacterCategoryToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.CharacterExclusionSet">
            <summary>
            Name for the CharacterExclusionSet symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.CharacterInSet">
            <summary>
            Name for the CharacterInSet symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.CharacterRange">
            <summary>
            Name for the CharacterRange symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.CharacterSet">
            <summary>
            Name for the CharacterSet symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.CloseBracketToken">
            <summary>
            Name for the CloseBracketToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.CloseParenToken">
            <summary>
            Name for the CloseParenToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ColonToken">
            <summary>
            Name for the ColonToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ConcatenationExpression">
            <summary>
            Name for the ConcatenationExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ConditionalExpression">
            <summary>
            Name for the ConditionalExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ControlCharacterToken">
            <summary>
            Name for the ControlCharacterToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.DollarSignToken">
            <summary>
            Name for the DollarSignToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.DotToken">
            <summary>
            Name for the DotToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.EmptyExpression">
            <summary>
            Name for the EmptyExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.EndingEscapeError">
            <summary>
            Name for the EndingEscapeError symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.EndOfStreamToken">
            <summary>
            Name for the EndOfStreamToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.EqualsToken">
            <summary>
            Name for the EqualsToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.EscapedCharacterToken">
            <summary>
            Name for the EscapedCharacterToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ExclamationPointToken">
            <summary>
            Name for the ExclamationPointToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.GreaterThanToken">
            <summary>
            Name for the GreaterThanToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.GroupName">
            <summary>
            Name for the GroupName symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.HexadecimalCharacterToken">
            <summary>
            Name for the HexadecimalCharacterToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.LessThanToken">
            <summary>
            Name for the LessThanToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.MinusToken">
            <summary>
            Name for the MinusToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.MultiLineComment">
            <summary>
            Name for the MultiLineComment symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.NamedBackreferenceToken">
            <summary>
            Name for the NamedBackreferenceToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.NamedGroupExpression">
            <summary>
            Name for the NamedGroupExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.NegativeLookaheadExpression">
            <summary>
            Name for the NegativeLookaheadExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.NegativeLookbehindExpression">
            <summary>
            Name for the NegativeLookbehindExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.NewLineToken">
            <summary>
            Name for the NewLineToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.NonBacktrackingExpression">
            <summary>
            Name for the NonBacktrackingExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OctalCharacterToken">
            <summary>
            Name for the OctalCharacterToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OneOrMoreExpression">
            <summary>
            Name for the OneOrMoreExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OneOrMoreLazyExpression">
            <summary>
            Name for the OneOrMoreLazyExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OpenBracketToken">
            <summary>
            Name for the OpenBracketToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OpenParenToken">
            <summary>
            Name for the OpenParenToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OptionGlobalExpression">
            <summary>
            Name for the OptionGlobalExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OptionGlobalExpressions">
            <summary>
            Name for the OptionGlobalExpressions symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OptionLocalExpression">
            <summary>
            Name for the OptionLocalExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OptionsSet">
            <summary>
            Name for the OptionsSet symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.OptionsSpecifier">
            <summary>
            Name for the OptionsSpecifier symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ParenthesizedExpression">
            <summary>
            Name for the ParenthesizedExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.PlusToken">
            <summary>
            Name for the PlusToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.PositiveLookaheadExpression">
            <summary>
            Name for the PositiveLookaheadExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.PositiveLookbehindExpression">
            <summary>
            Name for the PositiveLookbehindExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.QuestionMarkToken">
            <summary>
            Name for the QuestionMarkToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.RegexPattern">
            <summary>
            Name for the RegexPattern symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.UnescapedCharacterToken">
            <summary>
            Name for the UnescapedCharacterToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.UnicodeCharacterToken">
            <summary>
            Name for the UnicodeCharacterToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.UnrecognizedToken">
            <summary>
            Name for the UnrecognizedToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.WhitespaceToken">
            <summary>
            Name for the WhitespaceToken symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ZeroOrMoreExpression">
            <summary>
            Name for the ZeroOrMoreExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ZeroOrMoreLazyExpression">
            <summary>
            Name for the ZeroOrMoreLazyExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ZeroOrOneExpression">
            <summary>
            Name for the ZeroOrOneExpression symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.RegexLanguage.SymbolNames.ZeroOrOneLazyExpression">
            <summary>
            Name for the ZeroOrOneLazyExpression symbol.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.LexerState">
            <summary>
            Abstract base class representing a specific state in which the lexer can be when reading tokens. Only the symbols within 
            a lexer state can be matched by the lexer when the lexer is in that state.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerState.ToString">
            <summary>
            Gets the string representation of the <see cref="T:Infragistics.Documents.Parsing.LexerState"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.LexerState.SetLexerStateData(System.Int64[][])">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerState.Grammar">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.LexerState.Grammar"/> to which the lexer state belongs.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerState.IsDefaultLexerState">
            <summary>
            Gets the value indicating whether the <see cref="T:Infragistics.Documents.Parsing.LexerState"/> is the default lexer state of the <see cref="P:Infragistics.Documents.Parsing.LexerState.Grammar"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.LexerStateCollection.DefaultLexerState"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerState.Name">
            <summary>
            Gets the name of the lexer state.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.LexerState.Symbols">
            <summary>
            Gets the collection of symbols which can be matched when the lexer is in the current lexer state.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Lexing.LexerToken.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Lexing.LexerToken.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.Lexing.LexerToken.op_Equality(Infragistics.Documents.Lexing.LexerToken,Infragistics.Documents.Lexing.LexerToken)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Lexing.LexerToken"/> structures for equality
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Lexing.LexerToken.op_Inequality(Infragistics.Documents.Lexing.LexerToken,Infragistics.Documents.Lexing.LexerToken)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Lexing.LexerToken"/> structures for inequality
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Lexing.LexerToken.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.ParseErrorContext">
            <summary>
            Represents information related to error(s) which have occurred during the parse.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ParseErrorContext.Errors">
            <summary>
            Gets the collection of errors which have occurred. 
            </summary>
            <remarks>
            <p class="body">
            This collection or the errors within it can be modified to change what it shown to the user.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ParseErrorContext.IsMissing">
            <summary>
            Gets the value indicating if the error represents a missing node which was created by the parse to complete the parse tree.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ParseErrorContext.IsSkipped">
            <summary>
            Gets the value indicating if the error represents a token which was skipped because it was not expected in a specific context.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ParseErrorContext.SnapshotSpan">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.ParseErrorContext.SnapshotSpan"/> indicating the location of the error within the document.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ParseErrorContext.Span">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> indicating the location of the error within the document.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ParseErrorContext.Symbol">
            <summary>
            Gets the terminal or non-terminal symbol which is associated with the error(s).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.ParseTable">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ParseTable.Decode(System.Int64[][],System.Int64[][])">
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.ParseState">
            <summary>
            Encapsulates a discrete state for a GLR parser.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.ParseState.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.AmbiguousParseAction.Equals(System.Object)">
            <summary>
            Determines whether the specified object equals this <see cref="T:Infragistics.Documents.Parsing.AmbiguousParseAction"/> value.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns>True if obj is another AmbiguousParseAction with the same values; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.AmbiguousParseAction.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:Infragistics.Documents.Parsing.AmbiguousParseAction"/> value.
            </summary>
            <returns>A hash code for the AmbiguousParseAction value.</returns>
        </member>
        <member name="T:Infragistics.Documents.ClassificationType">
            <summary>
            A class that defines the details of a text classification.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.#ctor(System.String,System.String,System.String)">
            <summary>
            Created a new <see cref="T:Infragistics.Documents.ClassificationType"/> instance.
            </summary>
            <param name="key">
            The key used to match the classification type based on a <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElementName"/> when its <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElement"/> is Custom.
            </param>
            <param name="name">The display name of the classification type.</param>
            <param name="description">The description of the classification type.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="key"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.FromClassification(Infragistics.Documents.Classification)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified <see cref="T:Infragistics.Documents.Classification"/>.
            </summary>
            <param name="classification">The <see cref="T:Infragistics.Documents.Classification"/> of the <see cref="T:Infragistics.Documents.ClassificationType"/> that is to be returned.</param>
            <returns>The <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified <see cref="T:Infragistics.Documents.Classification"/>.</returns>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.FromLanguageElement(Infragistics.Documents.Parsing.LanguageElement)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified <see cref="T:Infragistics.Documents.Parsing.LanguageElement"/>
            </summary>
            <param name="languageElement">The <see cref="T:Infragistics.Documents.Parsing.LanguageElement"/> for which a <see cref="T:Infragistics.Documents.ClassificationType"/> is to be returned.</param>
            <returns>The <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified <see cref="T:Infragistics.Documents.Parsing.LanguageElement"/></returns>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.FromString(System.String)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified string.
            </summary>
            <param name="classificationType">The name of the <see cref="T:Infragistics.Documents.ClassificationType"/> (represented as a string) that is to be returned.</param>
            <returns>The <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified string, or Null if there is no corresponding <see cref="T:Infragistics.Documents.ClassificationType"/>.</returns>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Description">
            <summary>
            Returns a textual description of this <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Key">
            <summary>
            Returns the key used to match the <see cref="T:Infragistics.Documents.ClassificationType"/> based on a <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElementName"/> when its 
            <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.LanguageElement"/> is Custom.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Name">
            <summary>
            Returns a display name that can be used to identify this <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Comment">
            <summary>
            Returns a Comment <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DateLiteral">
            <summary>
            Returns a DateLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DiagnosticError">
            <summary>
            Returns a DiagnosticError <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DiagnosticInformation">
            <summary>
            Returns a DiagnosticInformation <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DiagnosticWarning">
            <summary>
            Returns a DiagnosticWarning <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DocCommentStart">
            <summary>
            Returns a DocCommentStart <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DocCommentTag">
            <summary>
            Returns a DocCommentTag <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DocCommentText">
            <summary>
            Returns a DocCommentText <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Identifier">
            <summary>
            Returns an Identifier <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Keyword">
            <summary>
            Returns a Keyword <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.NumericLiteral">
            <summary>
            Returns a NumericLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Operator">
            <summary>
            Returns an Operator <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.PreprocessorDirective">
            <summary>
            Returns a PreprocessorDirective <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.PreprocessorDirectiveText">
            <summary>
            Returns a PreprocessorDirectiveText <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Punctuation">
            <summary>
            Returns a Punctuation <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.StringLiteral">
            <summary>
            Returns a StringLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Undefined">
            <summary>
            Returns an Undefined <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Unrecognized">
            <summary>
            Returns an Unrecognized <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Whitespace">
            <summary>
            Returns a Whitespace <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="T:Infragistics.Documents.NormalizedSnapshotSpanCollection">
            <summary>
            Returns a collection of <see cref="T:Infragistics.Documents.SnapshotSpan"/>s.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Classification">
            <summary>
            Enumerations that correspond to the available <see cref="T:Infragistics.Documents.ClassificationType"/>s. 
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.Comment">
            <summary>
            A Comment <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.DateLiteral">
            <summary>
            A DateLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.DiagnosticError">
            <summary>
            A DiagnosticError <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.DiagnosticInformation">
            <summary>
            A DiagnosticInformation <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.DiagnosticWarning">
            <summary>
            A DiagnosticWarning <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.DocCommentStart">
            <summary>
            A DocCommentStart <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.DocCommentTag">
            <summary>
            A DocCommentTag <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.DocCommentText">
            <summary>
            A DocCommentText <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.Identifier">
            <summary>
            A Identifier <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.Keyword">
            <summary>
            A Keyword <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.NumericLiteral">
            <summary>
            A NumericLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.Operator">
            <summary>
            A Operator <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.PreprocessorDirective">
            <summary>
            A PreprocessorDirective <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.PreprocessorDirectiveText">
            <summary>
            A PreprocessorDirectiveText <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.Punctuation">
            <summary>
            A Punctuation <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.StringLiteral">
            <summary>
            A StringLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.Undefined">
            <summary>
            A Undefined <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.Unrecognized">
            <summary>
            A Unrecognized <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Classification.Whitespace">
            <summary>
            A Whitespace <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="T:Infragistics.Documents.LineScanType">
            <summary>
            Determines where to set the <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner">Scanner</see>'s <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">CurrentOffset</see> relative to the current line position.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.CurrentLineEnd">
            <summary>
            Seek to the end of the current line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.CurrentLineStart">
            <summary>
            Seek to the beginning of the current line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.NextLineEnd">
            <summary>
            Seek to the end of the next line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.NextLineStart">
            <summary>
            Seek to the beginning of the next line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.PreviousLineEnd">
            <summary>
            Seek to the end of the previous line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.PreviousLineStart">
            <summary>
            Seek to the beginning of the previous line.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.NewLineSequence">
            <summary>
            Determines the sequence of characters used to delimit lines in a TextDocument.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.NewLineSequence.EnvironmentNewLine">
            <summary>
            The value returns from <b>Enviornment.NewLine</b>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.NewLineSequence.LineFeed">
            <summary>
            A single linefeed character (0x0A)
            </summary>
        </member>
        <member name="F:Infragistics.Documents.NewLineSequence.CarriageReturn">
            <summary>
            A single carriage return character (0x0D)
            </summary>
        </member>
        <member name="F:Infragistics.Documents.NewLineSequence.CarriageReturnAndLineFeed">
            <summary>
            2 characters, a carriage return (0x0D) followed by a line feed (0x0A)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.PointTrackingMode">
            <summary>
            Determines how <see cref="T:Infragistics.Documents.SnapshotPoint"/>s track between snapshots.
            </summary>
            <seealso cref="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)"/>
        </member>
        <member name="F:Infragistics.Documents.PointTrackingMode.Positive">
            <summary>
            The point tracks toward the end of the document. An insertion at the current position pushes the point to the end of the inserted text. If a replacement contains the point, it will end up at the end of the replacement text.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.PointTrackingMode.Negative">
            <summary>
            The point tracks toward the beginning of the document. An insertion at the current position leaves the point unchanged. If a replacement contains the point, it will end up at the beginning of the replacement text.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.SpanTrackingMode">
            <summary>
            Determines how <see cref="T:Infragistics.Documents.SnapshotSpan"/>s track between snapshots.
            </summary>
            <seealso cref="M:Infragistics.Documents.SnapshotSpan.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.SpanTrackingMode)"/>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgeExclusive">
            <summary>
            The leading edge uses a positive tracking mode and the trailing edge uses a negative tracking mode. This causes the span to not expand when text is inserted at either boundary.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgeInclusive">
            <summary>
            The leading edge uses a negative tracking mode and the trailing edge uses a positive tracking mode. This causes the span to expand when text is inserted at either boundary.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgePositive">
            <summary>
            Both edges of the span use a positive tracking mode.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgeNegative">
            <summary>
            Both edges of the span use a negative tracking mode.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TabEntryBehavior">
            <summary>
            Determines what gets inserted into a <see cref="T:Infragistics.Documents.TextDocument"/> when a tab key is entered.
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TextDocument.TabInsertBehavior</seealso>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent">TextDocument.TabExtent</seealso>
        </member>
        <member name="F:Infragistics.Documents.TabEntryBehavior.KeepTabs">
            <summary>
            When a tab character is entered it is inserted into the document 'as is' (i.e. as a tab character).
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TabEntryBehavior.ReplaceTabsWithSpaces">
            <summary>
            When a tab character is entered it is converted to an appropriate number of spaces in the document based upon the <see cref="P:Infragistics.Documents.TextDocument.TabExtent">TextDocument.TabExtent</see> setting.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChangeSource">
            <summary>
            Identifies the source of a text change.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChangingEventArgs"/>
            <seealso cref="T:Infragistics.Documents.TextChangedEventArgs"/>
            <seealso cref="P:Infragistics.Documents.TextChangingEventArgs.Source"/>
            <seealso cref="P:Infragistics.Documents.TextChangedEventArgs.Source"/>
        </member>
        <member name="F:Infragistics.Documents.TextChangeSource.Change">
            <summary>
            A method was called on <see cref="T:Infragistics.Documents.TextDocument"/>, e.g. <see cref="M:Infragistics.Documents.TextDocument.Insert(System.Int32,System.String)">Insert</see>, <see cref="M:Infragistics.Documents.TextDocument.Delete(System.Int32,System.Int32)">Delete</see>, <see cref="M:Infragistics.Documents.TextDocument.Append(System.String)">Append</see>, <see cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</see> etc.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TextChangeSource.Undo">
            <summary>
            The <see cref="T:Infragistics.Documents.TextDocument"/>'s <see cref="P:Infragistics.Documents.TextDocument.UndoManager">UndoManager</see>.<see cref="M:Infragistics.Undo.UndoManager.Undo(System.Int32)">Undo</see> method was called.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TextChangeSource.Redo">
            <summary>
            The <see cref="T:Infragistics.Documents.TextDocument"/>'s <see cref="P:Infragistics.Documents.TextDocument.UndoManager">UndoManager</see>.<see cref="M:Infragistics.Undo.UndoManager.Redo(System.Int32)">Redo</see> method was called.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TokenScanType">
            <summary>
            Determines where to set the <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner">Scanner</see>'s <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">CurrentOffset</see> relative to the current token position.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.CurrentTokenEnd">
            <summary>
            Seek to the end of the current token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.CurrentTokenStart">
            <summary>
            Seek to the beginning of the current token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.NextTokenEnd">
            <summary>
            Seek to the end of the next token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.NextTokenStart">
            <summary>
            Seek to the beginning of the next token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.PreviousTokenEnd">
            <summary>
            Seek to the end of the previous token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.PreviousTokenStart">
            <summary>
            Seek to the beginning of the previous token.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.WordScanType">
            <summary>
            Determines where to set the <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner">Scanner</see>'s <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">CurrentOffset</see> relative to the current word position.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.CurrentWordEnd">
            <summary>
            Seek to the end of the current word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.CurrentWordStart">
            <summary>
            Seek to the beginning of the current word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.NextWordEnd">
            <summary>
            Seek to the end of the next word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.NextWordStart">
            <summary>
            Seek to the beginning of the next word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.PreviousWordEnd">
            <summary>
            Seek to the end of the previous word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.PreviousWordStart">
            <summary>
            Seek to the beginning of the previous word.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentAutoCasingMode">
            <summary>
            Represents that various auto-casing behaviors which can be used when the language has case-insensitive keywords and other terminal symbols.
            </summary>
            <remarks>
            <p class="body">
            When a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> is created with a <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Comparison"/> value of LiteralIgnoreCase, the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Value"/>
            is used to case-insensitively match text. However, if the text does not match the Value exactly, the document can automatically adjust the case to match that
            of the Value.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Documents.TextDocumentAutoCasingMode.None">
            <summary>
            No auto-casing should occur. The text in the document should remain exactly as the user typed it.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TextDocumentAutoCasingMode.OnLineCompleted">
            <summary>
            Auto-casing should occur when an edited line is completed. After a line is edited, if the user types a newline, moves the cursor to a different line, changes 
            the active view of the editor, or moves focus off the editor, all text on the edited line will be auto-cased. In addition, if any edits affect multiple lines, 
            such as pasting multiple lines or changing the indent level of a block of text, all lines affected will be auto-cased.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.GlobalAmbiguityDetectedEventArgs">
            <summary>
            Events arguments for the <see cref="E:Infragistics.Documents.Parsing.CustomLanguage.GlobalAmbiguityDetected"/> event.
            </summary>
            <seealso cref="E:Infragistics.Documents.Parsing.CustomLanguage.GlobalAmbiguityDetected"/>
        </member>
        <member name="P:Infragistics.Documents.GlobalAmbiguityDetectedEventArgs.Context">
             <summary>
             An object containing the relevant information about the global ambiguity.
             </summary>
             <remarks>
            <p class="body">
             A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
             rules for the language and the context in which text occurs. The Context value contains two alternate parses for the text (if there are 
             more than two alternate parses, the event will be fired multiple times). An event handler can determine which of the two alternate parse 
             sub-trees should be used in the final tree by setting <see cref="P:Infragistics.Documents.Parsing.GlobalAmbiguityContext.PreferredSubTreeRoot"/> on the Context value.
             </p>
             </remarks>
        </member>
        <member name="T:Infragistics.Documents.SyntaxTreeCreatedEventArgs">
            <summary>
            Events arguments for the <see cref="E:Infragistics.Documents.Parsing.LanguageBase.SyntaxTreeCreated"/> event.
            </summary>
            <seealso cref="E:Infragistics.Documents.Parsing.LanguageBase.SyntaxTreeCreated"/>
        </member>
        <member name="P:Infragistics.Documents.SyntaxTreeCreatedEventArgs.IsCanceled">
            <summary>
            Returns whether the operation has been canceled and therefore the tree will be discarded. (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SyntaxTreeCreatedEventArgs.SyntaxTree">
            <summary>
            Gets/sets the tree that will be returned from the Parse method.
            </summary>
            <exception cref="T:System.ArgumentException">
            Occurs when the tree is not compatible, i.e. from a different snapshot.
            </exception>
        </member>
        <member name="T:Infragistics.Documents.TextDocument">
            <summary>
            Represents a single text or code document (if the <see cref="P:Infragistics.Documents.TextDocument.Language"/>. property is set).
            </summary>
            <seealso cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            <seealso cref="T:Infragistics.Documents.TextDocumentSnapshotScanner"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OnTextChanged(Infragistics.Documents.TextChangedEventArgs)">
            <summary>
            Invokes the
            <see cref="E:Infragistics.Documents.TextDocument.TextChanged">TextChanged</see>
            event.
            </summary>
            <param name="args">
            An instance of the
            <see cref="T:Infragistics.Documents.TextChangedEventArgs">TextChangedEventArgs</see>
            class.
            </param>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanged">TextChanged event (TextDocument class)</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OnTextChanging(Infragistics.Documents.TextChangingEventArgs)">
            <summary>
            Invokes the
            <see cref="E:Infragistics.Documents.TextDocument.TextChanging">TextChanging</see>
            event.
            </summary>
            <param name="args">
            An instance of the
            <see cref="T:Infragistics.Documents.TextChangingEventArgs">TextChangingEventArgs</see>
            class.
            </param>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanging">TextChanging event (TextDocument class)</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OnTextLoaded(System.EventArgs)">
            <summary>
            Occurs after either the <see cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</see> or <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method is called.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this event will also occurs if there is existing text and the <see cref="P:Infragistics.Documents.TextDocument.Language"/> property is changed.</para>
            </remarks>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextLoaded">TextLoaded event</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Append(System.String)">
            <summary>
            Appends text to the end of the document
            </summary>
            <param name="text">The text to insert</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.ClearUndoRedoHistory(System.Boolean)">
            <summary>
            Removes all the Undo and Redo history that relates to this TextDocument.
            </summary>
            <param name="includeRootTransaction">Indicates whether this method should affect the current open RootTransaction on the <see cref="P:Infragistics.Documents.TextDocument.UndoManager"/> if there is one.</param>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling the <see cref="P:Infragistics.Documents.TextDocument.UndoManager"/>'s RemoveAll method with a filter that removes only 
            undo units whose Target is this TextDocument. By default that will be all of the history, however, since the <see cref="P:Infragistics.Documents.TextDocument.UndoManager"/> property is settable it is
            possible to share a single instance of an UndoManager with more that one TextDocument so that there histories are mingled.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.CreateTagAggregator``1">
            <summary>
            Returns a DocumentTagAggregator that can aggregate ITags of type T.
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> to aggregate</typeparam>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete">
            <summary>
            Removes all text from this document.
            </summary>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete(System.Int32)">
            <summary>
            Deletes text from the document, starting at the specified <paramref name="startOffset"/>.
            </summary>
            <param name="startOffset">The zero-based offset from which the deletion begins.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Deletes text from the document 
            </summary>
            <param name="span">The span to delete.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes text from the document 
            </summary>
            <param name="startOffset">The zero-based offset where the text to delete start.</param>
            <param name="length">The length of the text to delete.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">
            <summary>
            Finds an instance of text in the document that matches the search criteria and replaces it with another string.
            </summary>
            <param name="newText">The new text</param>
            <param name="criteria">The search criteria</param>
            <param name="startOffset">The start offset</param>
            <param name="wrapIfNotFound">if true continue the search by wrapping if the end is reached without a match.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,Infragistics.Documents.Parsing.TextSpan,System.Int32,System.Boolean)">
            <summary>
            Finds an instance of text in the document that matches the search criteria and replaces it with another string..
            </summary>
            <param name="newText">The new text</param>
            <param name="criteria">The search criteria</param>
            <param name="spanToSearch">The span of text to limit the search to.</param>
            <param name="startOffset">The start offset relative to the beginning of the document.</param>
            <param name="wrapIfNotFound">if true continue the search by wrapping if the end is reached without a match.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.Documents.Parsing.TextSpan})">
            <summary>
            Replaces all instances of text in the document that matches the search criteria.
            </summary>
            <param name="criteria">The search criteria</param>
            <param name="replacementText">The new text</param>
            <param name="spanToSearch">An optional span to limit the scope of the find/replace</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.InitializeText(System.String)">
            <summary>
            Initializes all of the text in the document.
            </summary>
            <param name="text">The text to </param>
            <exception cref="T:System.InvalidOperationException">if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling one of the <see cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</see> methods.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.IndentLines(System.Int32,System.Int32)">
            <summary>
            Indents a block of lines (i.e. inserts leading whitepsace).
            </summary>
            <param name="lineIndex">The zero-based index of the first line to indent.</param>
            <param name="lineCount">The total number of lines to indent.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If lineIndex is less than 0 or lineIndex plus lineCount greater than 1 minus the number of lines in the document..</exception>
            <remarks>
            <para class="note"><b>Note:</b> the amount and type of whitespace inserted is determined by the <see cref="P:Infragistics.Documents.TextDocument.TabExtent"/> and <see cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TabEntryBehavior</see> property settings.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.OutdentLines(System.Int32,System.Int32)"/>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent"/>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TabEntryBehavior</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Insert(System.Int32,System.String)">
            <summary>
            Inserts text into the document at a specific offset
            </summary>
            <param name="offset">The zero-based offset where to insert the text.</param>
            <param name="text">The text to insert</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than 0 or greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Load(System.String)">
            <summary>
            Initializes the document with text from the specified file.
            </summary>
            <param name="fileName">The name of the file to load.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">if filename is null or empty.</exception>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling the <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">
            <summary>
            Initializes the document with text from a stream.
            </summary>
            <param name="stream">The stream that contains the text.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">if stream is null.</exception>
            <exception cref="T:System.InvalidOperationException">if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling the <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OutdentLines(System.Int32,System.Int32)">
            <summary>
            Outdents a block of lines (i.e. removes leading whitepsace).
            </summary>
            <param name="lineIndex">The zero-based index of the first line to outdent.</param>
            <param name="lineCount">The total number of lines to outdent.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If lineIndex is less than 0 or lineIndex plus lineCount greater than 1 minus the number of lines in the document.</exception>
            <remarks>
            <para class="note"><b>Note:</b> the amount and type of whitespace removed is determined by the <see cref="P:Infragistics.Documents.TextDocument.TabExtent"/> property setting.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.IndentLines(System.Int32,System.Int32)"/>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Parse">
            <summary>
            Parses the document synchronously.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> just before the method returns the <see cref="E:Infragistics.Documents.TextDocument.PropertyChanged"/> event will be raised and the <see cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/> property will return the new tree.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/>		
        </member>
        <member name="M:Infragistics.Documents.TextDocument.ParseAsync">
            <summary>
            Parses the document on a background thread.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> when the parse operation is complete the <see cref="E:Infragistics.Documents.TextDocument.PropertyChanged"/> event will be raised and the <see cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/> property will return the new tree.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Replace(System.String,Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Replaces a range of text in the document with a new string.
            </summary>
            <param name="newText">The new text</param>
            <param name="spanToReplace">The span of the text to replace.</param>
            <returns>True if successful.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the replacementSpan. is not valid.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Replace(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces a range of text in the document with a new string.
            </summary>
            <param name="newText">The new text</param>
            <param name="startOffset">The zero-based offset where the text to replace starts.</param>
            <param name="lengthOfTextToReplace">The length of the text to delete.</param>
            <returns>True if successful.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save">
            <summary>
            Saves the document to the file specified via a previous call to the <see cref="M:Infragistics.Documents.TextDocument.Load(System.String)"/> method.
            </summary>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(Infragistics.Documents.NewLineSequence)">
            <summary>
            Saves the document to the file specified via a previous call to the <see cref="M:Infragistics.Documents.TextDocument.Load(System.String)"/> method.
            </summary>
            <param name="newLineSequence">The sequence of characters to delimit each line in the output.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.String)">
            <summary>
            Saves the document to the specified file.
            </summary>
            <param name="fileName">The name of the file to write to.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.String,Infragistics.Documents.NewLineSequence)">
            <summary>
            Saves the document to the specified file.
            </summary>
            <param name="fileName">The name of the file to write to.</param>
            <param name="newLineSequence">The sequence of characters to delimit each line in the output.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.IO.Stream,Infragistics.Documents.NewLineSequence)">
            <summary>
            Saves the document to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="newLineSequence">The sequence of characters to delimit each line in the output.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.TextChanged">
            <summary>
            Occurs after changes have been made to the document's text.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChangedEventArgs">TextChangedEventArgs class</seealso>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.TextChanging">
            <summary>
            Occurs before changes are made to the document's text.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChangingEventArgs">TextChangingEventArgs class</seealso>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.TextLoaded">
            <summary>
            Occurs after either the <see cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</see> or the <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method is called.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this event will also occurs if there is existing text and the <see cref="P:Infragistics.Documents.TextDocument.Language"/> property is changed.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.AutoCasingMode">
            <summary>
            Gets or sets the auto-casing behaviors to use when the language has case-insensitive keywords and other terminal symbols.
            </summary>
            <remarks>
            <p class="body">
            When a <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol"/> is created with a <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Comparison"/> value of LiteralIgnoreCase, the <see cref="P:Infragistics.Documents.Parsing.TerminalSymbol.Value"/>
            is used to case-insensitively match text. However, if the text does not match the Value exactly, the document can automatically adjust the case to match that
            of the Value.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.CurrentSnapshot">
            <summary>
            Returns a <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> representing the current version of the document (read-only).
            </summary>
            <value>A thread-safe immutable snapshot of the current version of the document</value>
            <remarks>
            <para class="note"><b>Note:</b> Every time a change is made to the document a new snapshot is created. Each snapshot is thread-safe and immutable.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.FileName">
            <summary>
            Returns the name of the file passed into the <see cref="M:Infragistics.Documents.TextDocument.Load(System.String)"/> method (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.Language">
            <summary>
            Returns/sets the associated language
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if this property is not set then the document will be treated as plain text with no syntax rules. In this case an instance of the <see cref="T:Infragistics.Documents.Parsing.PlainTextLanguage">PlainTextLanguage</see> will be returned.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.IsReadOnly">
            <summary>
            Returns/sets whether or not the text in the document can be changed.
            </summary>
            <value>False if the text can be edited, otherwise true.</value>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.NewLineSequence">
            <summary>
            Returns/sets the sequence of characters used to delimit lines in the document.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.SyntaxTree">
            <summary>
            Returns the syntax parse tree (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.TabExtent">
            <summary>
            Returns/sets the number of spaces a tab character represents.
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TabEntryBehavior</seealso>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.TabEntryBehavior">
            <summary>
            Returns/sets what gets inserted into a document when a tab key is entered..
            </summary>
            <value>The default value is 'KeepTabs'.</value>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.UndoManager">
            <summary>
            Returns/sets the object that manages the undo/redo stacks
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> by default each instance of a TextDocument will instanitate its own <see cref="T:Infragistics.Undo.UndoManager"/>. However, since this property is settable it is possible to have some or all TextDocuments share a single UndoManager.</para>
            </remarks>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.PropertyChanged">
            <summary>
            Ocuurs after a property value has changed
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChangingEventArgs">
            <summary>
            Provides information about a change to text in a
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>
            </summary>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanging">TextChanging Event</seealso>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.After">
            <summary>
            Returns the new 
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> 
            which reflects the
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            which triggered this event are applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.Before">
            <summary>
            Returns the current 
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> 
            which reflects the state of the document before the  <see cref="T:Infragistics.Documents.TextChange">changes</see> which triggered this event are applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.CanCancel">
            <summary>
            Determines if this action can be canceled (read-only).
            </summary>
            <value>true to allow cancellation of the action, otherwise false.</value>
            <remarks>
            <para class="note"><b>Note:</b> if the <see cref="P:Infragistics.Documents.TextChangingEventArgs.Source"/> property returns 'Undo' or 'Redo' CanCancel will return false."/&gt;</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.Changes">
            <summary>
            Returns a read-only list containing all 
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            that triggered this event.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChange"/>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.Source">
            <summary>
            Identifies the source of the change (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChangedEventArgs">
            <summary>
            Provides information about a change to text in a
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>
            </summary>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanged">TextChanged Event</seealso>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.After">
            <summary>
            Returns the current
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see>,
            which reflects the
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.Before">
            <summary>
            Returns the old 
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see>,
            which reflects the state of the document before the 
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.Changes">
            <summary>
            Returns a read-only list containing all 
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            that triggered this event.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChange"/>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.Source">
            <summary>
            Identifies the source of the change (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.ServiceEventArgs">
            <summary>
            Provides contextual information for the <see cref="E:Infragistics.Documents.Parsing.ServicesManager.ServiceAdded"/> and <see cref="E:Infragistics.Documents.Parsing.ServicesManager.ServiceRemoved"/> events.
            </summary>
            <seealso cref="E:Infragistics.Documents.Parsing.ServicesManager.ServiceAdded"/>
            <seealso cref="E:Infragistics.Documents.Parsing.ServicesManager.ServiceRemoved"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ServiceEventArgs.Service">
            <summary>
            Gets the service which was registered or unregistered.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ServiceEventArgs.ServiceKey">
            <summary>
            Gets The case-sensitively unique key with which the service was registered or null if the service was registered 
            with a Type.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.ServiceEventArgs.ServiceType">
            <summary>
            Gets the type with which the service was registered or null if the service was registered with a key.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.IIndentServiceProvider">
            <summary>
            The interface used by an object that provides the indenting service for lines in a document.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.IIndentServiceProvider.CalculateLineIndent(Infragistics.Documents.TextDocument,System.Int32)">
            <summary>
            Returns the number of columns to indent a line.
            </summary>
            <param name="document">The document being edited.</param>
            <param name="lineIndex">The zero-based line index of the line being indented</param>
            <returns>The number of columns to indent the line (i.e. the amount of whitespace before the first non-tab or space character).</returns>
            <remarks>
            <para class="note"><b>Note:</b> use the <see cref="M:Infragistics.Documents.TextDocumentSnapshot.LineFromIndex(System.Int32)">LineFromIndex</see> and/or <see cref="M:Infragistics.Documents.TextDocumentSnapshot.GetLines(System.Int32,System.Boolean)">GetLines</see> methods off the document's <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot">CurrentSnapshot</see> to analyze the line. Also, the document's <see cref="P:Infragistics.Documents.TextDocument.TabExtent">TabExtent</see> provides the number of characters that determine tab locations within a line.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.LineFromIndex(System.Int32)">LineFromIndex</seealso>
            <seealso cref="M:Infragistics.Documents.SnapshotLineInfo.GetIndent">SnapshotLineInfo.CalculateIndent"</seealso>
        </member>
        <member name="M:Infragistics.Documents.IIndentServiceProvider.IsSignificantForIndent(Infragistics.Documents.Parsing.Token)">
            <summary>
            Indicates whether the specified token is significant to the indenting logic.
            </summary>
            <param name="token">The token to check for significance.</param>
            <remarks>
            <para class="body">
            This will get called when edits are made to the last token on a line. If True is returned, it will cause <see cref="M:Infragistics.Documents.IIndentServiceProvider.CalculateLineIndent(Infragistics.Documents.TextDocument,System.Int32)"/>
            to be called. False will prevent the call and null will indicate that the default significance checking logic should be used.
            </para>
            </remarks>
            <returns>True if the token is significant to the indenting logic; False if the token is insignificant; Null to use the default logic.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.Token.IsSignificant"/>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SyntaxAnnotation">
            <summary>
            A class that represents an annotation for a node in the parse tree.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotations"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotations(System.Type)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotatedNodes(System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotatedNodes(System.Type,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxAnnotation.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Parsing.SyntaxAnnotation"/> instance.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SyntaxNode">
            <summary>
            A class that represents a node in the parse tree.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.Ancestors(System.Boolean)">
            <summary>
            Gets the collection of ancestor nodes leading up from the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <param name="ascendOutOfIgnoredContent">True to include ancestors which own the node if it is part of structured ignored content.</param>
            <returns>The collection of ancestor nodes leading up from the SyntaxNode.</returns>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.AncestorsAndSelf(System.Boolean)"/>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.IsIgnoredContent"/>
            <seealso cref="P:Infragistics.Documents.Parsing.IgnoredContent.IsStructured"/>
            <seealso cref="M:Infragistics.Documents.Parsing.IgnoredContent.GetStructuredNode"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.AncestorsAndSelf(System.Boolean)">
            <summary>
            Gets the collection of the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> and its ancestor nodes leading up from the node.
            </summary>
            <param name="ascendOutOfIgnoredContent">True to include ancestors which own the node if it is part of structured ignored content.</param>
            <returns>The collection of ancestor nodes leading up from the SyntaxNode.</returns>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.Ancestors(System.Boolean)"/>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.IsIgnoredContent"/>
            <seealso cref="P:Infragistics.Documents.Parsing.IgnoredContent.IsStructured"/>
            <seealso cref="M:Infragistics.Documents.Parsing.IgnoredContent.GetStructuredNode"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.Children(System.Boolean)">
            <summary>
            Gets the list of direct child nodes of the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <param name="reverse">True to get the child nodes in reverse order when enumerating the list.</param>
            <returns>The list of direct child nodes of the SyntaxNode.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.Children(Infragistics.Documents.Parsing.TextSpan,System.Boolean)">
            <summary>
            Gets the list of direct child nodes of the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <param name="span">
            An optional span to restrict the result. Only child nodes intersecting with the span will be included. 
            The span offset is relative to the beginning of the document.
            </param>
            <param name="reverse">True to get the child nodes in reverse order when enumerating the list.</param>
            <returns>The list of direct child nodes of the SyntaxNode.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.Descendants(System.Func{Infragistics.Documents.Parsing.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Gets the list of descendent nodes of the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <param name="descendIntoChildrenFilter">
            A filter for indicating whether the list should include any descendents of the specified node.
            </param>
            <param name="descendIntoIgnoredContent">
            Indicates whether to include the nodes from structured ignored content.
            </param>
            <returns>The list of descendent nodes of the SyntaxNode.</returns>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.Children(System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.Children(Infragistics.Documents.Parsing.TextSpan,System.Boolean)"/>
            <seealso cref="P:Infragistics.Documents.Parsing.IgnoredContent.IsStructured"/>
            <seealso cref="M:Infragistics.Documents.Parsing.IgnoredContent.GetStructuredNode"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.Descendants(Infragistics.Documents.Parsing.TextSpan,System.Func{Infragistics.Documents.Parsing.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Gets the list of descendent nodes of the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <param name="span">
            An optional span to restrict the result. Only descendant nodes intersecting with the span will be included. 
            The span offset is relative to the beginning of the document.
            </param>
            <param name="descendIntoChildrenFilter">
            A filter for indicating whether the list should include any descendents of the specified node.
            </param>
            <param name="descendIntoIgnoredContent">
            Indicates whether to include the nodes from structured ignored content.
            </param>
            <returns>The list of descendent nodes of the SyntaxNode.</returns>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.Children(System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.Children(Infragistics.Documents.Parsing.TextSpan,System.Boolean)"/>
            <seealso cref="P:Infragistics.Documents.Parsing.IgnoredContent.IsStructured"/>
            <seealso cref="M:Infragistics.Documents.Parsing.IgnoredContent.GetStructuredNode"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.DescendantsAndSelf(System.Func{Infragistics.Documents.Parsing.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Gets the list of the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> and its descendent nodes.
            </summary>
            <param name="descendIntoChildrenFilter">
            A filter for indicating whether the list should include any descendents of the specified node.
            </param>
            <param name="descendIntoIgnoredContent">
            Indicates whether to include the nodes from structured ignored content.
            </param>
            <returns>The list of the SyntaxNode and its descendents.</returns>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.Children(System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.Children(Infragistics.Documents.Parsing.TextSpan,System.Boolean)"/>
            <seealso cref="P:Infragistics.Documents.Parsing.IgnoredContent.IsStructured"/>
            <seealso cref="M:Infragistics.Documents.Parsing.IgnoredContent.GetStructuredNode"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.DescendantsAndSelf(Infragistics.Documents.Parsing.TextSpan,System.Func{Infragistics.Documents.Parsing.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Gets the list of the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> and its descendent nodes.
            </summary>
            <param name="span">
            An optional span to restrict the result. Only descendant nodes intersecting with the span will be included. 
            The span offset is relative to the beginning of the document.
            </param>
            <param name="descendIntoChildrenFilter">
            A filter for indicating whether the list should include any descendents of the specified node.
            </param>
            <param name="descendIntoIgnoredContent">
            Indicates whether to include the nodes from structured ignored content.
            </param>
            <returns>The list of the SyntaxNode and its descendents.</returns>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.Children(System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.Children(Infragistics.Documents.Parsing.TextSpan,System.Boolean)"/>
            <seealso cref="P:Infragistics.Documents.Parsing.IgnoredContent.IsStructured"/>
            <seealso cref="M:Infragistics.Documents.Parsing.IgnoredContent.GetStructuredNode"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotatedNodes(System.Nullable{Infragistics.Documents.Parsing.TextSpan})">
            <summary>
            Returns an enumerator for all nodes within the sub-tree rooted at this node with annotations.
            </summary>
            <param name="span">An optional span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <returns>An enumerator for all nodes within the sub-tree rooted at this node with annotations.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.ContainsDiagnostics"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotatedNodes(System.Type,System.Nullable{Infragistics.Documents.Parsing.TextSpan})">
            <summary>
            Returns an enumerator for all nodes within the sub-tree rooted at this node with annotations.
            </summary>
            <param name="annotationType">The type of annotations to find. All returned nodes will have one or more annotation of type or derived from type.</param>
            <param name="span">An optional span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="annotationType"/> is null.
            </exception>
            <returns>An enumerator for all nodes within the sub-tree rooted at this node with annotations.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.ContainsDiagnostics"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotations">
            <summary>
            Returns an enumerator for all annotation values of the node.
            </summary>
            <returns>An enumerator for all annotation values of the node.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.ContainsDiagnostics"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotations(System.Type)">
            <summary>
            Returns an enumerator for all annotation values of a specific type of the node.
            </summary>
            <param name="annotationType">The type of annotations to get. All returned instances will be of type or derived from type.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="annotationType"/> is null.
            </exception>
            <returns>An enumerator for all annotation values of a specific type of the node.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.ContainsDiagnostics"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetChild(System.Int32)">
            <summary>
            Returns the child node at a specific index.
            </summary>
            <param name="childIndex">The 0-based index of the child.</param>
            <returns>The child node.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="childIndex"/> is less than 0 or greater than or equal to the <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.ChildCount"/>.
            </exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetDiagnostics(System.Nullable{Infragistics.Documents.Parsing.TextSpan})">
            <summary>
            Returns an enumerator for all descendant <see cref="T:Infragistics.Documents.Parsing.NodeDiagnostic"/> values of the node.
            </summary>
            <param name="span">An optional span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <returns>An enumerator for all descendant NodeDiagnostic values of the node.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.ContainsDiagnostics"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddDiagnostic(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.Diagnostic)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetFirstTokenNode">
            <summary>
            Returns the first node in this node's sub-tree which represents a <see cref="T:Infragistics.Documents.Parsing.Token"/>.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if this node is a token node then this method will return itself.</para>
            </remarks>
            <returns>The first node in this node's sub-tree that is a token node.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.IsTokenNode"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetToken"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetLastTokenNode">
            <summary>
            Returns the last node in this node's sub-tree which represents a <see cref="T:Infragistics.Documents.Parsing.Token"/>.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if this node is a token node then this method will return itself.</para>
            </remarks>
            <returns>The last node in this node's sub-tree that is a token node.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetLeadingIgnoredContent">
            <summary>
            Returns the list of all leading ignored content before this node.
            </summary>
            <remarks>
            <p class="body">
            If <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.HasLeadingIgnoredContent"/> is False, GetLeadingIgnoredContent will return <see cref="F:Infragistics.Documents.Parsing.IgnoredContentList.Empty"/>.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.HasLeadingIgnoredContent"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetText(System.Boolean)">
            <summary>
            Gets the text of this node and all of its descendants.
            </summary>
            <param name="includeLeadingIgnoredContent">
            If true will include the leading ignored content of the first descendant <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </param>
            <returns>
            The reconstructed string contains all of the descendant <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>s concatenated.
            </returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxNode.GetToken">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.Token"/> associated with the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> if the node represents a token.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the node does not represent a token.
            </exception>
            <returns>The <see cref="T:Infragistics.Documents.Parsing.Token"/> associated with the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.</returns>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.IsTokenNode"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.ChildCount">
            <summary>
            Returns the count of child nodes (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.ContainsDiagnostics">
            <summary>
            Gets the value indicating whether <see cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetDiagnostics(System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/> will return any <see cref="T:Infragistics.Documents.Parsing.NodeDiagnostic"/> values representing 
            diagnostic information within the sub-tree rooted at the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetDiagnostics(System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.FullSnapshotSpan">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.SnapshotSpan"/> occupied by the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <remarks>
            <p class="body">
            The snapshot associated with the span will be null if the <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.SyntaxTree"/> is null because the node does not exist in a tree 
            and therefore is not associated with a <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </p>
            </remarks>
            <value>
            A SnapshotSpan that represents the node including all leading ignored content (see <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.LeadingIgnoredContentLength"/>).
            </value>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.LeadingIgnoredContentLength"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.FullSpan">
            <summary>
            Gets the full <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> occupied by the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <value>
            A TextSpan that represents the node including all leading ignored content (see <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.LeadingIgnoredContentLength"/>).
            </value>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.LeadingIgnoredContentLength"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.HasAnnotations">
            <summary>
            Gets the value indicating whether the node has associated annotations.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotations"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotations(System.Type)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotatedNodes(System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetAnnotatedNodes(System.Type,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.HasLeadingIgnoredContent">
            <summary>
            Gets the value indicating whether this node has ignored content before it.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetLeadingIgnoredContent"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.Index">
            <summary>
            Returns the zero-based index of this node in its <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.Parent"/>'s children (read-only).
            </summary>
            <value>-1 for the root node, otherwise the zero-based index of this node in its parent's children.</value>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.IsIgnoredContent">
            <summary>
            Gets the value indicating whether the node represents structured ignored content.
            </summary>
            <seealso cref="T:Infragistics.Documents.Parsing.IgnoredContent"/>
            <seealso cref="T:Infragistics.Documents.Parsing.IgnoredContentList"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetLeadingIgnoredContent"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.IsMissing">
            <summary>
            Gets the value indicating whether the node is a missing from the text and was inserted while parsing.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.IsSkipped">
            <summary>
            Gets the value indicating whether the node was skipped while parsing because it was not expected in its context.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.IsTokenNode">
            <summary>
            Gets the value indicating whether the node represents a <see cref="T:Infragistics.Documents.Parsing.Token"/> from the document.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxNode.GetToken"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.Language">
            <summary>
            Returns the associated Language (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.LeadingIgnoredContentLength">
            <summary>
            Gets the number of ignored characters before the node.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> LeadingIgnoredContentLength is included in <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.Length"/>
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.Length">
            <summary>
            Returns the aggregate string length (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.OverallOffset">
            <summary>
            Returns the overall offset of the node within the entire tree (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.Parent">
            <summary>
            Returns the parent node (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.RelativeOffset">
            <summary>
            Returns the relatve offset of the node within its parent node (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.SnapshotSpan">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.SnapshotSpan"/> occupied by the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <remarks>
            <p class="body">
            The snapshot associated with the span will be null if the <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.SyntaxTree"/> is null because the node does not exist in a tree 
            and therefore is not associated with a <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </p>
            </remarks>
            <value>
            A SnapshotSpan that represents the node excluding any leading ignored content (see <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.LeadingIgnoredContentLength"/>).
            </value>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.LeadingIgnoredContentLength"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.Span">
            <summary>
            Gets the <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> occupied by the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>.
            </summary>
            <value>
            A TextSpan that represents the node excluding any leading ignored content (see <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.LeadingIgnoredContentLength"/>).
            </value>
            <seealso cref="P:Infragistics.Documents.Parsing.SyntaxNode.LeadingIgnoredContentLength"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.Symbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.Documents.Parsing.Symbol">Symbol</see>
            which produced this token.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxNode.SyntaxTree">
            <summary>
            Gets the <see cref="P:Infragistics.Documents.Parsing.SyntaxNode.SyntaxTree"/> in which the <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> or null if it does not exist in a SyntaxTree.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.TextLocation">
            <summary>
            Structure containing zero-based line and character offsets that uniquely idenity a character location.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.Parsing.TextLocation"/>
            </summary>
            <param name="line">The zero-based line offset within the document.</param>
            <param name="character">The zero-based character offset within the line.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If line or character is less than 0.</exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextLocation.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextLocation.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextLocation.op_Equality(Infragistics.Documents.Parsing.TextLocation,Infragistics.Documents.Parsing.TextLocation)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Parsing.TextLocation"/> structures for equality
            </summary>
            <param name="location1">The first structure</param>
            <param name="location2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextLocation.op_Inequality(Infragistics.Documents.Parsing.TextLocation,Infragistics.Documents.Parsing.TextLocation)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Parsing.TextLocation"/> structures for inequality
            </summary>
            <param name="location1">The first structure</param>
            <param name="location2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextLocation.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextLocation.Equals(Infragistics.Documents.Parsing.TextLocation)">
            <summary>
            Determines if a structure is equatable to this one.
            </summary>
            <param name="other">The other structure</param>
            <returns>Returns true if the structures are equatable, otherwise false</returns>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TextLocation.Character">
            <summary>
            Returns the zero-based character number in the line (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TextLocation.Line">
            <summary>
            Returns the zero-based line number (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.TextSpan">
            <summary>
            Structure containing an offset and length that identify a run of text within a document
            </summary>
        </member>
        <member name="F:Infragistics.Documents.Parsing.TextSpan.All">
            <summary>
            Returns a span that represents all the text.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.Parsing.TextSpan"/>
            </summary>
            <param name="offset">The zero-based offset into the document</param>
            <param name="length">The number of characters in the span (can be zero or negative)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than 0 or the offset + length is less than 0.</exception>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.Equals(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Determines if a structure is equatable to this one.
            </summary>
            <param name="other">The other structure</param>
            <returns>Returns true if the structures are equatable, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.op_GreaterThan(Infragistics.Documents.Parsing.TextSpan,Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is greater than other</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.op_LessThan(Infragistics.Documents.Parsing.TextSpan,Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is less than other</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.op_Equality(Infragistics.Documents.Parsing.TextSpan,Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> structures for equality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.op_Inequality(Infragistics.Documents.Parsing.TextSpan,Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Parsing.TextSpan"/> structures for inequality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.Contains(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Determines if a span is completely contained within this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true is the span is completely contained within this span, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.Contains(System.Int32)">
            <summary>
            Determines if a offset is contained within this span.
            </summary>
            <param name="offset">The offset to test.</param>
            <returns>true is the offset is contained within this span, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.Intersection(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Returns a span that contains just the intersect between this span and another.
            </summary>
            <param name="span">The span to intersect.</param>
            <returns>A new TextSpan with the intersect or null if the spans don't intersect.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.IntersectsWith(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Indicates whether the span intersects with the specified span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>True if the spans intersect; otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.Overlap(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Returns a span that contains just the overlap between this span and another.
            </summary>
            <param name="span">The span to overlap.</param>
            <returns>A new TextSpan with the overlap or null if the spans don't overlap.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TextSpan.OverlapsWith(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Indicates whether the span overlaps with the specified span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>True if the spans overlap; otherwise False.</returns>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TextSpan.End">
            <summary>
            Returns the normalized end offset (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TextSpan.Length">
            <summary>
            Returns the length of the text span (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if the length is negative that means the <see cref="P:Infragistics.Documents.Parsing.TextSpan.Start"/> of the span is before the <see cref="P:Infragistics.Documents.Parsing.TextSpan.Offset"/></para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TextSpan.Offset">
            <summary>
            Returns the zero-based offset from the beginning of the document (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TextSpan.Start">
            <summary>
            Returns the normalized start offset (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.Token">
            <summary>
            Encapsulates the properties of a token produced during lexical analysis.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Token.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Token.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Token.op_Equality(Infragistics.Documents.Parsing.Token,Infragistics.Documents.Parsing.Token)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Parsing.Token"/> structures for equality
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Token.op_Inequality(Infragistics.Documents.Parsing.Token,Infragistics.Documents.Parsing.Token)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Parsing.Token"/> structures for inequality
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Token.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Token.GetFullToken">
            <summary>
            If the <see cref="T:Infragistics.Documents.Parsing.Token"/> has its <see cref="P:Infragistics.Documents.Parsing.Token.IsPartial"/> value set to True, gets the full multiline token. 
            Otherwise, returns the Token.
            </summary>
            <seealso cref="P:Infragistics.Documents.Parsing.Token.IsPartial"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.Token.Equals(Infragistics.Documents.Parsing.Token)">
            <summary>
            Determines if a structure is equatable to this one.
            </summary>
            <param name="other">The other structure</param>
            <returns>Returns true if the structures are equatable, otherwise false</returns>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Token.IsPartial">
            <summary>
            Gets the value indicating whether the <see cref="T:Infragistics.Documents.Parsing.Token"/> is a portion of a multi-line token on one line.
            </summary>
            <seealso cref="M:Infragistics.Documents.Parsing.Token.GetFullToken"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Token.Language">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Parsing.LanguageBase">Language</see> that was used to produce this token (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Token.Length">
            <summary>
            Returns the length of the string which this token represents.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Token.OverallOffset">
            <summary>
            Returns the overall character offset from the beginning of the document to the start of this token (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Token.Span">
            <summary>
            Retirnms the span of the token within the document (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Token.Text">
            <summary>
            Returns the text which this token represents.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.Token.TerminalSymbol">
            <summary>
            Returns the 
            <see cref="T:Infragistics.Documents.Parsing.TerminalSymbol">TerminalSymbol</see>
            which produced this token.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TokenWord.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TokenWord.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TokenWord.op_Equality(Infragistics.Documents.Parsing.TokenWord,Infragistics.Documents.Parsing.TokenWord)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Parsing.TokenWord"/> structures for equality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TokenWord.op_Inequality(Infragistics.Documents.Parsing.TokenWord,Infragistics.Documents.Parsing.TokenWord)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Parsing.TokenWord"/> structures for inequality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TokenWord.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TokenWord.RelativeOffset">
            <summary>
            Returns the zero-based offset for this substring, as relative
            to the first character of the token which contains it.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TokenWord.Length">
            <summary>
            Returns the length of the substring.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.TokenWord.Text">
            <summary>
            Returns the text.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TokenLineBufferInternal.GetText(System.Int32,System.Int32)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="start">The zero-based position of the first character in the string to be returned.</param>
            <param name="length">The length of the string to be returned.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.TokenLineBufferInternal.TokenFromOffset(System.Int32,System.Boolean)">
            <summary>
            Returns the corresponding <see cref="T:Infragistics.Documents.Parsing.Token"/> from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this token.</param>
            <param name="splitMultilineTokensByLine">Indicates whether multiline tokens should be split so the token returned only consist of the portion on the line at the specified index.</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.Parsing.Token"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length.</exception>
        </member>
        <member name="T:Infragistics.Documents.SnapshotLineInfo">
            <summary>
            An object that represents a line within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.op_Equality(Infragistics.Documents.SnapshotLineInfo,Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> structures for equality
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.op_Inequality(Infragistics.Documents.SnapshotLineInfo,Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> structures for inequality
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Infragistics.Documents.SnapshotLineInfo"/></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.Contains(Infragistics.Documents.Parsing.Token)">
            <summary>
            Returns true if the <see cref="T:Infragistics.Documents.Parsing.Token">token</see> is contained in this line.
            </summary>
            <param name="token">The token to test.</param>
            <returns>true if the line contains the token, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetCharacter(System.Int32)">
            <summary>
            Returns the character at a specific offset in the line.
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <returns>The character in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.SnapshotLineInfo.Length"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetIndent">
            <summary>
            Returns the line indent.
            </summary>
            <returns>The number of columns that the line is indented by (i.e. the amount of whitespace before the first non-tab or space character).</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetText(System.Boolean)">
            <summary>
            Returns the concatenated text from all the <see cref="T:Infragistics.Documents.Parsing.Token">Token</see>s that make up the line
            </summary>
            <param name="includeNewLine">If true the returned string will include any carriage return/line feed characters at the end of the line.</param>
            <returns>A string representing the complete text of the line.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetTokenAtIndex(System.Int32,System.Boolean)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Parsing.Token">token</see> at a specific index.
            </summary>
            <param name="tokenIndex">The zero-based index of the token.</param>
            <param name="splitMultilineTokensByLine">Indicates whether multiline tokens should be split so the the token returned does not span multiple line.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If tokenIndex is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.SnapshotLineInfo.TokenCount"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetTokenAtOffset(System.Int32,System.Boolean)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Parsing.Token">token</see> that contains a specific character.
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <param name="splitMultilineTokensByLine">Indicates whether multiline tokens should be split so the the token returned does not span multiple line.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.SnapshotLineInfo.Length"/>.</exception> 
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.IndexOf(Infragistics.Documents.Parsing.Token)">
            <summary>
            Returns the zero-based index of a <see cref="T:Infragistics.Documents.Parsing.Token">token</see>.
            </summary>
            <param name="token">The token to test.</param>
            <returns>The zero-based index or -1 if the token is not in the line.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.IsSameAs(Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Returns true if the specified <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> represents the same line content.
            </summary>
            <param name="snapshotLineInfo">The <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> to check.</param>
            <returns>True if the specified <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> represents the same line content, otherwise false.</returns>
            <remarks>
            <para class="note"><b>Note:</b> this method will return true if the line content is the same even though the <see cref="P:Infragistics.Documents.SnapshotLineInfo.Snapshot"/> may be different.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.Equals(Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Determines if a structure is equatable to this one.
            </summary>
            <param name="other">The other structure</param>
            <returns>Returns true if the structures are equatable, otherwise false</returns>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.Length">
            <summary>
            Returns the length of all the text in the line including carriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.LineIndex">
            <summary>
            Returns the zero-based index of the line (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.LineNumber">
            <summary>
            Returns the 1-based line number (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this is one more than the <see cref="P:Infragistics.Documents.SnapshotLineInfo.LineIndex"/> value.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.OverallOffset">
            <summary>
            Returns the zero-based offset of this line from the beginning of the document (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.Snapshot">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.TextLength">
            <summary>
            Returns the length of all the text in the line excluding carriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.TokenCount">
            <summary>
            Returns the total number of <see cref="T:Infragistics.Documents.Parsing.Token">tokens</see> in the line including the line terminator token (read-only).
            </summary>
            <remarks>
            <p class="body">
            If the line contains a portion of the multiline token, the <see cref="P:Infragistics.Documents.SnapshotLineInfo.TokenCount"/> will also include that token.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Documents.SnapshotPoint">
            <summary>
            Represents a point (i.e. offset) within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> to translate a point between 2 related <see cref="T:Infragistics.Documents.TextDocumentSnapshot">Snapshot</see>s use the <see cref="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)"/> method.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.#ctor(Infragistics.Documents.TextDocumentSnapshot,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.SnapshotPoint"/>
            </summary>
            <param name="snapshot">The associated TextDocumentSnapshot</param>
            <param name="position">The position within the snapshot</param>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Implicit(Infragistics.Documents.SnapshotPoint)~System.Int32">
            <summary>
            Implicitly converts the SnapshotPoint to an int representing its position.
            </summary>
            <param name="point">The point</param>
            <returns>The point's position</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Addition(Infragistics.Documents.SnapshotPoint,System.Int32)">
            <summary>
            Adds an offset to a position.
            </summary>
            <param name="point">The starting point</param>
            <param name="offset">The amount to increment</param>
            <returns>A new SnapshotPoint with the resulting position</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Subtraction(Infragistics.Documents.SnapshotPoint,System.Int32)">
            <summary>
            Subtracts an offset from a position.
            </summary>
            <param name="point">The starting point</param>
            <param name="offset">The amount to decrement</param>
            <returns>A new SnapshotPoint with the resulting position</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Subtraction(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Computes the difference (delta) between two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures.
            </summary>
            <param name="point">The first structure</param>
            <param name="other">The other structure</param>
            <returns>The difference between the 2 points.</returns>
            <exception cref="T:System.ArgumentException">If the snapshots don't match.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_GreaterThan(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures 
            </summary>
            <param name="point">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the point is greater than other</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_LessThan(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures 
            </summary>
            <param name="point">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the point is less than other</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Equality(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures for equality
            </summary>
            <param name="point1">The first structure</param>
            <param name="point2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Inequality(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures for inequality
            </summary>
            <param name="point1">The first structure</param>
            <param name="point2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Add(System.Int32)">
            <summary>
            Returns a new SnapshotPoint with its position incremented by an offset.
            </summary>
            <param name="offset">The amount to add to the position</param>
            <returns>A new SnapshotPoint with its position incremented by the offset.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Difference(Infragistics.Documents.SnapshotPoint)">
            <summary>
            Returns the position difference between this point and another.
            </summary>
            <param name="other">The other point</param>
            <returns>the difference between the 2 points.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.FromTextLocation(Infragistics.Documents.Parsing.TextLocation,Infragistics.Documents.TextDocumentSnapshot)">
            <summary>
            Returns a <see cref="T:Infragistics.Documents.SnapshotPoint"/> that represents the specified <see cref="T:Infragistics.Documents.Parsing.TextLocation"/> in the specified <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            </summary>
            <param name="textLocation">The <see cref="T:Infragistics.Documents.Parsing.TextLocation"/>.</param>
            <param name="associatedSnapshot">The <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> associated with the specified textLocation</param>
            <returns>A <see cref="T:Infragistics.Documents.SnapshotPoint"/> that represents the specified <see cref="T:Infragistics.Documents.Parsing.TextLocation"/> in the specified <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetChar">
            <summary>
            Returns the character at this position
            </summary>
            <returns>The char</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetContainingLine">
            <summary>
            Returns the line containing this point
            </summary>
            <returns>The line containing the point.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetTextLocation">
            <summary>
            Returns a <see cref="T:Infragistics.Documents.Parsing.TextLocation"/> that corresponds to the SnapshotPoint's <see cref="P:Infragistics.Documents.SnapshotPoint.Position"/> within the current <see cref="P:Infragistics.Documents.SnapshotPoint.Snapshot"/>.
            </summary>
            <returns>A <see cref="T:Infragistics.Documents.Parsing.TextLocation"/> that corresponds to the SnapshotPoint's <see cref="P:Infragistics.Documents.SnapshotPoint.Position"/> within the current <see cref="P:Infragistics.Documents.SnapshotPoint.Snapshot"/>.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Subtract(System.Int32)">
            <summary>
            Returns a new SnapshotPoint with its position decremented by an offset.
            </summary>
            <param name="offset">The amount to subtract from the position</param>
            <returns>A new SnapshotPoint with its position decremented by the offset.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)">
            <summary>
            Translates the point from one snapshot to another.
            </summary>
            <param name="target">The target snapshot.</param>
            <param name="mode">The tracking mode to use.</param>
            <returns>A new <see cref="T:Infragistics.Documents.SnapshotPoint"/> with the adjusted position for the target snapshot.</returns>
            <exception cref="T:System.ArgumentNullException">If the target snapshot is null and the current snapshot is not null.</exception>
            <exception cref="T:System.ArgumentException">If the target snapshot is not either a predecessor or successor of this snapshot (i.e. they weren't created from the same root document).</exception>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.IsCompatibleWith(Infragistics.Documents.TextDocumentSnapshot)">TextDocumentSnapshot.IsCompatibleWith</seealso>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Equals(Infragistics.Documents.SnapshotPoint)">
            <summary>
            Determines if a structure is equatable to this one.
            </summary>
            <param name="other">The other structure</param>
            <returns>Returns true if the structures are equatable, otherwise false</returns>
        </member>
        <member name="P:Infragistics.Documents.SnapshotPoint.Position">
            <summary>
            Returns the normalized zero-based end offset from the beginning of the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotPoint.Snapshot">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.SnapshotSpan">
            <summary>
            Represents the span of text within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> based on an offset and length
            </summary>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.#ctor(Infragistics.Documents.TextDocumentSnapshot,System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.SnapshotSpan"/>
            </summary>
            <param name="snapshot">The associated TextDocumentSnapshot</param>
            <param name="offset">The zero-based offset into the document</param>
            <param name="length">The number of characters in the span (can be zero or negative)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than 0 or the offset + length is less than 0.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.#ctor(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.SnapshotSpan"/>
            </summary>
            <param name="snapshot">The associated TextDocumentSnapshot</param>
            <param name="span">The span in the snapshot</param>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Equals(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Determines if a structure is equatable to this one.
            </summary>
            <param name="other">The other structure</param>
            <returns>Returns true if the structures are equatable, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.op_Implicit(Infragistics.Documents.SnapshotSpan)~Infragistics.Documents.Parsing.TextSpan">
            <summary>
            Implicitly converts the SnapshotSpan to a TextSpan.
            </summary>
            <param name="span">The SnapshotSpan</param>
            <returns>The TextSpan</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.op_Equality(Infragistics.Documents.SnapshotSpan,Infragistics.Documents.SnapshotSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotSpan"/> structures for equality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.op_Inequality(Infragistics.Documents.SnapshotSpan,Infragistics.Documents.SnapshotSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotSpan"/> structures for inequality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.GetText">
            <summary>
            Returns the associated text.
            </summary>
            <returns>The associated text.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Intersection(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns a span that contains just the intersect between this span and another.
            </summary>
            <param name="span">The span to intersect.</param>
            <returns>A new SnapshotSpan with the intersect or null if the spans don't intersect.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Intersection(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Returns a span that contains just the intersect between this span and another.
            </summary>
            <param name="span">The span to intersect.</param>
            <returns>A new SnapshotSpan with the intersect or null if the spans don't intersect.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.IntersectsWith(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Indicates whether the span intersects with the specified span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>True if the spans intersect; otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.IntersectsWith(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Indicates whether the span intersects with the specified span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>True if the spans intersect; otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Overlap(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns a span that contains just the overlap between this span and another.
            </summary>
            <param name="span">The span to overlap.</param>
            <returns>A new SnapshotSpan with the overlap or null if the spans don't overlap.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Overlap(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Returns a span that contains just the overlap between this span and another.
            </summary>
            <param name="span">The span to overlap.</param>
            <returns>A new SnapshotSpan with the overlap or null if the spans don't overlap.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.OverlapsWith(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Indicates whether the span overlaps with the specified span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>True if the spans overlap; otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.OverlapsWith(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Indicates whether the span overlaps with the specified span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>True if the spans overlap; otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.SpanTrackingMode)">
            <summary>
            Translates the span from one snapshot to another
            </summary>
            <param name="target">The target snapshot</param>
            <param name="mode">The tracking mode to use.</param>
            <returns>A new <see cref="T:Infragistics.Documents.SnapshotSpan"/> with the adjusted values for the target snapshot.</returns>
            <exception cref="T:System.ArgumentNullException">If the target snapshot is null.</exception>
            <exception cref="T:System.ArgumentException">If the target snapshot is not either a predecessor or successor of this snapshot (i.e. they weren't created from the same root document).</exception>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.IsCompatibleWith(Infragistics.Documents.TextDocumentSnapshot)">TextDocumentSnapshot.IsCompatibleWith</seealso>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.End">
            <summary>
            Returns the end point from the beginning of the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.EndLocation">
            <summary>
            Returns the end point within the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.IsEmpty">
            <summary>
            Returns true if the length of the span is 0 (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Length">
            <summary>
            Returns the length of the text span (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if the length is negative that means the <see cref="P:Infragistics.Documents.SnapshotSpan.Start"/> of the span is before the <see cref="P:Infragistics.Documents.SnapshotSpan.Offset"/></para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Offset">
            <summary>
            Returns the zero-based offset from the beginning of the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Start">
            <summary>
            Returns the start point within the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.StartLocation">
            <summary>
            Returns the normalized start location within the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Snapshot">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.TextSpan">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.SnapshotSpan.TextSpan"/> structure (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Word">
            <summary>
            Represents the word of text within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Word.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.op_Equality(Infragistics.Documents.Word,Infragistics.Documents.Word)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Word"/> structures for equality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.op_Inequality(Infragistics.Documents.Word,Infragistics.Documents.Word)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Word"/> structures for inequality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The text of the <see cref="T:Infragistics.Documents.Word"/></returns>
        </member>
        <member name="M:Infragistics.Documents.Word.Equals(Infragistics.Documents.Word)">
            <summary>
            Determines if a structure is equatable to this one.
            </summary>
            <param name="other">The other structure</param>
            <returns>Returns true if the structures are equatable, otherwise false</returns>
        </member>
        <member name="P:Infragistics.Documents.Word.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan">span</see> of the text (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Word.Text">
            <summary>
            Returns the text of the word (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Parsing.SyntaxTree">
            <summary>
            Represents the parsed syntax tree for a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxTree.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)">
            <summary>
            Gets a modified tree with an annotation attached to the specified node.
            </summary>
            <remarks>
            <p class="body">
            If a syntax tree has diagnostics or annotations attached to a node within it, the resulting syntax tree is an equivalent syntax tree. It represents the same
            structure, but has additional information associated. An annotation can be attached to any node in the current tree or any tree which is equivalent to the
            current tree. For example, if two nodes need to be annotated, the calls can be chained:
            <code>
            var newTree = originalTree.AddAnnotation(node1, annotation1).AddAnnotation(node2, annotation2);
            </code>
            The two nodes were obtained from the original tree, but node2 is annotated on the modified tree which is returned from the first call to AddAnnotation. In
            this case, the logically equivalent node in the modified tree is annotated with annotation2 and a newly modified tree is returned and stored in newTree.
            </p>
            <p class="body">
            Trees can be tested for equivalence by seeing if their <see cref="P:Infragistics.Documents.Parsing.SyntaxTree.Snapshot"/> values are the same.
            </p>
            </remarks>
            <param name="node">The node to which the annotation should be attached.</param>
            <param name="annotation">The annotation to add to the node.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="node"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="annotation"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> of <paramref name="node"/> does not match the <see cref="P:Infragistics.Documents.Parsing.SyntaxTree.Snapshot"/> of the <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/>.
            </exception>
            <returns>The new <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/> containing the annotation.</returns>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.GetEquivalentNode(Infragistics.Documents.Parsing.SyntaxNode)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxTree.AddDiagnostic(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.Diagnostic)">
            <summary>
            Gets a modified tree with diagnostic information attached to the specified node.
            </summary>
            <remarks>
            <p class="body">
            If a syntax tree has diagnostics or annotations attached to a node within it, the resulting syntax tree is an equivalent syntax tree. It represents the same
            structure, but has additional information associated. Diagnostics can be attached to any node in the current tree or any tree which is equivalent to the
            current tree. For example, if two nodes need to have errors associated, the calls can be chained:
            <code>
            var newTree = originalTree.AddDiagnostic(node1, diagnostic1).AddDiagnostic(node2, diagnostic2);
            </code>
            The two nodes were obtained from the original tree, but node2 is annotated on the modified tree which is returned from the first call to AddDiagnostic. In
            this case, the logically equivalent node in the modified tree is associated with diagnostic2 and a newly modified tree is returned and stored in newTree.
            </p>
            <p class="body">
            Trees can be tested for equivalence by seeing if their <see cref="P:Infragistics.Documents.Parsing.SyntaxTree.Snapshot"/> values are the same.
            </p>
            </remarks>
            <param name="node">The node to which the diagnostic information should be attached.</param>
            <param name="diagnostic">The diagnostic information which should be attached.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="node"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="diagnostic"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> of <paramref name="node"/> does not match the <see cref="P:Infragistics.Documents.Parsing.SyntaxTree.Snapshot"/> of the <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/>.
            </exception>
            <returns>The new <see cref="T:Infragistics.Documents.Parsing.SyntaxTree"/> containing the diagnostic information.</returns>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.GetEquivalentNode(Infragistics.Documents.Parsing.SyntaxNode)"/>
        </member>
        <member name="M:Infragistics.Documents.Parsing.SyntaxTree.GetEquivalentNode(Infragistics.Documents.Parsing.SyntaxNode)">
            <summary>
            For a node specified from an equivalent tree, returns a <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> in this tree which represents the same content; otherwise null.
            </summary>
            <remarks>
            <p class="body">
            Callers of the <see cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)"/> or <see cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddDiagnostic(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.Diagnostic)"/> methods will get returned a reference to an equivalent tree. This tree
            represents the same textual content as the original with extra data decorating a node in the equivalent tree. GetEquivalentNode will take a node
            from one tree and return the node representing the same textual content on an equivalent tree.
            </p>
            <p class="body">
            If the node specified is from a tree which is not equivalent, GetEquivalentNode will return null.
            </p>
            <p class="body">
            Trees can be tested for equivalence by seeing if their <see cref="P:Infragistics.Documents.Parsing.SyntaxTree.Snapshot"/> values are the same.
            </p>
            </remarks>
            <param name="node">The SyntaxNode for which to find the equivalent node.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="node"/> is null.
            </exception>
            <returns>
            If a node is specified from an equivalent tree, returns a <see cref="T:Infragistics.Documents.Parsing.SyntaxNode"/> in this tree which represents the same content; otherwise null.
            </returns>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddAnnotation(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.SyntaxAnnotation)"/>
            <seealso cref="M:Infragistics.Documents.Parsing.SyntaxTree.AddDiagnostic(Infragistics.Documents.Parsing.SyntaxNode,Infragistics.Documents.Parsing.Diagnostic)"/>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxTree.RootNode">
            <summary>
            Returns the root node of the tree (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Parsing.SyntaxTree.Snapshot">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> that was parsed (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ClassificationTag">
            <summary>
            Basic implementation of <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTaggerProvider"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.IClassificationTag">
            <summary>
            The interface definition for all objects that represent a classification tag.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITag">
            <summary>
            The base interface for all tag types.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.IClassificationTag.ClassificationType">
            <summary>
            The <see cref="T:Infragistics.Documents.ClassificationType"/> associated with this tag.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.IClassificationTag.ClassificationTypeKey">
            <summary>
            The key of the <see cref="T:Infragistics.Documents.ClassificationType"/> which should be associated with this tag.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTag.#ctor(Infragistics.Documents.ClassificationType)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Tagging.ClassificationTag"/> instance.
            </summary>
            <param name="classificationType">The <see cref="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ClassificationTag"/></param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTag.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Tagging.ClassificationTag"/> instance.
            </summary>
            <param name="classificationTypeKey">
            The key of the <see cref="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType"/> which should be associated with this tag.
            </param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.ClassificationType"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ClassificationTag"/> (read only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationTypeKey">
            <summary>
            Returns the key of the <see cref="T:Infragistics.Documents.ClassificationType"/> which should be associated with this tag (read only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ClassificationTagger">
            <summary>
            An <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> implementation that tags document text with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.TaggerBase`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.ClassificationType"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TaggerBase`1">
            <summary>
            An abstract base class for taggers (i.e., objects that implement <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/>)
            </summary>
            <typeparam name="T">The <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type that the tagger should create</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITagger`1">
            <summary>
            The interface definition for all objects that provide <see cref="T:Infragistics.Documents.Tagging.ITag"/>s from text.
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/>s to provide.</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ITagger`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the tags that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans over which the tagger looks for overlapping or contained tags</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all tags that are contained by or overlap the spans.</returns>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TaggerBase`1.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">The <see cref="T:Infragistics.Documents.TextDocument"/> containing the text to be tagged.</param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TaggerBase`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.ITag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived tags.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TaggerBase`1.Document">
            <summary>
            Returns the document associated with this <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> (read only)
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTagger.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTagger.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ClassificationTaggerProvider">
            <summary>
            Provides a Classification tagger.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITaggerProvider"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITaggerProvider">
            <summary>
            The interface definition for objects create Taggers.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ITaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with tags of type T.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with tags of type T.</returns>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.</returns>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ClassificationTaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.DiagnosticTag">
            <summary>
            Basic implementation of <see cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Tagging.DiagnosticTag.Diagnostic"/>
            <seealso cref="P:Infragistics.Documents.Tagging.DiagnosticTag.Diagnostic"/>
            <seealso cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.DiagnosticTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.DiagnosticTaggerProvider"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.IDiagnosticTag">
            <summary>
            The interface for all tags that represent diagnostics generated by the <see cref="T:Infragistics.Documents.TextDocument"/> parser.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.IDiagnosticTag.Diagnostic">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Parsing.NodeDiagnostic"/> associated with this <see cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DiagnosticTag.#ctor(Infragistics.Documents.Parsing.NodeDiagnostic)">
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Tagging.DiagnosticTag"/> instance.
            </summary>
            <param name="diagnostic">The <see cref="P:Infragistics.Documents.Tagging.DiagnosticTag.Diagnostic"/> associated with this <see cref="T:Infragistics.Documents.Tagging.DiagnosticTag"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.DiagnosticTag.Diagnostic">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.DiagnosticTag.Diagnostic"/> associated with this <see cref="T:Infragistics.Documents.Tagging.DiagnosticTag"/> (read only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.DiagnosticTagger">
            <summary>
            An <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> implementation that tags document text with <see cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>s.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.TaggerBase`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>
            <seealso cref="T:Infragistics.Documents.Tagging.DiagnosticTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DiagnosticTagger.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DiagnosticTagger.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>s.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.DiagnosticTaggerProvider">
            <summary>
            Provides a <see cref="T:Infragistics.Documents.Parsing.NodeDiagnostic"/> tagger.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITaggerProvider"/>
            <seealso cref="T:Infragistics.Documents.Parsing.SyntaxNode"/>
            <seealso cref="T:Infragistics.Documents.Tagging.DiagnosticTagger"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DiagnosticTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DiagnosticTaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>s.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IDiagnosticTag"/>s.</returns>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="P:Infragistics.Documents.Tagging.DiagnosticTaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.DocumentTagAggregator`1">
            <summary>
            An implementation of ITagAggregator for use with <see cref="T:Infragistics.Documents.TextDocument"/>s.
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> to aggregate</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagAggregator`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITagAggregator`1">
            <summary>
            The interface definition for objects that process all providers which generate tags of a specific type that fall within a specified list of spans. 
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> to aggregate.</typeparam>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ITagAggregator`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all tags of type T from all providers that overlap or are contained by the specified snapshotSpans collection.
            </summary>
            <param name="spans">A collection of spans over which the aggregator looks for overlapping or contained tags from all providers.</param>
            <returns>ITagSpans for all tags from all providers that are contained by or overlap the spans.</returns>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DocumentTagAggregator`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all tags of type T from all providers that overlap or are contained by the specified snapshotSpans collection.
            </summary>
            <param name="spans">A collection of spans over which the aggregator looks for overlapping or contained tags from all providers.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all tags from all providers that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITagSpan`1">
            <summary>
            The interface definition for all objects that associate an <see cref="T:Infragistics.Documents.Tagging.ITag"/> with a <see cref="T:Infragistics.Documents.SnapshotSpan"/>
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> associated with the span.</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.SnapshotSpan"/>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITagSpan`1.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan"/> associated with the <see cref="T:Infragistics.Documents.Tagging.ITag"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITagSpan`1.Tag">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> contained in the associated <see cref="T:Infragistics.Documents.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITokenTag">
            <summary>
            The interface for all tags that represent tagged <see cref="P:Infragistics.Documents.Tagging.ITokenTag.Token"/>s.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITokenTag.Token">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.ITokenTag.Token"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TagSpan`1">
            <summary>
            Basic implementation of ITagSpan.
            </summary>
            <typeparam name="T">The <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type associated with the <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/></typeparam>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TagSpan`1.#ctor(Infragistics.Documents.SnapshotSpan,`0)">
            <summary>
            Constructor
            </summary>
            <param name="span">The <see cref="T:Infragistics.Documents.SnapshotSpan"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/></param>
            <param name="tag">The <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TagSpan`1.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TagSpan`1.Tag">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TokenTag">
            <summary>
            Basic implementation of <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Tagging.TokenTag.Token"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITokenTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TokenTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TokenTaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTag.#ctor(Infragistics.Documents.Parsing.Token)">
            <summary>
            Constructor
            </summary>
            <param name="token">The <see cref="P:Infragistics.Documents.Tagging.TokenTag.Token"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TokenTag"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TokenTag.Token">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.TokenTag.Token"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TokenTag"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TokenTagger">
            <summary>
            An <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> implementation that tags document text with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TaggerBase`1"/>
            <seealso cref="T:Infragistics.Documents.Parsing.Token"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITokenTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TokenTag"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTagger.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">The <see cref="T:Infragistics.Documents.TextDocument"/> containing the text to be tagged.</param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTagger.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TokenTaggerProvider">
            <summary>
            Provides a token tagger.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.</returns>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TokenTaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChange">
            <summary>
            Describes a single contiguous text change operation on a
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextChange.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.LengthDelta">
            <summary>
            Returns the difference in the length between the
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">TextDocumentSnapshot</see>
            which was the current snapshot immediately before this change and the new snapshot.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.LineCountDelta">
            <summary>
            Returns the difference in the number of lines in the snapshot
            resulting from this change.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.NewLength">
            <summary>
            Returns the length of the document after the change was applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.NewText">
            <summary>
            Returns the text that replaced the
            <see cref="P:Infragistics.Documents.TextChange.OldText">OldText</see>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.NewSpan">
            <summary>
            Returns the span of the text change in the snapshot
            immediately after the change.
            </summary>
            <remarks>
            <p class="body">
            This span is empty for a pure deletion. Its start position differs from that of the
            <see cref="P:Infragistics.Documents.TextChange.OldSpan">NewSpan</see>
            only when there is more than one TextChange included in moving from one
            snapshot to the next.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextChange.OldLength">
            <summary>
            Returns the length of the document before the change was applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.OldText">
            <summary>
            Returns the text that was replaced.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.OldSpan">
            <summary>
            Returns the span of the text change in the snapshot
            immediately before the change.
            </summary>
            <remarks>
            <p class="body">
            This span is empty for a pure insertion. Its start position differs from that of the
            <see cref="P:Infragistics.Documents.TextChange.NewSpan">NewSpan</see>
            only when there is more than one TextChange included in moving from one
            snapshot to the next.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentSnapshot">
            <summary>
            Represents the entire state (i.e. version) of a <see cref="T:Infragistics.Documents.TextDocument"/>.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> Every time a change is made to the document a new snapshot is created. Each snapshot is thread-safe and immutable.</para>
            </remarks>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner(System.Boolean)">
            <summary>
            Creates a new instance of a <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner"/>
            </summary>
            <param name="splitMultilineTokensByLine">
            Indicates whether multiline tokens should be split up so that when scanning tokens, no token returned spans multiple line.
            </param>
            <returns>The new instance of the scanner for this snapshot.</returns>
            <seealso cref="M:Infragistics.Documents.Parsing.Token.GetFullToken"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.Documents.Parsing.TextSpan})">
            <summary>
            Finds an instance of text in the span that matches the search criteria.
            </summary>
            <param name="criteria">The search criteria</param>
            <param name="startOffset">The start offset relative to the beginning of the document.</param>
            <param name="wrapIfNotFound">if true continue the search by wrapping if the end is reached without a match.</param>
            <param name="spanToSearch">An optional span to limit the search to.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.Documents.Parsing.TextSpan})">
            <summary>
            Finds all instances of text in the text span that matches the search criteria.
            </summary>
            <param name="criteria">The search criteria</param>
            <param name="spanToSearch">On optional span to limit the search to.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetLines(System.Int32,System.Boolean)">
            <summary>
            Returns a object that can enumerate <see cref="T:Infragistics.Documents.SnapshotLineInfo"/>s.
            </summary>
            <param name="startLineIndex">The zero-based line offset.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the startLineIndex.</param>
            <returns>A forward or backward enumerator</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText">
            <summary>
            Returns the string representation of this snapshot.
            </summary>
            <returns>The string representation of this snapshot.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText(System.Int32)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="start">The zero-based position of the first character in the string to be returned.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText(System.Int32,System.Int32)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="start">The zero-based position of the first character in the string to be returned.</param>
            <param name="length">The length of the string to be returned.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText(Infragistics.Documents.Parsing.TextSpan)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="span">The span of the text.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokenCount(System.Boolean)">
            <summary>
            Returns the number of <see cref="T:Infragistics.Documents.Parsing.Token"/>s in the shapshot (read-only).
            </summary>
            <param name="splitMultilineTokensByLine">Indicates whether multiline tokens should be split so no token counted spans multiple line.</param>
            <seealso cref="P:Infragistics.Documents.TextDocumentSnapshot.TokenCount"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokens(Infragistics.Documents.Parsing.TextSpan,System.Func{Infragistics.Documents.Parsing.Token,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Returns a object that can enumerate <see cref="T:Infragistics.Documents.Parsing.Token"/>s.
            </summary>
            <param name="span">The span of text to restrict the token enumeration.</param>
            <param name="filter">A function that can decide which tokens get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the end of the span to the beginning of the span.</param>
            <param name="splitMultilineTokensByLine">Indicates whether multiline tokens should be split so no token returned spans multiple line.</param>
            <returns>A forward or backward enumerator of Tokens</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokens(Infragistics.Documents.SnapshotSpan,System.Func{Infragistics.Documents.Parsing.Token,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Returns a object that can enumerate <see cref="T:Infragistics.Documents.Parsing.Token"/>s.
            </summary>
            <param name="span">The span of text to restrict the token enumeration.</param>
            <param name="filter">A function that can decide which tokens get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the end of the span to the beginning of the span.</param>
            <param name="splitMultilineTokensByLine">Indicates whether multiline tokens should be split so no token returned spans multiple line.</param>
            <returns>A forward or backward enumerator of Tokens</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokens(System.Int32,System.Func{Infragistics.Documents.Parsing.Token,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Returns a object that can enumerate <see cref="T:Infragistics.Documents.Parsing.Token"/>s.
            </summary>
            <param name="startOffset">The offset at which to start the token enumeration.</param>
            <param name="filter">A function that can decide which tokens get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the end of the span to the beginning of the span.</param>
            <param name="splitMultilineTokensByLine">Indicates whether multiline tokens should be split so no token returned spans multiple line.</param>
            <returns>A forward or backward enumerator of Tokens</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.IsCompatibleWith(Infragistics.Documents.TextDocumentSnapshot)">
            <summary>
            Determines if 2 snapshots are compatible (i.e. have the same root buffer)
            </summary>
            <param name="other">The snapshot to compare.</param>
            <remarks>
            <para class="note"><b>Note:</b> if snapshots are not compatible then <see cref="T:Infragistics.Documents.SnapshotPoint">SnapshotPoints</see> and <see cref="T:Infragistics.Documents.SnapshotSpan">SnapshotSpans</see> can not be translated between them. 
            Calling either <see cref="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)">SnapshotPoint.TranslateTo</see> or <see cref="M:Infragistics.Documents.SnapshotSpan.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.SpanTrackingMode)">SnapshotSpan.TranslateTo</see> with an incompatible snapshot will raise an exception.</para>
            </remarks>
            <returns>true if both snapshots have the same root buffer, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LineFromIndex(System.Int32)">
            <summary>
            Returns the corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> from a zero-based index.
            </summary>
            <param name="index">The zero-based index of the line..</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is less than zero or greater than or equal to the <see cref="P:Infragistics.Documents.TextDocumentSnapshot.LineCount"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LineFromOffset(System.Int32)">
            <summary>
            Returns the corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LineIndexFromOffset(System.Int32)">
            <summary>
            Returns the corresponding zero-based line index from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding zero based line index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LocationFromOffset(System.Int32)">
            <summary>
            Returns the corresponding line and character location from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding TextLocation struct.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.OffsetFromLocation(Infragistics.Documents.Parsing.TextLocation)">
            <summary>
            Returns the corresponding overall zero-based offset from a line and character location.
            </summary>
            <param name="location">The zero-based line and character numbers for a character location in this snapshot.</param>
            <returns>The corresponding overall zero-based offset from the beginning of the document..</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If resulting offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.TokenFromOffset(System.Int32,System.Boolean)">
            <summary>
            Returns the corresponding <see cref="T:Infragistics.Documents.Parsing.Token"/> from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this token.</param>
            <param name="splitMultilineTokensByLine">Indicates whether multiline tokens should be split so the token returned only consist of the portion on the line at the specified index.</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.Parsing.Token"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.WordFromOffset(System.Int32)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Word"/> from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.Word"/> or null if the offset is not within a word.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Document">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocument"/> (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Item(System.Int32)">
            <summary>
            Returns the character at the specified position(read-only).
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Length">
            <summary>
            Returns the length of the snapshot in characters (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.LineCount">
            <summary>
            Returns the number of <see cref="T:Infragistics.Documents.SnapshotLineInfo">lines</see>  in the shapshot (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.TokenCount">
            <summary>
            Returns the number of <see cref="T:Infragistics.Documents.Parsing.Token">Tokens</see> in the shapshot (read-only).
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.GetTokenCount(System.Boolean)"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Version">
            <summary>
            Returns the version of the document that this snapshot represents (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentSnapshotScanner">
            <summary>
            Exposes methods for scanning through a <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> of a <see cref="T:Infragistics.Documents.TextDocument"/> 
            </summary>
            <remarks>
            <para class="body">This class targets a specific instance of a <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> and is created via the snapshot’s <see cref="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner(System.Boolean)">CreateScanner</see> method. It is used for efficiently scanning thru the snapshot’s lines, tokens and words.</para>
            <para class="body">The <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> property is used to scan thru the snapshot. It can either be set explicitly (it defaults to zero) or via the <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToStart"/>, <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToEnd"/>, <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToLine(Infragistics.Documents.LineScanType)"/>, <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToToken(Infragistics.Documents.TokenScanType,System.Func{Infragistics.Documents.Parsing.Token,System.Boolean})"/> or <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToWord(Infragistics.Documents.WordScanType)"/> methods. Once set, the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentLine"/>, <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentToken"/>, <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentWord"/> and <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentCharacter"/> read-only properties can be used to query what is at the CurrentOffset. In addition, there are 'Peek' next/previous token and word methods to look ahead or behind without changing the CurrentOffset.</para>
            <para clas="note"><b>Note:</b> even though the <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> that it targets is thread-safe, the scanner is not. Therefore it should be created on the same thread that it is used on (i.e. each thread accessing a scanner should create its own). Trying to access the properties and methods of a scanner created on another thread will raise an InvalidOperationException.</para>
            </remarks>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
            <seealso cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
        </member>
        <member name="M:Infragistics.Documents.ITokenScanner.SeekToToken(Infragistics.Documents.TokenScanType,System.Func{Infragistics.Documents.Parsing.Token,System.Boolean})">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.ITokenScanner.CurrentOffset"/> to the beginning or end of a <see cref="T:Infragistics.Documents.Parsing.Token">Token</see>.
            </summary>
            <param name="scanType">The relative token position.</param>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:System.InvalidOperationException">if a filter is supplied and scanType is either 'CurrentTokenStart' or 'CurrentTokenEnd'.</exception>
        </member>
        <member name="P:Infragistics.Documents.ITokenScanner.CurrentOffset">
            <summary>
            Returns/sets the zero-based character offset.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ITokenScanner.CurrentToken">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Parsing.Token">Token</see> at the <see cref="P:Infragistics.Documents.ITokenScanner.CurrentOffset"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ITokenScanner.Snapshot">
            <summary>
            Returns the snapshot that this scanner was created for (read-only)
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner(System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekNextToken(System.Func{Infragistics.Documents.Parsing.Token,System.Boolean})">
            <summary>
            Peeks ahead and returns the next token without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>The next token if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekNextWord">
            <summary>
            Peeks ahead and returns the next word without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <returns>The next word if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekPreviousToken(System.Func{Infragistics.Documents.Parsing.Token,System.Boolean})">
            <summary>
            Peeks backward and returns the previous token without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>The previou token if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekPreviousWord">
            <summary>
            Peeks backward and returns the previous word without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <returns>The previou word if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToEnd">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the length minus one.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToLine(System.Int32)">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning of a line.
            </summary>
            <param name="lineIndex">The zero-based index of the line.</param>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToLine(Infragistics.Documents.LineScanType)">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning or end of a line.
            </summary>
            <param name="scanType">The relative line position.</param>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToStart">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the zero.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToToken(Infragistics.Documents.TokenScanType,System.Func{Infragistics.Documents.Parsing.Token,System.Boolean})">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning or end of a <see cref="T:Infragistics.Documents.Parsing.Token">Token</see>.
            </summary>
            <param name="scanType">The relative token position.</param>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:System.InvalidOperationException">if a filter is supplied and scanType is either 'CurrentTokenStart' or 'CurrentTokenEnd'.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToWord(Infragistics.Documents.WordScanType)">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning or end of a <see cref="T:Infragistics.Documents.Word">Word</see> within a <see cref="T:Infragistics.Documents.Parsing.Token">Token</see>.
            </summary>
            <param name="scanType">The relative word position.</param>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentCharacter">
            <summary>
            Returns the character at the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentLine">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotLineInfo">Line</see> containing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">
            <summary>
            Returns/sets the zero-based character offset.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentToken">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Parsing.Token">Token</see> at the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentWord">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Word">Word</see> at the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
            <value>The word at the current offset or null if <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> is not within a word.</value>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.Snapshot">
            <summary>
            Returns the snapshot that this scanner was created for (read-only)
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner(System.Boolean)"/>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentVersion">
            <summary>
            An object that identifies a specific version of a <see cref="T:Infragistics.Documents.TextDocument"/> including a list of the changes that were made to create the next version.
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocumentSnapshot.Version"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.Changes">
            <summary>
            Returns a read-only collection of the <see cref="T:Infragistics.Documents.TextChange">changes</see> that were applied to get to the next version.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> for the <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot"/> this property will return null.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocumentVersion.ChangeSource"/>
            <seealso cref="T:Infragistics.Documents.TextChange"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.ChangeSource">
            <summary>
            Returns the source of the changes that were applied to get to the next version (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> for the <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot"/> this property will return null.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocumentVersion.Changes"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.Length">
            <summary>
            Returns the overall length of this version of the document (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.NextVersion">
            <summary>
            Returns the next version of this document (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> for the <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot"/> this property will return null.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.VersionNumber">
            <summary>
            Returns the version number for this version (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextSearchCriteria">
            <summary>
            Defines the criteria to use when performing a find operation on text within a <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</seealso>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
        </member>
        <member name="M:Infragistics.Documents.TextSearchCriteria.#ctor(System.Boolean,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextSearchCriteria"/>
            </summary>
            <param name="wholeWordOnly">If true bypass partial word matches.</param>
            <param name="regexPattern">The regular expression pattern to use.</param>
            <param name="regexOptions">the regular expression options to use..</param>
        </member>
        <member name="M:Infragistics.Documents.TextSearchCriteria.#ctor(System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextSearchCriteria"/>
            </summary>
            <param name="wholeWordOnly">If true bypass partial word matches.</param>
            <param name="regexPattern">The regular expression pattern to use.</param>
            <param name="isCaseSensitive">If true will match only if the case matches.</param>
            <param name="searchBackwards">If true will serach up in the document.</param>
        </member>
        <member name="M:Infragistics.Documents.TextSearchCriteria.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextSearchCriteria"/>
            </summary>
            <param name="textToFind">The text to search for.</param>
            <param name="wholeWordOnly">If true bypass partial word matches.</param>
            <param name="isCaseSensitive">If true will match only if the case matches.</param>
            <param name="searchBackwards">If true will serach up in the document.</param>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.IsCaseSensitive">
            <summary>
            Returns whether the find operation is case sensitive (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.RegexOptions">
            <summary>
            Returns the regex options to use for the search (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.RegexPattern">
            <summary>
            Returns the regex pattern to use for the search (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.SearchBackwards">
            <summary>
            Returns the search direction (.i.e. whether the search should look forwards or backwards in the text) (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.TextToFind">
            <summary>
            Returns the text to search for (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.WholeWordOnly">
            <summary>
            Returns whether to ignore partial matches within words (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextSearchResult">
            <summary>
            Represents a single match in a find or replace operation on text within a <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</seealso>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.op_Equality(Infragistics.Documents.TextSearchResult,Infragistics.Documents.TextSearchResult)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.TextSearchResult"/> structures for equality
            </summary>
            <param name="result1">The first structure</param>
            <param name="result2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.op_Inequality(Infragistics.Documents.TextSearchResult,Infragistics.Documents.TextSearchResult)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.TextSearchResult"/> structures for inequality
            </summary>
            <param name="result1">The first structure</param>
            <param name="result2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Infragistics.Documents.TextSearchResult"/></returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.Equals(Infragistics.Documents.TextSearchResult)">
            <summary>
            Determines if a structure is equatable to this one.
            </summary>
            <param name="other">The other structure</param>
            <returns>Returns true if the structures are equatable, otherwise false</returns>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResult.SpanFound">
            <summary>
            Returns the span of the text that was found (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> in the case of a replace operation, the snapshot of <b>SpanFound</b> will reference the snapshot before the change was applied while the snapshot of <b>SpanReplaced</b> will reference the snapshot after the change was applied.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextSearchResult.SpanReplaced"/>
            <seealso cref="P:Infragistics.Documents.TextSearchResultInfo.Results"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResult.SpanReplaced">
            <summary>
            Returns the span of the text that was replaced or null if no text was replaced (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> in the case of a replace operation, the snapshot of <b>SpanFound</b> will reference the snapshot before the change was applied while the snapshot of <b>SpanReplaced</b> will reference the snapshot after the change was applied.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextSearchResult.SpanFound"/>
            <seealso cref="P:Infragistics.Documents.TextSearchResultInfo.Results"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
        </member>
        <member name="T:Infragistics.Documents.TextSearchResultInfo">
            <summary>
            Represents the results of a find or replace operation on text within a <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</seealso>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.Documents.Parsing.TextSpan})"/>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResultInfo.Criteria">
            <summary>
            Returns the criteria use for the search operation (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResultInfo.Results">
            <summary>
            Returns a read-only collection of the TextSearchResult instances.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextSearchResult"/>
        </member>
        <member name="T:Infragistics.Documents.IndentOutdentUndoUnit">
            <summary>
            Class for an undo/redo of an indent or outdent operation on a TextDocument.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.IndentOutdentUndoUnit.Execute(Infragistics.Undo.UndoExecuteContext)">
            <summary>
            Used to perform the associated action.
            </summary>
            <param name="executeInfo">Provides information about the undo/redo operation being executed.</param>
            <returns>Returns true if some action was taken. Otherwise false is returned. In either case the object was removed from the undo stack.</returns>
        </member>
        <member name="M:Infragistics.Documents.IndentOutdentUndoUnit.GetDescription(Infragistics.Undo.UndoHistoryItemType,System.Boolean)">
            <summary>
            Returns a string representation of the action based on whether this is for an undo or redo operation.
            </summary>
            <param name="itemType">The type of history for which the description is being requested.</param>
            <param name="detailed">A boolean indicating if a detailed description should be returned. For example, when false one may return "Typing" but for verbose one may return "Typing 'qwerty'".</param>
        </member>
        <member name="M:Infragistics.Documents.IndentOutdentUndoUnit.Merge(Infragistics.Undo.UndoMergeContext)">
            <summary>
            Used to allow multiple consecutive undo units to be merged into a single operation.
            </summary>
            <param name="mergeInfo">Provides information about the unit to evaluate for a merge operation</param>
            <returns>Returns an enumeration used to provide identify how the unit was merged.</returns>
        </member>
        <member name="P:Infragistics.Documents.IndentOutdentUndoUnit.Target">
            <summary>
            Returns the target object that will be affected by the <see cref="T:Infragistics.Undo.UndoUnit"/>
            </summary>
        </member>
        <member name="T:Infragistics.Documents.ReplaceAllUndoUnit">
            <summary>
            Class for an undo/redo replace all operation on a TextDocument.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.Execute(Infragistics.Undo.UndoExecuteContext)">
            <summary>
            Used to perform the associated action.
            </summary>
            <param name="executeInfo">Provides information about the undo/redo operation being executed.</param>
            <returns>Returns true if some action was taken. Otherwise false is returned. In either case the object was removed from the undo stack.</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.GetDescription(Infragistics.Undo.UndoHistoryItemType,System.Boolean)">
            <summary>
            Returns a string representation of the action based on whether this is for an undo or redo operation.
            </summary>
            <param name="itemType">The type of history for which the description is being requested.</param>
            <param name="detailed">A boolean indicating if a detailed description should be returned. For example, when false one may return "Typing" but for verbose one may return "Typing 'qwerty'".</param>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.Merge(Infragistics.Undo.UndoMergeContext)">
            <summary>
            Used to allow multiple consecutive undo units to be merged into a single operation.
            </summary>
            <param name="mergeInfo">Provides information about the unit to evaluate for a merge operation</param>
            <returns>Returns an enumeration used to provide identify how the unit was merged.</returns>
        </member>
        <member name="P:Infragistics.Documents.ReplaceAllUndoUnit.Target">
            <summary>
            Returns the target object that will be affected by the <see cref="T:Infragistics.Undo.UndoUnit"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_GreaterThan(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is greater than other</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_LessThan(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is less than other</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_Equality(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures for equality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_Inequality(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures for inequality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentUndoUnit">
            <summary>
            Class for an undo/redo operation on a TextDocument.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentUndoUnit.Execute(Infragistics.Undo.UndoExecuteContext)">
            <summary>
            Used to perform the associated action.
            </summary>
            <param name="executeInfo">Provides information about the undo/redo operation being executed.</param>
            <returns>Returns true if some action was taken. Otherwise false is returned. In either case the object was removed from the undo stack.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentUndoUnit.GetDescription(Infragistics.Undo.UndoHistoryItemType,System.Boolean)">
            <summary>
            Returns a string representation of the action based on whether this is for an undo or redo operation.
            </summary>
            <param name="itemType">The type of history for which the description is being requested.</param>
            <param name="detailed">A boolean indicating if a detailed description should be returned. For example, when false one may return "Typing" but for verbose one may return "Typing 'qwerty'".</param>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentUndoUnit.Merge(Infragistics.Undo.UndoMergeContext)">
            <summary>
            Used to allow multiple consecutive undo units to be merged into a single operation.
            </summary>
            <param name="mergeInfo">Provides information about the unit to evaluate for a merge operation</param>
            <returns>Returns an enumeration used to provide identify how the unit was merged.</returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentUndoUnit.Target">
            <summary>
            Returns the target object that will be affected by the <see cref="T:Infragistics.Undo.UndoUnit"/>
            </summary>
        </member>
    </members>
</doc>
